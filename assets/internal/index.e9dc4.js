System.register("chunks:///_virtual/debug-view-runtime-control.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,o,i,n,s,l,r,h,g,a,c,p,C,d,m;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.initializerDefineProperty},function(t){i=t.cclegacy,n=t.Node,s=t._decorator,l=t.Component,r=t.Color,h=t.Canvas,g=t.UITransform,a=t.instantiate,c=t.Label,p=t.RichText,C=t.Toggle,d=t.Button,m=t.director}],execute:function(){var u,L,M,b,T,f,x,S,E;i._RF.push({},"b2bd1+njXxJxaFY3ymm06WU","debug-view-runtime-control",void 0);const{ccclass:v,property:I}=s;t("DebugViewRuntimeControl",(u=v("internal.DebugViewRuntimeControl"),L=I(n),M=I(n),b=I(n),u((x=e((f=class extends l{constructor(){super(...arguments),o(this,"compositeModeToggle",x,this),o(this,"singleModeToggle",S,this),o(this,"EnableAllCompositeModeButton",E,this),this._single=0,this.strSingle=["No Single Debug","Vertex Color","Vertex Normal","Vertex Tangent","World Position","Vertex Mirror","Face Side","UV0","UV1","UV Lightmap","Project Depth","Linear Depth","Fragment Normal","Fragment Tangent","Fragment Binormal","Base Color","Diffuse Color","Specular Color","Transparency","Metallic","Roughness","Specular Intensity","IOR","Direct Diffuse","Direct Specular","Direct All","Env Diffuse","Env Specular","Env All","Emissive","Light Map","Shadow","AO","Fresnel","Direct Transmit Diffuse","Direct Transmit Specular","Env Transmit Diffuse","Env Transmit Specular","Transmit All","Direct Internal Specular","Env Internal Specular","Internal All","Fog"],this.strComposite=["Direct Diffuse","Direct Specular","Env Diffuse","Env Specular","Emissive","Light Map","Shadow","AO","Normal Map","Fog","Tone Mapping","Gamma Correction","Fresnel","Transmit Diffuse","Transmit Specular","Internal Specular","TT"],this.strMisc=["CSM Layer Coloration","Lighting With Albedo"],this.compositeModeToggleList=[],this.singleModeToggleList=[],this.miscModeToggleList=[],this.textComponentList=[],this.labelComponentList=[],this.textContentList=[],this.hideButtonLabel=void 0,this._currentColorIndex=0,this.strColor=["<color=#ffffff>","<color=#000000>","<color=#ff0000>","<color=#00ff00>","<color=#0000ff>"],this.color=[r.WHITE,r.BLACK,r.RED,r.GREEN,r.BLUE]}start(){if(!this.node.parent.getComponent(h))return void console.error("debug-view-runtime-control should be child of Canvas");const t=this.node.parent.getComponent(g),e=.5*t.width,o=.5*t.height;let i=.1*e-e,n=o-.1*o;const s=this.node.getChildByName("MiscMode"),l=a(s);l.parent=this.node,l.name="Buttons";const m=a(s);m.parent=this.node,m.name="Titles";for(let t=0;t<2;t++){const e=a(this.EnableAllCompositeModeButton.getChildByName("Label"));e.setPosition(i+(t>0?450:150),n,0),e.setScale(.75,.75,.75),e.parent=m;const o=e.getComponent(c);o.string=t?"----------Composite Mode----------":"----------Single Mode----------",o.color=r.WHITE,o.overflow=0,this.labelComponentList[this.labelComponentList.length]=o}n-=20;let u=0;for(let t=0;t<this.strSingle.length;t++,u++){t===this.strSingle.length>>1&&(i+=200,u=0);const e=t?a(this.singleModeToggle):this.singleModeToggle;e.setPosition(i,n-20*u,0),e.setScale(.5,.5,.5),e.parent=this.singleModeToggle.parent;const o=e.getComponentInChildren(p);o.string=this.strSingle[t],this.textComponentList[this.textComponentList.length]=o,this.textContentList[this.textContentList.length]=o.string,e.on(C.EventType.TOGGLE,this.toggleSingleMode,this),this.singleModeToggleList[t]=e}i+=200,this.EnableAllCompositeModeButton.setPosition(i+15,n,0),this.EnableAllCompositeModeButton.setScale(.5,.5,.5),this.EnableAllCompositeModeButton.on(d.EventType.CLICK,this.enableAllCompositeMode,this),this.EnableAllCompositeModeButton.parent=l;let L=this.EnableAllCompositeModeButton.getComponentInChildren(c);this.labelComponentList[this.labelComponentList.length]=L;const M=a(this.EnableAllCompositeModeButton);M.setPosition(i+90,n,0),M.setScale(.5,.5,.5),M.on(d.EventType.CLICK,this.changeTextColor,this),M.parent=l,L=M.getComponentInChildren(c),L.string="TextColor",this.labelComponentList[this.labelComponentList.length]=L;const b=a(this.EnableAllCompositeModeButton);b.setPosition(i+200,n,0),b.setScale(.5,.5,.5),b.on(d.EventType.CLICK,this.hideUI,this),b.parent=this.node.parent,L=b.getComponentInChildren(c),L.string="Hide UI",this.labelComponentList[this.labelComponentList.length]=L,this.hideButtonLabel=L,n-=40;for(let t=0;t<this.strMisc.length;t++){const e=a(this.compositeModeToggle);e.setPosition(i,n-20*t,0),e.setScale(.5,.5,.5),e.parent=s;const o=e.getComponentInChildren(p);o.string=this.strMisc[t],this.textComponentList[this.textComponentList.length]=o,this.textContentList[this.textContentList.length]=o.string;e.getComponent(C).isChecked=!!t,e.on(C.EventType.TOGGLE,t?this.toggleLightingWithAlbedo:this.toggleCSMColoration,this),this.miscModeToggleList[t]=e}n-=150;for(let t=0;t<this.strComposite.length;t++){const e=t?a(this.compositeModeToggle):this.compositeModeToggle;e.setPosition(i,n-20*t,0),e.setScale(.5,.5,.5),e.parent=this.compositeModeToggle.parent;const o=e.getComponentInChildren(p);o.string=this.strComposite[t],this.textComponentList[this.textComponentList.length]=o,this.textContentList[this.textContentList.length]=o.string,e.on(C.EventType.TOGGLE,this.toggleCompositeMode,this),this.compositeModeToggleList[t]=e}}isTextMatched(t,e){let o=new String(t);const i=o.search(">");return-1===i?t===e:(o=o.substr(i+1),o=o.substr(0,o.search("<")),o===e)}toggleSingleMode(t){const e=m.root.debugView,o=t.getComponentInChildren(p);for(let t=0;t<this.strSingle.length;t++)this.isTextMatched(o.string,this.strSingle[t])&&(e.singleMode=t)}toggleCompositeMode(t){const e=m.root.debugView,o=t.getComponentInChildren(p);for(let i=0;i<this.strComposite.length;i++)this.isTextMatched(o.string,this.strComposite[i])&&e.enableCompositeMode(i,t.isChecked)}toggleLightingWithAlbedo(t){m.root.debugView.lightingWithAlbedo=t.isChecked}toggleCSMColoration(t){m.root.debugView.csmLayerColoration=t.isChecked}enableAllCompositeMode(t){const e=m.root.debugView;e.enableAllCompositeMode(!0);for(let t=0;t<this.compositeModeToggleList.length;t++){this.compositeModeToggleList[t].getComponent(C).isChecked=!0}let o=this.miscModeToggleList[0].getComponent(C);o.isChecked=!1,e.csmLayerColoration=!1,o=this.miscModeToggleList[1].getComponent(C),o.isChecked=!0,e.lightingWithAlbedo=!0}hideUI(t){const e=this.node.getChildByName("Titles"),o=!e.active;this.singleModeToggleList[0].parent.active=o,this.miscModeToggleList[0].parent.active=o,this.compositeModeToggleList[0].parent.active=o,this.EnableAllCompositeModeButton.parent.active=o,e.active=o,this.hideButtonLabel.string=o?"Hide UI":"Show UI"}changeTextColor(t){this._currentColorIndex++,this._currentColorIndex>=this.strColor.length&&(this._currentColorIndex=0);for(let t=0;t<this.textComponentList.length;t++)this.textComponentList[t].string=this.strColor[this._currentColorIndex]+this.textContentList[t]+"</color>";for(let t=0;t<this.labelComponentList.length;t++)this.labelComponentList[t].color=this.color[this._currentColorIndex]}onLoad(){}update(t){}}).prototype,"compositeModeToggle",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=e(f.prototype,"singleModeToggle",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),E=e(f.prototype,"EnableAllCompositeModeButton",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),T=f))||T));i._RF.pop()}}}));

System.register("chunks:///_virtual/internal",["./debug-view-runtime-control.ts"],(function(){return{setters:[null],execute:function(){}}}));

(function(r) {
  r('virtual:///prerequisite-imports/internal', 'chunks:///_virtual/internal'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2ZpbGU6L0FwcGxpY2F0aW9ucy9Db2Nvcy9DcmVhdG9yLzMuOC40L0NvY29zQ3JlYXRvci5hcHAvQ29udGVudHMvUmVzb3VyY2VzL3Jlc291cmNlcy8zZC9lbmdpbmUvZWRpdG9yL2Fzc2V0cy90b29scy9maWxlOi9BcHBsaWNhdGlvbnMvQ29jb3MvQ3JlYXRvci8zLjguNC9Db2Nvc0NyZWF0b3IuYXBwL0NvbnRlbnRzL1Jlc291cmNlcy9yZXNvdXJjZXMvM2QvZW5naW5lL2VkaXRvci9hc3NldHMvdG9vbHMvZGVidWctdmlldy1ydW50aW1lLWNvbnRyb2wudHMiXSwibmFtZXMiOlsiY2NjbGFzcyIsInByb3BlcnR5IiwiX2RlY29yYXRvciIsIl9kZWMiLCJfZGVjMiIsIk5vZGUiLCJfZGVjMyIsIl9kZWM0IiwiX2Rlc2NyaXB0b3IiLCJfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yIiwiX2NsYXNzMiIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJhcmd1bWVudHMiLCJfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSIsIl9kZXNjcmlwdG9yMiIsIl9kZXNjcmlwdG9yMyIsInRoaXMiLCJfc2luZ2xlIiwic3RyU2luZ2xlIiwic3RyQ29tcG9zaXRlIiwic3RyTWlzYyIsImNvbXBvc2l0ZU1vZGVUb2dnbGVMaXN0Iiwic2luZ2xlTW9kZVRvZ2dsZUxpc3QiLCJtaXNjTW9kZVRvZ2dsZUxpc3QiLCJ0ZXh0Q29tcG9uZW50TGlzdCIsImxhYmVsQ29tcG9uZW50TGlzdCIsInRleHRDb250ZW50TGlzdCIsImhpZGVCdXR0b25MYWJlbCIsIl9jdXJyZW50Q29sb3JJbmRleCIsInN0ckNvbG9yIiwiY29sb3IiLCJDb2xvciIsIldISVRFIiwiQkxBQ0siLCJSRUQiLCJHUkVFTiIsIkJMVUUiLCJzdGFydCIsIm5vZGUiLCJwYXJlbnQiLCJnZXRDb21wb25lbnQiLCJDYW52YXMiLCJjb25zb2xlIiwiZXJyb3IiLCJ1aVRyYW5zZm9ybSIsIlVJVHJhbnNmb3JtIiwiaGFsZlNjcmVlbldpZHRoIiwid2lkdGgiLCJoYWxmU2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwieCIsInkiLCJtaXNjTm9kZSIsImdldENoaWxkQnlOYW1lIiwiYnV0dG9uTm9kZSIsImluc3RhbnRpYXRlIiwibmFtZSIsInRpdGxlTm9kZSIsImkiLCJuZXdMYWJlbCIsIkVuYWJsZUFsbENvbXBvc2l0ZU1vZGVCdXR0b24iLCJzZXRQb3NpdGlvbiIsInNldFNjYWxlIiwibGFiZWxDb21wb25lbnQiLCJMYWJlbCIsInN0cmluZyIsIm92ZXJmbG93IiwibGVuZ3RoIiwiY3VycmVudFJvdyIsIm5ld05vZGUiLCJzaW5nbGVNb2RlVG9nZ2xlIiwidGV4dENvbXBvbmVudCIsImdldENvbXBvbmVudEluQ2hpbGRyZW4iLCJSaWNoVGV4dCIsIm9uIiwiVG9nZ2xlIiwiRXZlbnRUeXBlIiwiVE9HR0xFIiwidG9nZ2xlU2luZ2xlTW9kZSIsIkJ1dHRvbiIsIkNMSUNLIiwiZW5hYmxlQWxsQ29tcG9zaXRlTW9kZSIsImNoYW5nZUNvbG9yQnV0dG9uIiwiY2hhbmdlVGV4dENvbG9yIiwiSGlkZUJ1dHRvbiIsImhpZGVVSSIsImNvbXBvc2l0ZU1vZGVUb2dnbGUiLCJpc0NoZWNrZWQiLCJ0b2dnbGVMaWdodGluZ1dpdGhBbGJlZG8iLCJ0b2dnbGVDU01Db2xvcmF0aW9uIiwidG9nZ2xlQ29tcG9zaXRlTW9kZSIsImlzVGV4dE1hdGNoZWQiLCJ0ZXh0VUkiLCJ0ZXh0RGVzY3JpcHRpb24iLCJ0ZW1wVGV4dCIsIlN0cmluZyIsImZpbmRJbmRleCIsInNlYXJjaCIsInN1YnN0ciIsInRvZ2dsZSIsImRlYnVnVmlldyIsImRpcmVjdG9yIiwicm9vdCIsInNpbmdsZU1vZGUiLCJlbmFibGVDb21wb3NpdGVNb2RlIiwibGlnaHRpbmdXaXRoQWxiZWRvIiwiY3NtTGF5ZXJDb2xvcmF0aW9uIiwiYnV0dG9uIiwidG9nZ2xlQ29tcG9uZW50IiwiYWN0aXZlVmFsdWUiLCJhY3RpdmUiLCJvbkxvYWQiLCJ1cGRhdGUiLCJkZWx0YVRpbWUiLCJwcm90b3R5cGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJpbml0aWFsaXplciIsIl9jbGFzcyIsIl9SRiIsInBvcCJdLCJtYXBwaW5ncyI6IjRoQkFDQSxNQUFNQSxRQUFFQSxFQUFPQyxTQUFFQSxHQUFhQywrQkFHTUMsRUFEbkNILEVBQVEsb0NBQW1DSSxFQUV2Q0gsRUFBU0ksR0FBS0MsRUFFZEwsRUFBU0ksR0FBS0UsRUFFZE4sRUFBU0ksR0FBS0YsR0FvVGxCSyxFQUFBQyxHQXBUa0JDLEVBTm5CLGNBQzZDQyxFQUFVQyxjQUFBQyxTQUFBQyxXQUFBQyw2QkFBQVAsUUFBQU8sMEJBQUFDLFFBQUFELHNDQUFBRSxRQUFBQyxLQU90REMsUUFBa0IsRUFBQ0QsS0FFUkUsVUFBc0IsQ0FDMUIsa0JBQ0EsZUFDQSxnQkFDQSxpQkFDQSxpQkFDQSxnQkFDQSxZQUNBLE1BQ0EsTUFDQSxjQUNBLGdCQUNBLGVBRUEsa0JBQ0EsbUJBQ0Esb0JBQ0EsYUFDQSxnQkFDQSxpQkFDQSxlQUNBLFdBQ0EsWUFDQSxxQkFDQSxNQUVBLGlCQUNBLGtCQUNBLGFBQ0EsY0FDQSxlQUNBLFVBQ0EsV0FDQSxZQUNBLFNBQ0EsS0FFQSxVQUNBLDBCQUNBLDJCQUNBLHVCQUNBLHdCQUNBLGVBQ0EsMkJBQ0Esd0JBQ0EsZUFFQSxPQUNIRixLQUNPRyxhQUF5QixDQUM3QixpQkFDQSxrQkFDQSxjQUNBLGVBQ0EsV0FDQSxZQUNBLFNBQ0EsS0FFQSxhQUNBLE1BRUEsZUFDQSxtQkFFQSxVQUNBLG1CQUNBLG9CQUNBLG9CQUNBLE1BQ0hILEtBQ09JLFFBQW9CLENBQ3hCLHVCQUNBLHdCQUNISixLQUVPSyx3QkFBa0MsR0FBRUwsS0FDcENNLHFCQUErQixHQUFFTixLQUNqQ08sbUJBQTZCLEdBQUVQLEtBQy9CUSxrQkFBZ0MsR0FBRVIsS0FDbENTLG1CQUE4QixHQUFFVCxLQUNoQ1UsZ0JBQTRCLEdBQUVWLEtBQzlCVyx1QkFBZVgsS0E4TGZZLG1CQUFxQixFQUFDWixLQUN0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QVNELEVBQ2hEN0YsS0FBSzRDLDZCQUE2QnJCLE9BQU91RSxPQUFTRCxFQUNsRHBELEVBQVVxRCxPQUFTRCxFQUNuQjdGLEtBQUtXLGdCQUFnQnNDLE9BQVM0QyxFQUFjLFVBQVksVUFrQjVEMUIsZ0JBQWdCd0IsR0FDWjNGLEtBQUtZLHFCQUNEWixLQUFLWSxvQkFBc0JaLEtBQUthLFNBQVNzQyxTQUN6Q25ELEtBQUtZLG1CQUFxQixHQUU5QixJQUFLLElBQUk4QixFQUFJLEVBQUdBLEVBQUkxQyxLQUFLUSxrQkFBa0IyQyxPQUFRVCxJQUMvQzFDLEtBQUtRLGtCQUFrQmtDLEdBQUdPLE9BQVNqRCxLQUFLYSxTQUFTYixLQUFLWSxvQkFBc0JaLEtBQUtVLGdCQUFnQmdDLEdBQUssV0FFMUcsSUFBSyxJQUFJQSxFQUFJLEVBQUdBLEVBQUkxQyxLQUFLUyxtQkFBbUIwQyxPQUFRVCxJQUNoRDFDLEtBQUtTLG1CQUFtQmlDLEdBQUc1QixNQUFRZCxLQUFLYyxNQUFNZCxLQUFLWSxvQkFJM0RtRixVQUVBQyxPQUFPQyxPQUVWQyxpQ0FBQWhILElBQUFpSCxnQkFBQUMsY0FBQUMsWUFBQUMsdUJBQUEsT0F2VHNDLFFBQUl4RyxFQUFBUCxFQUFBQyxFQUFBMEcsOEJBQUE5RyxJQUFBK0csZ0JBQUFDLGNBQUFDLFlBQUFDLHVCQUFBLE9BRVAsUUFBSXZHLEVBQUFSLEVBQUFDLEVBQUEwRywwQ0FBQTdHLElBQUE4RyxnQkFBQUMsY0FBQUMsWUFBQUMsdUJBQUEsT0FFUSxRQUQ3QkMsRUFDaUMvRyxLQUFBK0csTUFtVG5EQyxJQUFBQyIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xvciwgQ2FudmFzLCBVSVRyYW5zZm9ybSwgaW5zdGFudGlhdGUsIG1hdGgsIFRvZ2dsZSwgVGV4dHVyZUN1YmUsIF9kZWNvcmF0b3IsIENvbXBvbmVudCwgQnV0dG9uLCBsYWJlbEFzc2VtYmxlciwgZ2FtZSwgZGlyZWN0b3IsIE5vZGUsIFNjZW5lLCByZW5kZXJlciwgQ2FtZXJhQ29tcG9uZW50LCBMYWJlbCwgRm9yd2FyZFBpcGVsaW5lLCBSaWNoVGV4dCB9IGZyb20gJ2NjJztcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XG5cbkBjY2NsYXNzKCdpbnRlcm5hbC5EZWJ1Z1ZpZXdSdW50aW1lQ29udHJvbCcpXG5leHBvcnQgY2xhc3MgRGVidWdWaWV3UnVudGltZUNvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIEBwcm9wZXJ0eShOb2RlKVxuICAgIGNvbXBvc2l0ZU1vZGVUb2dnbGU6IE5vZGUgfCBudWxsID0gbnVsbDtcbiAgICBAcHJvcGVydHkoTm9kZSlcbiAgICBzaW5nbGVNb2RlVG9nZ2xlOiBOb2RlIHwgbnVsbCA9IG51bGw7XG4gICAgQHByb3BlcnR5KE5vZGUpXG4gICAgRW5hYmxlQWxsQ29tcG9zaXRlTW9kZUJ1dHRvbjogTm9kZSB8IG51bGwgPSBudWxsO1xuXHRfc2luZ2xlOiBudW1iZXIgPSAwO1xuXG4gICAgcHJpdmF0ZSBzdHJTaW5nbGU6IHN0cmluZ1tdID0gW1xuICAgICAgICAnTm8gU2luZ2xlIERlYnVnJyxcbiAgICAgICAgJ1ZlcnRleCBDb2xvcicsXG4gICAgICAgICdWZXJ0ZXggTm9ybWFsJyxcbiAgICAgICAgJ1ZlcnRleCBUYW5nZW50JyxcbiAgICAgICAgJ1dvcmxkIFBvc2l0aW9uJyxcbiAgICAgICAgJ1ZlcnRleCBNaXJyb3InLFxuICAgICAgICAnRmFjZSBTaWRlJyxcbiAgICAgICAgJ1VWMCcsXG4gICAgICAgICdVVjEnLFxuICAgICAgICAnVVYgTGlnaHRtYXAnLFxuICAgICAgICAnUHJvamVjdCBEZXB0aCcsXG4gICAgICAgICdMaW5lYXIgRGVwdGgnLFxuXG4gICAgICAgICdGcmFnbWVudCBOb3JtYWwnLFxuICAgICAgICAnRnJhZ21lbnQgVGFuZ2VudCcsXG4gICAgICAgICdGcmFnbWVudCBCaW5vcm1hbCcsXG4gICAgICAgICdCYXNlIENvbG9yJyxcbiAgICAgICAgJ0RpZmZ1c2UgQ29sb3InLFxuICAgICAgICAnU3BlY3VsYXIgQ29sb3InLFxuICAgICAgICAnVHJhbnNwYXJlbmN5JyxcbiAgICAgICAgJ01ldGFsbGljJyxcbiAgICAgICAgJ1JvdWdobmVzcycsXG4gICAgICAgICdTcGVjdWxhciBJbnRlbnNpdHknLFxuICAgICAgICAnSU9SJyxcblxuICAgICAgICAnRGlyZWN0IERpZmZ1c2UnLFxuICAgICAgICAnRGlyZWN0IFNwZWN1bGFyJyxcbiAgICAgICAgJ0RpcmVjdCBBbGwnLFxuICAgICAgICAnRW52IERpZmZ1c2UnLFxuICAgICAgICAnRW52IFNwZWN1bGFyJyxcbiAgICAgICAgJ0VudiBBbGwnLFxuICAgICAgICAnRW1pc3NpdmUnLFxuICAgICAgICAnTGlnaHQgTWFwJyxcbiAgICAgICAgJ1NoYWRvdycsXG4gICAgICAgICdBTycsXG5cbiAgICAgICAgJ0ZyZXNuZWwnLFxuICAgICAgICAnRGlyZWN0IFRyYW5zbWl0IERpZmZ1c2UnLFxuICAgICAgICAnRGlyZWN0IFRyYW5zbWl0IFNwZWN1bGFyJyxcbiAgICAgICAgJ0VudiBUcmFuc21pdCBEaWZmdXNlJyxcbiAgICAgICAgJ0VudiBUcmFuc21pdCBTcGVjdWxhcicsXG4gICAgICAgICdUcmFuc21pdCBBbGwnLFxuICAgICAgICAnRGlyZWN0IEludGVybmFsIFNwZWN1bGFyJyxcbiAgICAgICAgJ0VudiBJbnRlcm5hbCBTcGVjdWxhcicsXG4gICAgICAgICdJbnRlcm5hbCBBbGwnLFxuXG4gICAgICAgICdGb2cnLFxuICAgIF07XG4gICAgcHJpdmF0ZSBzdHJDb21wb3NpdGU6IHN0cmluZ1tdID0gW1xuICAgICAgICAnRGlyZWN0IERpZmZ1c2UnLFxuICAgICAgICAnRGlyZWN0IFNwZWN1bGFyJyxcbiAgICAgICAgJ0VudiBEaWZmdXNlJyxcbiAgICAgICAgJ0VudiBTcGVjdWxhcicsXG4gICAgICAgICdFbWlzc2l2ZScsXG4gICAgICAgICdMaWdodCBNYXAnLFxuICAgICAgICAnU2hhZG93JyxcbiAgICAgICAgJ0FPJyxcblxuICAgICAgICAnTm9ybWFsIE1hcCcsXG4gICAgICAgICdGb2cnLFxuXG4gICAgICAgICdUb25lIE1hcHBpbmcnLFxuICAgICAgICAnR2FtbWEgQ29ycmVjdGlvbicsXG5cbiAgICAgICAgJ0ZyZXNuZWwnLFxuICAgICAgICAnVHJhbnNtaXQgRGlmZnVzZScsXG4gICAgICAgICdUcmFuc21pdCBTcGVjdWxhcicsXG4gICAgICAgICdJbnRlcm5hbCBTcGVjdWxhcicsXG4gICAgICAgICdUVCcsXG4gICAgXTtcbiAgICBwcml2YXRlIHN0ck1pc2M6IHN0cmluZ1tdID0gW1xuICAgICAgICAnQ1NNIExheWVyIENvbG9yYXRpb24nLFxuICAgICAgICAnTGlnaHRpbmcgV2l0aCBBbGJlZG8nLFxuICAgIF07XG5cbiAgICBwcml2YXRlIGNvbXBvc2l0ZU1vZGVUb2dnbGVMaXN0OiBOb2RlW10gPSBbXTtcbiAgICBwcml2YXRlIHNpbmdsZU1vZGVUb2dnbGVMaXN0OiBOb2RlW10gPSBbXTtcbiAgICBwcml2YXRlIG1pc2NNb2RlVG9nZ2xlTGlzdDogTm9kZVtdID0gW107XG4gICAgcHJpdmF0ZSB0ZXh0Q29tcG9uZW50TGlzdDogUmljaFRleHRbXSA9IFtdO1xuICAgIHByaXZhdGUgbGFiZWxDb21wb25lbnRMaXN0OiBMYWJlbFtdID0gW107XG4gICAgcHJpdmF0ZSB0ZXh0Q29udGVudExpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgcHJpdmF0ZSBoaWRlQnV0dG9uTGFiZWw6IExhYmVsO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICAvLyBnZXQgY2FudmFzIHJlc29sdXRpb25cbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5ub2RlLnBhcmVudC5nZXRDb21wb25lbnQoQ2FudmFzKTtcbiAgICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2RlYnVnLXZpZXctcnVudGltZS1jb250cm9sIHNob3VsZCBiZSBjaGlsZCBvZiBDYW52YXMnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVpVHJhbnNmb3JtID0gdGhpcy5ub2RlLnBhcmVudC5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xuICAgICAgICBjb25zdCBoYWxmU2NyZWVuV2lkdGggPSB1aVRyYW5zZm9ybS53aWR0aCAqIDAuNTtcbiAgICAgICAgY29uc3QgaGFsZlNjcmVlbkhlaWdodCA9IHVpVHJhbnNmb3JtLmhlaWdodCAqIDAuNTtcblxuICAgICAgICBsZXQgeCA9IC1oYWxmU2NyZWVuV2lkdGggKyBoYWxmU2NyZWVuV2lkdGggKiAwLjEsIHkgPSBoYWxmU2NyZWVuSGVpZ2h0IC0gaGFsZlNjcmVlbkhlaWdodCAqIDAuMTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSAyMDAsIGhlaWdodCA9IDIwO1xuXG4gICAgICAgIC8vIG5ldyBub2Rlc1xuICAgICAgICBjb25zdCBtaXNjTm9kZSA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZSgnTWlzY01vZGUnKTtcbiAgICAgICAgY29uc3QgYnV0dG9uTm9kZSA9IGluc3RhbnRpYXRlKG1pc2NOb2RlKTtcbiAgICAgICAgYnV0dG9uTm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XG4gICAgICAgIGJ1dHRvbk5vZGUubmFtZSA9ICdCdXR0b25zJztcbiAgICAgICAgY29uc3QgdGl0bGVOb2RlID0gaW5zdGFudGlhdGUobWlzY05vZGUpO1xuICAgICAgICB0aXRsZU5vZGUucGFyZW50ID0gdGhpcy5ub2RlO1xuICAgICAgICB0aXRsZU5vZGUubmFtZSA9ICdUaXRsZXMnO1xuXG4gICAgICAgIC8vIHRpdGxlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdMYWJlbCA9IGluc3RhbnRpYXRlKHRoaXMuRW5hYmxlQWxsQ29tcG9zaXRlTW9kZUJ1dHRvbi5nZXRDaGlsZEJ5TmFtZSgnTGFiZWwnKSk7XG4gICAgICAgICAgICBuZXdMYWJlbC5zZXRQb3NpdGlvbih4ICsgKGkgPiAwID8gNTAgKyB3aWR0aCAqIDIgOiAxNTApLCB5LCAwLjApO1xuICAgICAgICAgICAgbmV3TGFiZWwuc2V0U2NhbGUoMC43NSwgMC43NSwgMC43NSk7XG4gICAgICAgICAgICBuZXdMYWJlbC5wYXJlbnQgPSB0aXRsZU5vZGU7XG4gICAgICAgICAgICBjb25zdCBsYWJlbENvbXBvbmVudCA9IG5ld0xhYmVsLmdldENvbXBvbmVudChMYWJlbCk7XG4gICAgICAgICAgICBsYWJlbENvbXBvbmVudC5zdHJpbmcgPSBpID8gJy0tLS0tLS0tLS1Db21wb3NpdGUgTW9kZS0tLS0tLS0tLS0nIDogJy0tLS0tLS0tLS1TaW5nbGUgTW9kZS0tLS0tLS0tLS0nO1xuICAgICAgICAgICAgbGFiZWxDb21wb25lbnQuY29sb3IgPSBDb2xvci5XSElURTtcbiAgICAgICAgICAgIGxhYmVsQ29tcG9uZW50Lm92ZXJmbG93ID0gMDtcbiAgICAgICAgICAgIHRoaXMubGFiZWxDb21wb25lbnRMaXN0W3RoaXMubGFiZWxDb21wb25lbnRMaXN0Lmxlbmd0aF0gPSBsYWJlbENvbXBvbmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHkgLT0gaGVpZ2h0O1xuICAgICAgICAvLyBzaW5nbGVcbiAgICAgICAgbGV0IGN1cnJlbnRSb3cgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RyU2luZ2xlLmxlbmd0aDsgaSsrLCBjdXJyZW50Um93KyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSB0aGlzLnN0clNpbmdsZS5sZW5ndGggPj4gMSkge1xuICAgICAgICAgICAgICAgIHggKz0gd2lkdGg7XG4gICAgICAgICAgICAgICAgY3VycmVudFJvdyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlID0gaSA/IGluc3RhbnRpYXRlKHRoaXMuc2luZ2xlTW9kZVRvZ2dsZSkgOiB0aGlzLnNpbmdsZU1vZGVUb2dnbGU7XG4gICAgICAgICAgICBuZXdOb2RlLnNldFBvc2l0aW9uKHgsIHkgLSBoZWlnaHQgKiBjdXJyZW50Um93LCAwLjApO1xuICAgICAgICAgICAgbmV3Tm9kZS5zZXRTY2FsZSgwLjUsIDAuNSwgMC41KTtcbiAgICAgICAgICAgIG5ld05vZGUucGFyZW50ID0gdGhpcy5zaW5nbGVNb2RlVG9nZ2xlLnBhcmVudDtcblxuICAgICAgICAgICAgY29uc3QgdGV4dENvbXBvbmVudCA9IG5ld05vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihSaWNoVGV4dCk7XG4gICAgICAgICAgICB0ZXh0Q29tcG9uZW50LnN0cmluZyA9IHRoaXMuc3RyU2luZ2xlW2ldO1xuICAgICAgICAgICAgdGhpcy50ZXh0Q29tcG9uZW50TGlzdFt0aGlzLnRleHRDb21wb25lbnRMaXN0Lmxlbmd0aF0gPSB0ZXh0Q29tcG9uZW50O1xuICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudExpc3RbdGhpcy50ZXh0Q29udGVudExpc3QubGVuZ3RoXSA9IHRleHRDb21wb25lbnQuc3RyaW5nO1xuXG4gICAgICAgICAgICBuZXdOb2RlLm9uKFRvZ2dsZS5FdmVudFR5cGUuVE9HR0xFLCB0aGlzLnRvZ2dsZVNpbmdsZU1vZGUsIHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLnNpbmdsZU1vZGVUb2dnbGVMaXN0W2ldID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHggKz0gd2lkdGg7XG4gICAgICAgIC8vIGJ1dHRvbnNcbiAgICAgICAgdGhpcy5FbmFibGVBbGxDb21wb3NpdGVNb2RlQnV0dG9uLnNldFBvc2l0aW9uKHggKyAxNSwgeSwgMC4wKTtcbiAgICAgICAgdGhpcy5FbmFibGVBbGxDb21wb3NpdGVNb2RlQnV0dG9uLnNldFNjYWxlKDAuNSwgMC41LCAwLjUpO1xuICAgICAgICB0aGlzLkVuYWJsZUFsbENvbXBvc2l0ZU1vZGVCdXR0b24ub24oQnV0dG9uLkV2ZW50VHlwZS5DTElDSywgdGhpcy5lbmFibGVBbGxDb21wb3NpdGVNb2RlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5FbmFibGVBbGxDb21wb3NpdGVNb2RlQnV0dG9uLnBhcmVudCA9IGJ1dHRvbk5vZGU7XG4gICAgICAgIGxldCBsYWJlbENvbXBvbmVudCA9IHRoaXMuRW5hYmxlQWxsQ29tcG9zaXRlTW9kZUJ1dHRvbi5nZXRDb21wb25lbnRJbkNoaWxkcmVuKExhYmVsKTtcbiAgICAgICAgdGhpcy5sYWJlbENvbXBvbmVudExpc3RbdGhpcy5sYWJlbENvbXBvbmVudExpc3QubGVuZ3RoXSA9IGxhYmVsQ29tcG9uZW50O1xuXG4gICAgICAgIGNvbnN0IGNoYW5nZUNvbG9yQnV0dG9uID0gaW5zdGFudGlhdGUodGhpcy5FbmFibGVBbGxDb21wb3NpdGVNb2RlQnV0dG9uKTtcbiAgICAgICAgY2hhbmdlQ29sb3JCdXR0b24uc2V0UG9zaXRpb24oeCArIDkwLCB5LCAwLjApO1xuICAgICAgICBjaGFuZ2VDb2xvckJ1dHRvbi5zZXRTY2FsZSgwLjUsIDAuNSwgMC41KTtcbiAgICAgICAgY2hhbmdlQ29sb3JCdXR0b24ub24oQnV0dG9uLkV2ZW50VHlwZS5DTElDSywgdGhpcy5jaGFuZ2VUZXh0Q29sb3IsIHRoaXMpO1xuICAgICAgICBjaGFuZ2VDb2xvckJ1dHRvbi5wYXJlbnQgPSBidXR0b25Ob2RlO1xuICAgICAgICBsYWJlbENvbXBvbmVudCA9IGNoYW5nZUNvbG9yQnV0dG9uLmdldENvbXBvbmVudEluQ2hpbGRyZW4oTGFiZWwpO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5zdHJpbmcgPSAnVGV4dENvbG9yJztcbiAgICAgICAgdGhpcy5sYWJlbENvbXBvbmVudExpc3RbdGhpcy5sYWJlbENvbXBvbmVudExpc3QubGVuZ3RoXSA9IGxhYmVsQ29tcG9uZW50O1xuXG4gICAgICAgIGNvbnN0IEhpZGVCdXR0b24gPSBpbnN0YW50aWF0ZSh0aGlzLkVuYWJsZUFsbENvbXBvc2l0ZU1vZGVCdXR0b24pO1xuICAgICAgICBIaWRlQnV0dG9uLnNldFBvc2l0aW9uKHggKyAyMDAsIHksIDAuMCk7XG4gICAgICAgIEhpZGVCdXR0b24uc2V0U2NhbGUoMC41LCAwLjUsIDAuNSk7XG4gICAgICAgIEhpZGVCdXR0b24ub24oQnV0dG9uLkV2ZW50VHlwZS5DTElDSywgdGhpcy5oaWRlVUksIHRoaXMpO1xuICAgICAgICBIaWRlQnV0dG9uLnBhcmVudCA9IHRoaXMubm9kZS5wYXJlbnQ7XG4gICAgICAgIGxhYmVsQ29tcG9uZW50ID0gSGlkZUJ1dHRvbi5nZXRDb21wb25lbnRJbkNoaWxkcmVuKExhYmVsKTtcbiAgICAgICAgbGFiZWxDb21wb25lbnQuc3RyaW5nID0gJ0hpZGUgVUknO1xuICAgICAgICB0aGlzLmxhYmVsQ29tcG9uZW50TGlzdFt0aGlzLmxhYmVsQ29tcG9uZW50TGlzdC5sZW5ndGhdID0gbGFiZWxDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuaGlkZUJ1dHRvbkxhYmVsID0gbGFiZWxDb21wb25lbnQ7XG5cbiAgICAgICAgLy8gbWlzY1xuICAgICAgICB5IC09IDQwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RyTWlzYy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmV3Tm9kZSA9IGluc3RhbnRpYXRlKHRoaXMuY29tcG9zaXRlTW9kZVRvZ2dsZSk7XG4gICAgICAgICAgICBuZXdOb2RlLnNldFBvc2l0aW9uKHgsIHkgLSBoZWlnaHQgKiBpLCAwLjApO1xuICAgICAgICAgICAgbmV3Tm9kZS5zZXRTY2FsZSgwLjUsIDAuNSwgMC41KTtcbiAgICAgICAgICAgIG5ld05vZGUucGFyZW50ID0gbWlzY05vZGU7XG5cbiAgICAgICAgICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBuZXdOb2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oUmljaFRleHQpO1xuICAgICAgICAgICAgdGV4dENvbXBvbmVudC5zdHJpbmcgPSB0aGlzLnN0ck1pc2NbaV07XG4gICAgICAgICAgICB0aGlzLnRleHRDb21wb25lbnRMaXN0W3RoaXMudGV4dENvbXBvbmVudExpc3QubGVuZ3RoXSA9IHRleHRDb21wb25lbnQ7XG4gICAgICAgICAgICB0aGlzLnRleHRDb250ZW50TGlzdFt0aGlzLnRleHRDb250ZW50TGlzdC5sZW5ndGhdID0gdGV4dENvbXBvbmVudC5zdHJpbmc7XG5cbiAgICAgICAgICAgIGNvbnN0IHRvZ2dsZUNvbXBvbmVudCA9IG5ld05vZGUuZ2V0Q29tcG9uZW50KFRvZ2dsZSk7XG4gICAgICAgICAgICB0b2dnbGVDb21wb25lbnQuaXNDaGVja2VkID0gaSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIG5ld05vZGUub24oVG9nZ2xlLkV2ZW50VHlwZS5UT0dHTEUsIGkgPyB0aGlzLnRvZ2dsZUxpZ2h0aW5nV2l0aEFsYmVkbyA6IHRoaXMudG9nZ2xlQ1NNQ29sb3JhdGlvbiwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLm1pc2NNb2RlVG9nZ2xlTGlzdFtpXSA9IG5ld05vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21wb3NpdGVcbiAgICAgICAgeSAtPSAxNTA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdHJDb21wb3NpdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld05vZGUgPSBpID8gaW5zdGFudGlhdGUodGhpcy5jb21wb3NpdGVNb2RlVG9nZ2xlKSA6IHRoaXMuY29tcG9zaXRlTW9kZVRvZ2dsZTtcbiAgICAgICAgICAgIG5ld05vZGUuc2V0UG9zaXRpb24oeCwgeSAtIGhlaWdodCAqIGksIDAuMCk7XG4gICAgICAgICAgICBuZXdOb2RlLnNldFNjYWxlKDAuNSwgMC41LCAwLjUpO1xuICAgICAgICAgICAgbmV3Tm9kZS5wYXJlbnQgPSB0aGlzLmNvbXBvc2l0ZU1vZGVUb2dnbGUucGFyZW50O1xuXG4gICAgICAgICAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gbmV3Tm9kZS5nZXRDb21wb25lbnRJbkNoaWxkcmVuKFJpY2hUZXh0KTtcbiAgICAgICAgICAgIHRleHRDb21wb25lbnQuc3RyaW5nID0gdGhpcy5zdHJDb21wb3NpdGVbaV07XG4gICAgICAgICAgICB0aGlzLnRleHRDb21wb25lbnRMaXN0W3RoaXMudGV4dENvbXBvbmVudExpc3QubGVuZ3RoXSA9IHRleHRDb21wb25lbnQ7XG4gICAgICAgICAgICB0aGlzLnRleHRDb250ZW50TGlzdFt0aGlzLnRleHRDb250ZW50TGlzdC5sZW5ndGhdID0gdGV4dENvbXBvbmVudC5zdHJpbmc7XG5cbiAgICAgICAgICAgIG5ld05vZGUub24oVG9nZ2xlLkV2ZW50VHlwZS5UT0dHTEUsIHRoaXMudG9nZ2xlQ29tcG9zaXRlTW9kZSwgdGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuY29tcG9zaXRlTW9kZVRvZ2dsZUxpc3RbaV0gPSBuZXdOb2RlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNUZXh0TWF0Y2hlZCh0ZXh0VUksIHRleHREZXNjcmlwdGlvbikgOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHRlbXBUZXh0ID0gbmV3IFN0cmluZyh0ZXh0VUkpO1xuICAgICAgICBjb25zdCBmaW5kSW5kZXggPSB0ZW1wVGV4dC5zZWFyY2goJz4nKTtcbiAgICAgICAgaWYgKGZpbmRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0VUkgPT09IHRleHREZXNjcmlwdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXBUZXh0ID0gdGVtcFRleHQuc3Vic3RyKGZpbmRJbmRleCArIDEpO1xuICAgICAgICAgICAgdGVtcFRleHQgPSB0ZW1wVGV4dC5zdWJzdHIoMCwgdGVtcFRleHQuc2VhcmNoKCc8JykpO1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBUZXh0ID09PSB0ZXh0RGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9nZ2xlU2luZ2xlTW9kZSh0b2dnbGU6IFRvZ2dsZSkge1xuICAgICAgICBjb25zdCBkZWJ1Z1ZpZXcgPSBkaXJlY3Rvci5yb290IS5kZWJ1Z1ZpZXc7XG4gICAgICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSB0b2dnbGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihSaWNoVGV4dCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdHJTaW5nbGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVGV4dE1hdGNoZWQodGV4dENvbXBvbmVudC5zdHJpbmcsIHRoaXMuc3RyU2luZ2xlW2ldKSkge1xuICAgICAgICAgICAgICAgIGRlYnVnVmlldy5zaW5nbGVNb2RlID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2dnbGVDb21wb3NpdGVNb2RlKHRvZ2dsZTogVG9nZ2xlKSB7XG4gICAgICAgIGNvbnN0IGRlYnVnVmlldyA9IGRpcmVjdG9yLnJvb3QhLmRlYnVnVmlldztcbiAgICAgICAgY29uc3QgdGV4dENvbXBvbmVudCA9IHRvZ2dsZS5nZXRDb21wb25lbnRJbkNoaWxkcmVuKFJpY2hUZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0ckNvbXBvc2l0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUZXh0TWF0Y2hlZCh0ZXh0Q29tcG9uZW50LnN0cmluZywgdGhpcy5zdHJDb21wb3NpdGVbaV0pKSB7XG4gICAgICAgICAgICAgICAgZGVidWdWaWV3LmVuYWJsZUNvbXBvc2l0ZU1vZGUoaSwgdG9nZ2xlLmlzQ2hlY2tlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9nZ2xlTGlnaHRpbmdXaXRoQWxiZWRvKHRvZ2dsZTogVG9nZ2xlKSB7XG4gICAgICAgIGNvbnN0IGRlYnVnVmlldyA9IGRpcmVjdG9yLnJvb3QhLmRlYnVnVmlldztcbiAgICAgICAgZGVidWdWaWV3LmxpZ2h0aW5nV2l0aEFsYmVkbyA9IHRvZ2dsZS5pc0NoZWNrZWQ7XG4gICAgfVxuICAgIHRvZ2dsZUNTTUNvbG9yYXRpb24odG9nZ2xlOiBUb2dnbGUpIHtcbiAgICAgICAgY29uc3QgZGVidWdWaWV3ID0gZGlyZWN0b3Iucm9vdCEuZGVidWdWaWV3O1xuICAgICAgICBkZWJ1Z1ZpZXcuY3NtTGF5ZXJDb2xvcmF0aW9uID0gdG9nZ2xlLmlzQ2hlY2tlZDtcbiAgICB9XG4gICAgZW5hYmxlQWxsQ29tcG9zaXRlTW9kZShidXR0b246IEJ1dHRvbikge1xuICAgICAgICBjb25zdCBkZWJ1Z1ZpZXcgPSBkaXJlY3Rvci5yb290IS5kZWJ1Z1ZpZXc7XG4gICAgICAgIGRlYnVnVmlldy5lbmFibGVBbGxDb21wb3NpdGVNb2RlKHRydWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29tcG9zaXRlTW9kZVRvZ2dsZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRvZ2dsZUNvbXBvbmVudCA9IHRoaXMuY29tcG9zaXRlTW9kZVRvZ2dsZUxpc3RbaV0uZ2V0Q29tcG9uZW50KFRvZ2dsZSk7XG4gICAgICAgICAgICB0b2dnbGVDb21wb25lbnQuaXNDaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b2dnbGVDb21wb25lbnQgPSB0aGlzLm1pc2NNb2RlVG9nZ2xlTGlzdFswXS5nZXRDb21wb25lbnQoVG9nZ2xlKTtcbiAgICAgICAgdG9nZ2xlQ29tcG9uZW50LmlzQ2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICBkZWJ1Z1ZpZXcuY3NtTGF5ZXJDb2xvcmF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRvZ2dsZUNvbXBvbmVudCA9IHRoaXMubWlzY01vZGVUb2dnbGVMaXN0WzFdLmdldENvbXBvbmVudChUb2dnbGUpO1xuICAgICAgICB0b2dnbGVDb21wb25lbnQuaXNDaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgZGVidWdWaWV3LmxpZ2h0aW5nV2l0aEFsYmVkbyA9IHRydWU7XG4gICAgfVxuICAgIGhpZGVVSShidXR0b246IEJ1dHRvbikge1xuICAgICAgICBjb25zdCB0aXRsZU5vZGUgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoJ1RpdGxlcycpO1xuICAgICAgICBjb25zdCBhY3RpdmVWYWx1ZSA9ICF0aXRsZU5vZGUuYWN0aXZlO1xuICAgICAgICB0aGlzLnNpbmdsZU1vZGVUb2dnbGVMaXN0WzBdLnBhcmVudC5hY3RpdmUgPSBhY3RpdmVWYWx1ZTtcbiAgICAgICAgdGhpcy5taXNjTW9kZVRvZ2dsZUxpc3RbMF0ucGFyZW50LmFjdGl2ZSA9IGFjdGl2ZVZhbHVlO1xuICAgICAgICB0aGlzLmNvbXBvc2l0ZU1vZGVUb2dnbGVMaXN0WzBdLnBhcmVudC5hY3RpdmUgPSBhY3RpdmVWYWx1ZTtcbiAgICAgICAgdGhpcy5FbmFibGVBbGxDb21wb3NpdGVNb2RlQnV0dG9uLnBhcmVudC5hY3RpdmUgPSBhY3RpdmVWYWx1ZTtcbiAgICAgICAgdGl0bGVOb2RlLmFjdGl2ZSA9IGFjdGl2ZVZhbHVlO1xuICAgICAgICB0aGlzLmhpZGVCdXR0b25MYWJlbC5zdHJpbmcgPSBhY3RpdmVWYWx1ZSA/ICdIaWRlIFVJJyA6ICdTaG93IFVJJztcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jdXJyZW50Q29sb3JJbmRleCA9IDA7XG4gICAgcHJpdmF0ZSBzdHJDb2xvcjogc3RyaW5nW10gPSBbXG4gICAgICAgICc8Y29sb3I9I2ZmZmZmZj4nLFxuICAgICAgICAnPGNvbG9yPSMwMDAwMDA+JyxcbiAgICAgICAgJzxjb2xvcj0jZmYwMDAwPicsXG4gICAgICAgICc8Y29sb3I9IzAwZmYwMD4nLFxuICAgICAgICAnPGNvbG9yPSMwMDAwZmY+JyxcbiAgICBdO1xuICAgIHByaXZhdGUgY29sb3I6IENvbG9yW10gPSBbXG4gICAgICAgIENvbG9yLldISVRFLFxuICAgICAgICBDb2xvci5CTEFDSyxcbiAgICAgICAgQ29sb3IuUkVELFxuICAgICAgICBDb2xvci5HUkVFTixcbiAgICAgICAgQ29sb3IuQkxVRSxcbiAgICBdO1xuICAgIGNoYW5nZVRleHRDb2xvcihidXR0b246IEJ1dHRvbikge1xuICAgICAgICB0aGlzLl9jdXJyZW50Q29sb3JJbmRleCsrO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudENvbG9ySW5kZXggPj0gdGhpcy5zdHJDb2xvci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRDb2xvckluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGV4dENvbXBvbmVudExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudGV4dENvbXBvbmVudExpc3RbaV0uc3RyaW5nID0gdGhpcy5zdHJDb2xvclt0aGlzLl9jdXJyZW50Q29sb3JJbmRleF0gKyB0aGlzLnRleHRDb250ZW50TGlzdFtpXSArICc8L2NvbG9yPic7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxhYmVsQ29tcG9uZW50TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5sYWJlbENvbXBvbmVudExpc3RbaV0uY29sb3IgPSB0aGlzLmNvbG9yW3RoaXMuX2N1cnJlbnRDb2xvckluZGV4XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTG9hZCgpIHtcbiAgICB9XG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XG4gICAgfVxufVxuIl19