[1,["38/7qOyEZOr6i6rGox3yB0","12Y9dMgWdJKJGmTiZyQR9H@17020","62C2vzA2lFYIN/KiwAtzwm","12Y9dMgWdJKJGmTiZyQR9H@2e76e","a6VJRuayNMV6f44kWktE4e@f9941","d4vLcdHNdIXaebMI3mcVpI","8awVSoeJtN/YvPBz2vS+K7@f9941","70eg/M8m1DMpxETdrWXSQs@f9941","c89m0XNRpI2qEsAhLShXXE","acJmCN7qVKNLW3ORZKjKpM@f9941","ffxgeQMntGNKn0WrQdhNYl@f9941","ddCcyIqUJH1YduwMJx1bOZ@f9941","a9WlGevshPc4tXEfGm4QDZ@f9941","0d2o8ot3VFVJl2zg6UwdF6@f9941","75fb2EVUJIbrrbUf3GpcD/@f9941","eburHjwihOXKe+FpxxBm3z@6c48a","76MVBvruxLAaDRQBPwXHc9@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","4c5mh9qcFImrFMHPj+ZBXL@f9941","39xqo/jhhFq6ACh3LERiAx@f9941","d3UwluychA4YMRb5wwFWEf@f9941","b7jk6OxshDupdXBLQBzlVG@f9941","01CPMlqYlNM7csCcY5CJZm","08/UzFmEtEEocgPaqRZQot@f9941","13w4Ir3ABCsZQNgWIjswq7@f9941","bbT50smo5OtaplsN9qGyRS@f9941","4ajlpGQrdEmrZswsZMb7zD@f9941","20Iirkh11Dk6v8bHsrKJWa@f9941","0a6A+Z9f9ARr4++EoRkE78@f9941","23RUijrtdKzqy2XecEkZ7a@f9941","9cz0IpsIJATL7eiTm42zJG@f9941","ed4tZyZWtPD53ZkF8lxd8p@35ebe","51zMXp5HtGcqxGAXExSX9Z@2deab","51zMXp5HtGcqxGAXExSX9Z@99d6c","51zMXp5HtGcqxGAXExSX9Z@6ec10","12Y9dMgWdJKJGmTiZyQR9H@a804a","7c0+cxgMtP54Y0A0ltvhYY","a51R6IQt5L660TuoZjmT1G@f9941","4cUHRbEc1DUasrQoI6sx1q@f9941","3fy0EI7bFJOJ/ljQ2wdakI@6c48a","08/UzFmEtEEocgPaqRZQot@6c48a","0a6A+Z9f9ARr4++EoRkE78@6c48a","0d2o8ot3VFVJl2zg6UwdF6@6c48a","13w4Ir3ABCsZQNgWIjswq7@6c48a","20Iirkh11Dk6v8bHsrKJWa@6c48a","23RUijrtdKzqy2XecEkZ7a@6c48a","39xqo/jhhFq6ACh3LERiAx@6c48a","4f/YPtXMZDtbLnNjgqNSCM@6c48a","a3zQCfCrBCDZJ4uf2rk5u8","48a8Y4IjhDDqYzC739em+v@6c48a","4ajlpGQrdEmrZswsZMb7zD@6c48a","4bUSzAx4VBcIUv6j5vtWem@6c48a","4cUHRbEc1DUasrQoI6sx1q@6c48a","4c5mh9qcFImrFMHPj+ZBXL@6c48a","4fOsB8sPZOlpC5BsV7a54o@6c48a","5bBZBQp4BPOLFTOkV20+c7@6c48a","63WkeAUwRMaZV05McFyVaA@6c48a","70eg/M8m1DMpxETdrWXSQs@6c48a","5bBZBQp4BPOLFTOkV20+c7@f9941","ddchWErvRCzoAFx0DchE0d@f9941","acvRnuhwpBj7zzOOxEPGKI","a9toiroQ9Lh5jDRJlvozNc@f9941","86AzuSQnlCop843EzXJqwY@f9941","c7+GEm6y9DoIpQTUmsW4Yv@f9941","8b/emybqVHc4JwjTYstCru@f9941","48a8Y4IjhDDqYzC739em+v@f9941","4fOsB8sPZOlpC5BsV7a54o@f9941","fdcUJtUg9GVJ/Q7+09lgb7@f9941","cbzF0i2P5ICIS1zQJneYvN@f9941","b2JluEn6lF4ZJaTAnJk55H@f9941","90M8SCqFZCiKNGIGxHsJuv@f9941","f6Snc7DqVKZoLLiHf0md6/@f9941","f943tESp5GfKzOu+GkC/tE@f9941","92oE204vxPX597PhfRpQjV@f9941","7fKdB9WylESLN9e3gdSmhl@f9941","98ou4L7lFKHLperlCgH1+S@f9941","63WkeAUwRMaZV05McFyVaA@f9941","cdlsl2V9NDdr8oIA/U9S6Y@f9941","3ay3HfWH1IcrFdBFaHyIi9","eegIgxqWFIvaaCa3GaSQxS","ademcTpnVJU5MHzga9DRhw","ed4tZyZWtPD53ZkF8lxd8p@8447b","a4kOHkKSBEQ6Mcd9ZDFzkb","0fscinflxHiqzsTqJf2Qc+","e1HZOIQEFNO6/abiyV3j1C","4bUSzAx4VBcIUv6j5vtWem@f9941","9dFqU7AtNPXJ0jhwN7mJ6x","b2x0mreGhJ0LP3w9+iBhD0","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","75fb2EVUJIbrrbUf3GpcD/@6c48a","76MVBvruxLAaDRQBPwXHc9@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","7fKdB9WylESLN9e3gdSmhl@6c48a","86AzuSQnlCop843EzXJqwY@6c48a","8awVSoeJtN/YvPBz2vS+K7@6c48a","8b/emybqVHc4JwjTYstCru@6c48a","90M8SCqFZCiKNGIGxHsJuv@6c48a","92oE204vxPX597PhfRpQjV@6c48a","98ou4L7lFKHLperlCgH1+S@6c48a","9cz0IpsIJATL7eiTm42zJG@6c48a","b49sbgqwRK9pkv+z/c55Ek","a51R6IQt5L660TuoZjmT1G@6c48a","a6VJRuayNMV6f44kWktE4e@6c48a","a9WlGevshPc4tXEfGm4QDZ@6c48a","a9toiroQ9Lh5jDRJlvozNc@6c48a","acJmCN7qVKNLW3ORZKjKpM@6c48a","e3nXpWvG1LaLW0HooW8/3X@6c48a","b2JluEn6lF4ZJaTAnJk55H@6c48a","c3tPLDDFJNd4jwUzF7N9G8@6c48a","b7jk6OxshDupdXBLQBzlVG@6c48a","bbT50smo5OtaplsN9qGyRS@6c48a","c7+GEm6y9DoIpQTUmsW4Yv@6c48a","cbzF0i2P5ICIS1zQJneYvN@6c48a","cdlsl2V9NDdr8oIA/U9S6Y@6c48a","d3UwluychA4YMRb5wwFWEf@6c48a","ddCcyIqUJH1YduwMJx1bOZ@6c48a","ddchWErvRCzoAFx0DchE0d@6c48a","3cV4mBLyBFwIc9oOftVpSa","ed4tZyZWtPD53ZkF8lxd8p@8d883","f6SJZOjTJB/JrJeh5xTdF7","d3AYSNy7pI473NonuZQVg0@6c48a","92PCnmZg5C8qlSEhoJ/YKy@6c48a","f6Snc7DqVKZoLLiHf0md6/@6c48a","f943tESp5GfKzOu+GkC/tE@6c48a","fdcUJtUg9GVJ/Q7+09lgb7@6c48a","ffxgeQMntGNKn0WrQdhNYl@6c48a"],["node","_spriteFrame","_textureSource","_mesh","_parent","_normalSprite","_material","_target","_effectAsset","mainTexture","root","_checkMark","_barSprite","targetInfo","_skeletonData","data","pbrMap","_cameraComponent","scene","icon1","icon2","icon3","asset","_defaultClip","material","tag","add","nft","usdc","coin","_envmapHDR","_envmapLDR","occlusionMap","emissiveMap"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_objFlags","_id","__editorExtras__","_components","_parent","_lpos","_children","_lscale","_lrot","_euler","_prefab"],-3,9,1,5,2,5,5,5,4],["cc.Label",["_string","_actualFontSize","_isBold","_fontSize","_overflow","_lineHeight","_horizontalAlign","_enableWrapText","_enableShadow","node","_color","_shadowOffset"],-6,1,5,5],["cc.Widget",["_alignFlags","_right","_top","_left","_bottom","_originalWidth","_originalHeight","_alignMode","node","_target"],-5,1,1],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color"],1,1,6,5],["cc.MeshRenderer",["_name","_shadowCastingMode","node","_materials","bakeSettings","_mesh","__prefab"],1,1,3,4,6,4],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.ModelBakeSettings",["_receiveShadow","_castShadow"],1],["cc.Button",["_transition","node","_normalSprite","_normalColor","_target"],2,1,6,5,1],["cc.RigidBody",["_type","_mass","_linearDamping","_angularDamping","node","__prefab"],-1,1,4],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Node",["_name","_layer","_parent","_components","_children","_lpos"],1,1,12,2,5],["cc.Node",["_name","_parent","_lpos","_components","_children"],2,1,5,2,9],["cc.SphereCollider",["node","_center","_material","__prefab"],3,1,5,6,4],["cc.MeshCollider",["_material","_mesh","node"],3,6,6,1],["sp.Skeleton",["defaultSkin","defaultAnimation","_preCacheMode","loop","_premultipliedAlpha","node","_skeletonData"],-2,1,6],["cc.Camera",["_projection","_far","_clearFlags","_visibility","_priority","_orthoHeight","node","_color"],-3,1,5],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.PhysicsMaterial",["_friction","_rollingFriction","_spinningFriction"],0],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["a7d6dXfqilInpZcCfgaVlXs",["node","material","tag","add","nft","usdc","coin"],3,1,6,6,6,6,6,6],["cdf2eac9r1DIJdgYX9SjOO8",["node","icon1","icon2","icon3"],3,1,6,6,6],["cc.Toggle",["node","_normalColor","_target","_checkMark","_normalSprite"],3,1,5,1,1,6],["cc.Animation",["node","_clips","_defaultClip"],3,1,3,6],["cc.ProgressBar",["_totalLength","_progress","node","_barSprite"],1,1,1],["cc.Layout",["_resizeMode","_layoutType","_spacingX","_spacingY","node"],-1,1],["cc.TargetInfo",["localID"],2],["cc.Scene",["_name","autoReleaseAssets","_children","_prefab","_globals"],1,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5],["cc.ShadowsInfo",["_enabled","_type","_shadowColor","_size"],1,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.PlaneCollider",["node","_material"],3,1,6],["cc.PrefabInstance",["fileId","prefabRootNode","mountedComponents","propertyOverrides"],1,9,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["cc.DirectionalLight",["_colorTemperature","_illuminanceHDR","_shadowEnabled","_shadowPcf","_shadowSaturation","_shadowDistance","node","_staticSettings"],-3,1,4],["cc.StaticLightSettings",[],3],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["b08a3qMqrRKXaTPZOtmmSw2",["node","__prefab"],3,1,4]],[[7,0,1,1],[1,0,1,7,6,8,3],[1,0,1,7,9,6,8,3],[4,2,3,1],[4,0,2,3,2],[8,1],[5,0,2,3,4,5,2],[1,0,1,9,6,8,3],[1,0,1,7,6,8,10,3],[7,0,1],[1,0,7,6,8,10,2],[10,0,4,2],[4,1,0,2,3,3],[1,0,1,7,6,3],[44,0,1,1],[1,0,7,6,8,11,10,12,2],[4,0,2,2],[9,0,1,3,4,2,2],[1,0,3,1,7,6,8,4],[3,0,5,6,8,4],[19,0,1,2,3],[1,0,2,1,7,9,6,4],[1,0,2,1,7,6,8,4],[9,0,1,2,2],[2,0,6,1,3,5,4,2,9,10,8],[1,0,1,7,6,10,3],[2,0,1,3,4,7,2,9,7],[48,0,1,2,2],[53,0,2],[7,0,1,2,1],[30,0,2],[2,0,1,3,2,9,5],[2,0,6,1,3,4,2,9,10,7],[2,0,1,3,5,2,9,6],[18,0,1,2,3,4,5],[6,2,3,0,1,4,5],[1,0,1,9,6,3],[4,0,2,4,3,2],[9,0,1,2],[34,0,1,2,3,4,5,5],[2,0,1,4,7,2,9,6],[2,0,1,3,5,2,9,10,6],[2,0,1,3,9,4],[20,0,1,2,4],[6,2,0,1,4,4],[1,0,7,9,6,8,11,10,12,2],[1,0,2,1,9,6,4],[1,0,2,1,9,6,8,4],[1,0,2,1,7,9,6,8,4],[1,0,7,9,8,10,2],[1,0,1,7,9,6,10,3],[1,0,4,7,6,8,11,12,3],[12,0,1,2,4,3,5,3],[12,0,1,2,3,3],[3,0,1,7,8,9,4],[4,2,1],[4,1,0,2,3],[5,0,1,2,3,4,5,3],[5,2,3,4,5,1],[26,0,1,2,3,4,1],[28,0,1,2,3,3],[29,0,1,2,3,4,5],[15,2,0,1,1],[2,0,1,2,9,4],[2,0,6,1,3,4,2,9,7],[2,0,1,3,2,9,10,5],[47,0,1,2,3],[52,0,2],[6,0,1,4,3],[11,0,1,3],[11,0,1,2,3,5],[21,0,1,2,4],[22,0,2],[1,0,4,9,6,3],[1,0,1,7,9,6,3],[1,0,7,9,11,12,2],[1,0,6,8,11,10,12,2],[1,0,2,6,8,11,10,12,3],[1,0,2,1,7,6,10,4],[1,0,3,1,7,6,4],[1,3,5,7,13,3],[1,0,2,7,9,8,10,3],[1,0,7,8,2],[1,0,6,13,8,10,2],[1,0,9,13,2],[1,0,7,6,13,2],[13,0,1,3,2,2],[13,0,1,4,2,2],[23,0,1,1],[3,0,3,1,2,4,8,6],[3,0,4,5,8,4],[3,0,2,8,3],[3,0,3,2,8,4],[3,0,1,8,3],[24,0,1,2,3,4,5,6,1],[5,0,1,2,6,3,4,5,3],[5,2,6,3,4,5,1],[8,1,0,3],[8,0,2],[25,0,1,2,3,1],[27,0,1,2,1],[31,0,1,2,3,4,3],[32,0,1,2,3,4,5,6],[33,0,1,2,3,4,5,4],[35,0,1,2,3,4,5,6,7,1],[36,0,1,2,3,2],[37,0,1,2,3,3],[38,0,1,2,2],[39,1],[40,1],[41,1],[42,1],[43,1],[10,0,2],[10,1,2,3,4,5,4],[14,0,1,2,1],[14,0,3,1,1],[15,0,1,1],[2,0,1,5,2,9,5],[2,0,1,5,4,2,9,6],[2,0,1,3,4,2,9,10,6],[2,0,1,3,5,4,2,9,7],[2,0,6,1,3,5,4,2,9,8],[2,0,1,3,5,2,8,9,11,7],[16,0,1,2,3,5,6,5],[16,0,1,4,2,3,5,6,6],[45,0,1,2,3,3],[46,0,1,1],[49,0,1,2,3],[50,0,1,2,3,4,5,6,7,7],[51,1],[17,0,1,2,3,6,5],[17,0,4,5,1,2,3,6,7,7],[54,0,1,1]],[[[[34,"green","\ngreen.png\nsize: 824,233\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nblue_star\n  rotate: true\n  xy: 543, 18\n  size: 49, 47\n  orig: 54, 52\n  offset: 3, 3\n  index: -1\neffect_coin_1\n  rotate: false\n  xy: 592, 7\n  size: 76, 76\n  orig: 76, 76\n  offset: 0, 0\n  index: -1\neffect_coin_2\n  rotate: false\n  xy: 744, 33\n  size: 72, 76\n  orig: 72, 76\n  offset: 0, 0\n  index: -1\neffect_coin_3\n  rotate: true\n  xy: 229, 8\n  size: 53, 76\n  orig: 53, 76\n  offset: 0, 0\n  index: -1\neffect_coin_4\n  rotate: true\n  xy: 385, 29\n  size: 32, 77\n  orig: 32, 78\n  offset: 0, 1\n  index: -1\neffect_coin_5\n  rotate: true\n  xy: 464, 2\n  size: 31, 76\n  orig: 31, 76\n  offset: 0, 0\n  index: -1\neffect_coin_6\n  rotate: true\n  xy: 464, 35\n  size: 32, 77\n  orig: 32, 78\n  offset: 0, 1\n  index: -1\neffect_coin_7\n  rotate: true\n  xy: 307, 8\n  size: 53, 76\n  orig: 53, 78\n  offset: 0, 2\n  index: -1\neffect_coin_8\n  rotate: false\n  xy: 670, 6\n  size: 72, 77\n  orig: 72, 78\n  offset: 0, 1\n  index: -1\njbb122\n  rotate: false\n  xy: 562, 85\n  size: 146, 146\n  orig: 152, 152\n  offset: 3, 5\n  index: -1\njbb122a_00000\n  rotate: false\n  xy: 229, 63\n  size: 168, 168\n  orig: 350, 350\n  offset: 91, 94\n  index: -1\nwjx01\n  rotate: true\n  xy: 710, 111\n  size: 120, 112\n  orig: 120, 112\n  offset: 0, 0\n  index: -1\nww1_00000\n  rotate: false\n  xy: 2, 4\n  size: 225, 227\n  orig: 350, 350\n  offset: 64, 63\n  index: -1\nww2_00000\n  rotate: true\n  xy: 399, 69\n  size: 162, 161\n  orig: 350, 350\n  offset: 95, 98\n  index: -1\n",["green.png"],{"skeleton":{"hash":"66kWdBF1pZvCLrpO/aUahWlH79Y","spine":"3.8.75","x":-212.98,"y":-212.98,"width":708.03,"height":438.8,"images":"","audio":"E:/外包/sp081/sp081/动画源文件"},"bones":[{"name":"root"},{"name":"zt551","parent":"root"},{"name":"zt22","parent":"zt551","rotation":178.77},{"name":"bn1","parent":"zt22","x":-8.26,"y":-13.57,"scaleX":0.179,"scaleY":0.179},{"name":"bn2","parent":"zt22","x":7.72,"y":-18.38,"scaleX":0.498,"scaleY":0.498},{"name":"bn3","parent":"zt22","x":3.11,"y":-2.55,"scaleX":0.328,"scaleY":0.328},{"name":"bn4","parent":"zt22","rotation":-8.1,"x":-1.93,"y":-37.98,"scaleX":0.498,"scaleY":0.498},{"name":"bn5","parent":"zt22","rotation":-8.1,"x":-15.15,"y":-33.37,"scaleX":0.498,"scaleY":0.498},{"name":"bn6","parent":"zt22","rotation":-8.1,"x":6.29,"y":-46.96,"scaleX":0.498,"scaleY":0.498},{"name":"bn7","parent":"zt22","rotation":-8.1,"x":-26.92,"y":-53.29,"scaleX":0.498,"scaleY":0.498},{"name":"bn8","parent":"zt22","rotation":-8.1,"x":-16.54,"y":-78.25,"scaleX":0.498,"scaleY":0.498},{"name":"bn9","parent":"zt22","rotation":-8.1,"x":-44.68,"y":-72.94,"scaleX":0.498,"scaleY":0.498},{"name":"bn10","parent":"zt22","rotation":-8.1,"x":-31.02,"y":-96.53,"scaleX":0.498,"scaleY":0.498},{"name":"bn11","parent":"zt22","rotation":-8.1,"x":-70.78,"y":-81.54,"scaleX":0.498,"scaleY":0.498},{"name":"bn12","parent":"zt22","rotation":-8.1,"x":-62.92,"y":-112.37,"scaleX":0.498,"scaleY":0.498},{"name":"bn13","parent":"zt22","rotation":-8.1,"x":-91.16,"y":-105.01,"scaleX":0.498,"scaleY":0.498},{"name":"bn14","parent":"zt22","rotation":-8.1,"x":-84.44,"y":-127.09,"scaleX":0.498,"scaleY":0.498},{"name":"bn15","parent":"zt22","rotation":-8.1,"x":-110.04,"y":-109.12,"scaleX":0.498,"scaleY":0.498},{"name":"bn16","parent":"zt22","rotation":-8.1,"x":-125.36,"y":-136.48,"scaleX":0.498,"scaleY":0.498},{"name":"bn17","parent":"zt22","rotation":-8.1,"x":-152.21,"y":-118.31,"scaleX":0.498,"scaleY":0.498},{"name":"bn18","parent":"zt22","rotation":-8.1,"x":-161.04,"y":-148.06,"scaleX":0.498,"scaleY":0.498},{"name":"bn19","parent":"zt22","rotation":-8.1,"x":-191.57,"y":-127.78,"scaleX":0.498,"scaleY":0.498},{"name":"bn20","parent":"zt22","rotation":-8.1,"x":-200.14,"y":-149.07,"scaleX":0.498,"scaleY":0.498},{"name":"bn21","parent":"zt22","rotation":-8.1,"x":-222.94,"y":-134.81,"scaleX":0.498,"scaleY":0.498},{"name":"bn22","parent":"zt22","rotation":-8.1,"x":-243.79,"y":-126.91,"scaleX":0.498,"scaleY":0.498},{"name":"bn23","parent":"zt22","rotation":-8.1,"x":-247.79,"y":-164.35,"scaleX":0.498,"scaleY":0.498},{"name":"bn24","parent":"zt22","rotation":-8.1,"x":-277.47,"y":-133.26,"scaleX":0.498,"scaleY":0.498},{"name":"bn25","parent":"zt22","rotation":-8.1,"x":-283.44,"y":-151.61,"scaleX":0.498,"scaleY":0.498},{"name":"bn26","parent":"zt22","rotation":-8.1,"x":-310.42,"y":-134.83,"scaleX":0.498,"scaleY":0.498},{"name":"bn27","parent":"zt22","rotation":-8.1,"x":-330.25,"y":-150.47,"scaleX":0.498,"scaleY":0.498},{"name":"bn28","parent":"zt22","rotation":-8.1,"x":-368.45,"y":-140.16,"scaleX":0.498,"scaleY":0.498},{"name":"bn29","parent":"zt22","rotation":-8.1,"x":-380.63,"y":-155.45,"scaleX":0.498,"scaleY":0.498},{"name":"bn30","parent":"zt22","rotation":-8.1,"x":-407.29,"y":-151.44,"scaleX":0.498,"scaleY":0.498},{"name":"bn31","parent":"zt22","rotation":-8.1,"x":-405.73,"y":-169.83,"scaleX":0.498,"scaleY":0.498},{"name":"bn32","parent":"zt22","rotation":-8.1,"x":-432.88,"y":-165.56,"scaleX":0.498,"scaleY":0.498},{"name":"bn33","parent":"zt22","rotation":-8.1,"x":-427.51,"y":-181.14,"scaleX":0.498,"scaleY":0.498},{"name":"bn34","parent":"zt22","rotation":-8.1,"x":-453.56,"y":-167.42,"scaleX":0.498,"scaleY":0.498},{"name":"bn35","parent":"zt22","rotation":-8.1,"x":-441.35,"y":-188.95,"scaleX":0.498,"scaleY":0.498},{"name":"bn36","parent":"zt22","rotation":-8.1,"x":-467.34,"y":-180.83,"scaleX":0.498,"scaleY":0.498},{"name":"bn37","parent":"zt22","rotation":-8.1,"x":-453.33,"y":-204.55,"scaleX":0.498,"scaleY":0.498},{"name":"bn38","parent":"zt22","rotation":-8.1,"x":-475.35,"y":-206.87,"scaleX":0.498,"scaleY":0.498},{"name":"bn39","parent":"zt22","rotation":-8.1,"x":-458.1,"y":-220.76,"scaleX":0.498,"scaleY":0.498},{"name":"zt1","parent":"zt551"},{"name":"bone5","parent":"zt1"},{"name":"bone7","parent":"zt1"},{"name":"bone8","parent":"zt1","scaleX":1.217,"scaleY":1.217},{"name":"bone9","parent":"zt1","scaleX":1.068,"scaleY":1.068},{"name":"bone11","parent":"zt551"},{"name":"bone12","parent":"zt551","scaleX":0.87,"scaleY":0.87},{"name":"bone13","parent":"zt551","scaleX":0.74,"scaleY":0.74},{"name":"d1","parent":"zt1","x":-91.79,"y":-29.48},{"name":"d2","parent":"zt1","rotation":-9.12,"x":-48.7,"y":-74.97,"scaleX":0.715,"scaleY":0.715},{"name":"d5","parent":"zt1","rotation":-62.41,"x":79.78,"y":-63.8,"scaleX":0.627,"scaleY":0.627},{"name":"d7","parent":"zt1","rotation":-87.07,"x":71,"y":56.7,"scaleX":0.709,"scaleY":0.709},{"name":"d8","parent":"zt1","rotation":-109.48,"x":22.32,"y":-85.34,"scaleX":0.799,"scaleY":0.799},{"name":"d9","parent":"zt1","rotation":-133.13,"x":-83.81,"y":40.74,"scaleX":0.6,"scaleY":0.6},{"name":"d10","parent":"zt1","rotation":-162.96,"x":101.33,"y":53.51,"scaleX":0.747,"scaleY":0.747},{"name":"d11","parent":"zt1","rotation":178.04,"x":98.93,"y":-15.12,"scaleX":0.788,"scaleY":0.788},{"name":"d13","parent":"zt1","rotation":155.57,"x":-86.2,"y":-54.22,"scaleX":0.424,"scaleY":0.424},{"name":"d14","parent":"zt1","rotation":133.95,"x":6.36,"y":95.01,"scaleX":0.752,"scaleY":0.752},{"name":"d16","parent":"zt1","rotation":133.95,"x":111.7,"y":-38.26,"scaleX":0.507,"scaleY":0.507},{"name":"d19","parent":"zt1","rotation":73.23,"x":-113.34,"y":32.76,"scaleX":0.779,"scaleY":0.779},{"name":"d20","parent":"zt1","rotation":91.09,"x":43.07,"y":-114.07,"scaleX":0.732,"scaleY":0.732},{"name":"tq2","parent":"zt1","x":-46.3,"y":27.97,"scaleX":0.628,"scaleY":0.628},{"name":"tq3","parent":"zt1","x":62.22,"y":63.88,"scaleX":0.613,"scaleY":0.613},{"name":"tq5","parent":"zt1","x":-13.59,"y":94.21,"scaleX":0.489,"scaleY":0.489},{"name":"tq8","parent":"zt1","x":19.13,"y":64.68,"scaleX":0.58,"scaleY":0.58},{"name":"tq9","parent":"zt1","x":52.65,"y":-14.32,"scaleX":0.635,"scaleY":0.635},{"name":"tq10","parent":"zt1","x":-73.44,"y":-77.36,"scaleX":0.421,"scaleY":0.421},{"name":"tq12","parent":"zt1","rotation":-107.17,"x":-69.45,"y":78.25,"scaleX":0.402,"scaleY":0.402},{"name":"tq13","parent":"zt1","rotation":-84.83,"x":-98.17,"y":18.4,"scaleX":0.569,"scaleY":0.569},{"name":"tq17","parent":"zt1","x":-6.4,"y":-3.15,"scaleX":0.674,"scaleY":0.674},{"name":"tq18","parent":"zt1","rotation":16.07,"x":31.1,"y":16,"scaleX":0.635,"scaleY":0.635},{"name":"tq19","parent":"zt1","rotation":-17.82,"x":-3.21,"y":-51.03,"scaleX":0.735,"scaleY":0.735},{"name":"tq21","parent":"zt1","x":-36.73,"y":-28.68,"scaleX":0.946,"scaleY":0.946},{"name":"tq22","parent":"zt1","rotation":22.93,"x":-3.21,"y":31.17,"scaleX":0.854,"scaleY":0.854},{"name":"tq23","parent":"zt1","rotation":-42.06,"x":36.69,"y":-90.13,"scaleX":0.469,"scaleY":0.469},{"name":"tq25","parent":"zt1","rotation":-171.82,"x":-101.37,"y":61.49,"scaleX":0.463,"scaleY":0.463},{"name":"tq27","parent":"zt1","x":119.68,"y":-27.09,"scaleX":0.948,"scaleY":0.948},{"name":"tq28","parent":"zt1","rotation":16.07,"x":102.92,"y":89.42,"scaleX":1.011,"scaleY":1.011},{"name":"tq29","parent":"zt1","rotation":-42.06,"x":81.38,"y":-93.32,"scaleX":1.012,"scaleY":1.012},{"name":"tq31","parent":"zt1","x":-8,"y":142.89,"scaleX":0.954,"scaleY":0.954},{"name":"tq36","parent":"zt1","x":71,"y":146.08,"scaleX":1.139,"scaleY":1.139},{"name":"tq38","parent":"zt1","x":-150.04,"y":43.14,"scaleX":0.37,"scaleY":0.37},{"name":"x1","parent":"zt1","rotation":12.25,"x":-122.91,"y":-49.43,"scaleX":0.251,"scaleY":0.251},{"name":"x5","parent":"zt1","rotation":40.15,"x":-90.99,"y":53.51,"scaleX":0.206,"scaleY":0.206},{"name":"x6","parent":"zt1","rotation":14.26,"x":106.91,"y":-89.33,"scaleX":0.417,"scaleY":0.417}],"slots":[{"name":"wjx01","bone":"x1","color":"ffffff98","attachment":"wjx01"},{"name":"wjx4","bone":"x5","color":"ffffff98","attachment":"wjx01"},{"name":"wjx5","bone":"x6","color":"ffffff98","attachment":"wjx01"},{"name":"effect_coin_37","bone":"tq36","attachment":"effect_coin_1"},{"name":"effect_coin_29","bone":"tq28","attachment":"effect_coin_7"},{"name":"effect_coin_30","bone":"tq29","attachment":"effect_coin_7"},{"name":"effect_coin_19","bone":"tq18","attachment":"effect_coin_7"},{"name":"jbb123","bone":"bone7","attachment":"jbb122"},{"name":"ww2_00000","bone":"bone8","attachment":"ww2_00000","blend":"additive"},{"name":"ww2_0","bone":"bone9","attachment":"ww2_00000","blend":"additive"},{"name":"effect_coin_39","bone":"tq38","attachment":"effect_coin_1"},{"name":"effect_coin_32","bone":"tq31","attachment":"effect_coin_1"},{"name":"effect_coin_3","bone":"tq2","attachment":"effect_coin_2"},{"name":"effect_coin_22","bone":"tq21","attachment":"effect_coin_2"},{"name":"effect_coin_14","bone":"tq13","attachment":"effect_coin_2"},{"name":"effect_coin_4","bone":"tq3","attachment":"effect_coin_4"},{"name":"effect_coin_28","bone":"tq27","attachment":"effect_coin_8"},{"name":"effect_coin_13","bone":"tq12","attachment":"effect_coin_8"},{"name":"effect_coin_26","bone":"tq25","attachment":"effect_coin_8"},{"name":"effect_coin_6","bone":"tq5","attachment":"effect_coin_5"},{"name":"effect_coin_11","bone":"tq10","attachment":"effect_coin_6"},{"name":"effect_coin_23","bone":"tq22","attachment":"effect_coin_7"},{"name":"effect_coin_24","bone":"tq23","attachment":"effect_coin_7"},{"name":"effect_coin_9","bone":"tq8","attachment":"effect_coin_3"},{"name":"effect_coin_10","bone":"tq9","attachment":"effect_coin_5"},{"name":"effect_coin_18","bone":"tq17","attachment":"effect_coin_6"},{"name":"effect_coin_20","bone":"tq19","attachment":"effect_coin_7"},{"name":"jbb122","bone":"bone5","attachment":"jbb122"},{"name":"bone5","bone":"bone5","attachment":"jbb122a_00000","blend":"additive"},{"name":"bone6","bone":"bone5","attachment":"ww1_00000","blend":"additive"},{"name":"blue_star","bone":"d1","attachment":"blue_star","blend":"additive"},{"name":"blue_star2","bone":"d2","attachment":"blue_star","blend":"additive"},{"name":"blue_star5","bone":"d5","attachment":"blue_star","blend":"additive"},{"name":"blue_star7","bone":"d7","attachment":"blue_star","blend":"additive"},{"name":"blue_star8","bone":"d8","attachment":"blue_star","blend":"additive"},{"name":"blue_star9","bone":"d9","attachment":"blue_star","blend":"additive"},{"name":"blue_star10","bone":"d10","attachment":"blue_star","blend":"additive"},{"name":"blue_star11","bone":"d11","attachment":"blue_star","blend":"additive"},{"name":"blue_star13","bone":"d13","attachment":"blue_star","blend":"additive"},{"name":"blue_star14","bone":"d14","attachment":"blue_star","blend":"additive"},{"name":"blue_star16","bone":"d16","attachment":"blue_star","blend":"additive"},{"name":"blue_star19","bone":"d19","attachment":"blue_star","blend":"additive"},{"name":"blue_star20","bone":"d20","attachment":"blue_star","blend":"additive"},{"name":"effect_coin_1","bone":"bone11"},{"name":"effect_coin_48","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_56","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_41","bone":"bone11"},{"name":"effect_coin_49","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_57","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_42","bone":"bone11"},{"name":"effect_coin_50","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_58","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_43","bone":"bone11"},{"name":"effect_coin_51","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_59","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_44","bone":"bone11"},{"name":"effect_coin_52","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_60","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_45","bone":"bone11"},{"name":"effect_coin_53","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_61","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_46","bone":"bone11"},{"name":"effect_coin_54","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_62","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_47","bone":"bone11"},{"name":"effect_coin_55","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_63","bone":"bone13","color":"ffffff76"},{"name":"blue_star18","bone":"bn1","attachment":"blue_star","blend":"additive"},{"name":"blue_star21","bone":"bn2","attachment":"blue_star","blend":"additive"},{"name":"blue_star22","bone":"bn3","attachment":"blue_star","blend":"additive"},{"name":"blue_star23","bone":"bn4","attachment":"blue_star","blend":"additive"},{"name":"blue_star24","bone":"bn5","attachment":"blue_star","blend":"additive"},{"name":"blue_star25","bone":"bn6","attachment":"blue_star","blend":"additive"},{"name":"blue_star26","bone":"bn7","attachment":"blue_star","blend":"additive"},{"name":"blue_star27","bone":"bn8","attachment":"blue_star","blend":"additive"},{"name":"blue_star28","bone":"bn9","attachment":"blue_star","blend":"additive"},{"name":"blue_star29","bone":"bn10","attachment":"blue_star","blend":"additive"},{"name":"blue_star30","bone":"bn11","attachment":"blue_star","blend":"additive"},{"name":"blue_star31","bone":"bn12","attachment":"blue_star","blend":"additive"},{"name":"blue_star32","bone":"bn13","attachment":"blue_star","blend":"additive"},{"name":"blue_star33","bone":"bn14","attachment":"blue_star","blend":"additive"},{"name":"blue_star34","bone":"bn15","attachment":"blue_star","blend":"additive"},{"name":"blue_star35","bone":"bn16","attachment":"blue_star","blend":"additive"},{"name":"blue_star36","bone":"bn17","attachment":"blue_star","blend":"additive"},{"name":"blue_star37","bone":"bn18","attachment":"blue_star","blend":"additive"},{"name":"blue_star38","bone":"bn19","attachment":"blue_star","blend":"additive"},{"name":"blue_star39","bone":"bn20","attachment":"blue_star","blend":"additive"},{"name":"blue_star40","bone":"bn21","attachment":"blue_star","blend":"additive"},{"name":"blue_star41","bone":"bn22","attachment":"blue_star","blend":"additive"},{"name":"blue_star42","bone":"bn23","attachment":"blue_star","blend":"additive"},{"name":"blue_star43","bone":"bn24","attachment":"blue_star","blend":"additive"},{"name":"blue_star44","bone":"bn25","attachment":"blue_star","blend":"additive"},{"name":"blue_star45","bone":"bn26","attachment":"blue_star","blend":"additive"},{"name":"blue_star46","bone":"bn27","attachment":"blue_star","blend":"additive"},{"name":"blue_star47","bone":"bn28","attachment":"blue_star","blend":"additive"},{"name":"blue_star48","bone":"bn29","attachment":"blue_star","blend":"additive"},{"name":"blue_star49","bone":"bn30","attachment":"blue_star","blend":"additive"},{"name":"blue_star50","bone":"bn31","attachment":"blue_star","blend":"additive"},{"name":"blue_star51","bone":"bn32","attachment":"blue_star","blend":"additive"},{"name":"blue_star52","bone":"bn33","attachment":"blue_star","blend":"additive"},{"name":"blue_star53","bone":"bn34","attachment":"blue_star","blend":"additive"},{"name":"blue_star54","bone":"bn35","attachment":"blue_star","blend":"additive"},{"name":"blue_star55","bone":"bn36","attachment":"blue_star","blend":"additive"},{"name":"blue_star56","bone":"bn37","attachment":"blue_star","blend":"additive"},{"name":"blue_star57","bone":"bn38","attachment":"blue_star","blend":"additive"},{"name":"blue_star58","bone":"bn39","attachment":"blue_star","blend":"additive"}],"skins":[{"name":"default","attachments":{"blue_star7":{"blue_star":{"width":54,"height":52}},"blue_star8":{"blue_star":{"width":54,"height":52}},"effect_coin_24":{"effect_coin_7":{"width":53,"height":78}},"ww2_00000":{"ww2_00000":{"width":350,"height":350}},"effect_coin_26":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_28":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_29":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_37":{"effect_coin_1":{"width":76,"height":76}},"blue_star":{"blue_star":{"width":54,"height":52}},"effect_coin_30":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_32":{"effect_coin_1":{"width":76,"height":76}},"blue_star14":{"blue_star":{"width":54,"height":52}},"blue_star10":{"blue_star":{"width":54,"height":52}},"effect_coin_39":{"effect_coin_1":{"width":76,"height":76}},"bone6":{"ww1_00000":{"width":350,"height":350}},"effect_coin_41":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_42":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_43":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_44":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_45":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_46":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_47":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_48":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_49":{"effect_coin_2":{"width":72,"height":76}},"blue_star16":{"blue_star":{"width":54,"height":52}},"effect_coin_50":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_51":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_52":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_53":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_54":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_55":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_56":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_57":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_58":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_59":{"effect_coin_4":{"width":32,"height":78}},"blue_star5":{"blue_star":{"width":54,"height":52}},"effect_coin_23":{"effect_coin_7":{"width":53,"height":78}},"blue_star13":{"blue_star":{"width":54,"height":52}},"effect_coin_1":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_3":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_4":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_6":{"effect_coin_5":{"width":31,"height":76}},"blue_star11":{"blue_star":{"width":54,"height":52}},"effect_coin_9":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_60":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_61":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_62":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_63":{"effect_coin_8":{"width":72,"height":78}},"blue_star18":{"blue_star":{"width":54,"height":52}},"blue_star19":{"blue_star":{"width":54,"height":52}},"ww2_0":{"ww2_00000":{"width":350,"height":350}},"effect_coin_22":{"effect_coin_2":{"width":72,"height":76}},"blue_star20":{"blue_star":{"width":54,"height":52}},"blue_star21":{"blue_star":{"width":54,"height":52}},"blue_star22":{"blue_star":{"width":54,"height":52}},"blue_star23":{"blue_star":{"width":54,"height":52}},"blue_star24":{"blue_star":{"width":54,"height":52}},"blue_star25":{"blue_star":{"width":54,"height":52}},"blue_star26":{"blue_star":{"width":54,"height":52}},"blue_star27":{"blue_star":{"width":54,"height":52}},"blue_star28":{"blue_star":{"width":54,"height":52}},"blue_star29":{"blue_star":{"width":54,"height":52}},"blue_star9":{"blue_star":{"width":54,"height":52}},"blue_star30":{"blue_star":{"width":54,"height":52}},"blue_star31":{"blue_star":{"width":54,"height":52}},"blue_star32":{"blue_star":{"width":54,"height":52}},"blue_star33":{"blue_star":{"width":54,"height":52}},"blue_star34":{"blue_star":{"width":54,"height":52}},"blue_star35":{"blue_star":{"width":54,"height":52}},"blue_star36":{"blue_star":{"width":54,"height":52}},"blue_star37":{"blue_star":{"width":54,"height":52}},"blue_star38":{"blue_star":{"width":54,"height":52}},"blue_star39":{"blue_star":{"width":54,"height":52}},"wjx01":{"wjx01":{"width":120,"height":112}},"jbb122":{"jbb122":{"width":152,"height":152}},"jbb123":{"jbb122":{"width":152,"height":152}},"wjx4":{"wjx01":{"width":120,"height":112}},"wjx5":{"wjx01":{"width":120,"height":112}},"blue_star40":{"blue_star":{"width":54,"height":52}},"blue_star41":{"blue_star":{"width":54,"height":52}},"blue_star42":{"blue_star":{"width":54,"height":52}},"blue_star43":{"blue_star":{"width":54,"height":52}},"blue_star44":{"blue_star":{"width":54,"height":52}},"blue_star45":{"blue_star":{"width":54,"height":52}},"blue_star46":{"blue_star":{"width":54,"height":52}},"blue_star47":{"blue_star":{"width":54,"height":52}},"blue_star48":{"blue_star":{"width":54,"height":52}},"blue_star49":{"blue_star":{"width":54,"height":52}},"effect_coin_10":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_11":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_13":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_14":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_18":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_19":{"effect_coin_7":{"width":53,"height":78}},"bone5":{"jbb122a_00000":{"width":350,"height":350}},"blue_star50":{"blue_star":{"width":54,"height":52}},"blue_star51":{"blue_star":{"width":54,"height":52}},"blue_star52":{"blue_star":{"width":54,"height":52}},"blue_star53":{"blue_star":{"width":54,"height":52}},"blue_star54":{"blue_star":{"width":54,"height":52}},"blue_star55":{"blue_star":{"width":54,"height":52}},"blue_star56":{"blue_star":{"width":54,"height":52}},"blue_star57":{"blue_star":{"width":54,"height":52}},"blue_star58":{"blue_star":{"width":54,"height":52}},"blue_star2":{"blue_star":{"width":54,"height":52}},"effect_coin_20":{"effect_coin_7":{"width":53,"height":78}}}}],"animations":{"baozha":{"slots":{"effect_coin_9":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4667,"color":"ffffffff","curve":"stepped"},{"time":0.6,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}]},"blue_star53":{"color":[{"color":"ffffff00"}]},"effect_coin_10":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2667,"color":"ffffff00"},{"time":0.3,"color":"ffffffff"},{"time":0.8333,"color":"ffffff00"}]},"blue_star2":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1.4667,"color":"ffffff00"}]},"blue_star29":{"color":[{"color":"ffffff00"}]},"bone5":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"blue_star31":{"color":[{"color":"ffffff00"}]},"blue_star50":{"color":[{"color":"ffffff00"}]},"effect_coin_58":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_59":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star47":{"color":[{"color":"ffffff00"}]},"blue_star44":{"color":[{"color":"ffffff00"}]},"effect_coin_4":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.7667,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"blue_star46":{"color":[{"color":"ffffff00"}]},"effect_coin_30":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"effect_coin_28":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.5333,"color":"ffffff00"}]},"effect_coin_14":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.7667,"color":"ffffffbd"},{"time":1.2,"color":"ffffff00"}]},"blue_star57":{"color":[{"color":"ffffff00"}]},"effect_coin_47":{"attachment":[{"name":null}]},"blue_star55":{"color":[{"color":"ffffff00"}]},"blue_star21":{"color":[{"color":"ffffff00"}]},"blue_star11":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.6333,"color":"ffffffff"},{"time":1.4667,"color":"ffffff00"}]},"blue_star26":{"color":[{"color":"ffffff00"}]},"effect_coin_20":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6667,"color":"ffffff00"},{"time":0.8,"color":"ffffffc9","curve":"stepped"},{"time":1.0333,"color":"ffffffc9"},{"time":1.5333,"color":"ffffff00"}]},"bone6":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.9,"color":"ffffff17"},{"time":1.1333,"color":"ffffff00"}]},"blue_star27":{"color":[{"color":"ffffff00"}]},"wjx4":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.6333,"color":"ffffff98"},{"time":1.5667,"color":"ffffff00"}]},"blue_star13":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.7333,"color":"ffffffff"},{"time":1.6667,"color":"ffffff00"}]},"effect_coin_37":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.3667,"color":"ffffffff"},{"time":0.8667,"color":"ffffff00"}]},"effect_coin_43":{"attachment":[{"name":null}]},"blue_star16":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}]},"effect_coin_46":{"attachment":[{"name":null}]},"blue_star30":{"color":[{"color":"ffffff00"}]},"blue_star36":{"color":[{"color":"ffffff00"}]},"jbb122":{"attachment":[{"name":"jbb122"},{"time":0.9,"name":"jbb122"},{"time":0.9333,"name":null}]},"blue_star34":{"color":[{"color":"ffffff00"}]},"effect_coin_61":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_6":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"effect_coin_45":{"attachment":[{"name":null}]},"effect_coin_29":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"blue_star14":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.8,"color":"ffffffff"},{"time":1.4,"color":"ffffff00"}]},"blue_star32":{"color":[{"color":"ffffff00"}]},"blue_star7":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6333,"color":"ffffffff"},{"time":1.2667,"color":"ffffff00"}]},"effect_coin_22":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff","curve":"stepped"},{"time":0.7667,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}]},"blue_star56":{"color":[{"color":"ffffff00"}]},"effect_coin_44":{"attachment":[{"name":null}]},"blue_star9":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.5667,"color":"ffffff00"}]},"wjx01":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3667,"color":"ffffff00"},{"time":0.4667,"color":"ffffff98","curve":"stepped"},{"time":0.6,"color":"ffffff98"},{"time":1.4,"color":"ffffff00"}]},"ww2_0":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.7333,"color":"ffffff00"},{"time":0.8333,"color":"ffffffff","curve":"stepped"},{"time":1,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"blue_star22":{"color":[{"color":"ffffff00"}]},"effect_coin_13":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"jbb123":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2667,"color":"ffffff00"},{"time":0.4,"color":"ffffffa4"},{"time":0.7667,"color":"ffffff00"}]},"blue_star":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.3,"color":"ffffff00"}]},"effect_coin_62":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"wjx5":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.4333,"color":"ffffff98"},{"time":1.1667,"color":"ffffff00"}]},"effect_coin_42":{"attachment":[{"name":null}]},"effect_coin_60":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star52":{"color":[{"color":"ffffff00"}]},"blue_star41":{"color":[{"color":"ffffff00"}]},"effect_coin_57":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_3":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.1333,"color":"ffffff00"}]},"blue_star23":{"color":[{"color":"ffffff00"}]},"blue_star58":{"color":[{"color":"ffffff00"}]},"blue_star54":{"color":[{"color":"ffffff00"}]},"blue_star49":{"color":[{"color":"ffffff00"}]},"blue_star5":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3333,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.9667,"color":"ffffff00"}]},"blue_star18":{"color":[{"color":"ffffff00"}]},"blue_star43":{"color":[{"color":"ffffff00"}]},"blue_star37":{"color":[{"color":"ffffff00"}]},"blue_star8":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6333,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.4,"color":"ffffff00"}]},"ww2_00000":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4333,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff","curve":"stepped"},{"time":0.7,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"blue_star10":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.5,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"blue_star45":{"color":[{"color":"ffffff00"}]},"blue_star28":{"color":[{"color":"ffffff00"}]},"effect_coin_63":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_41":{"attachment":[{"name":null}]},"blue_star35":{"color":[{"color":"ffffff00"}]},"effect_coin_24":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4667,"color":"ffffffff"},{"time":1.0333,"color":"ffffff00"}]},"effect_coin_56":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star38":{"color":[{"color":"ffffff00"}]},"blue_star24":{"color":[{"color":"ffffff00"}]},"blue_star42":{"color":[{"color":"ffffff00"}]},"effect_coin_23":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.7,"color":"ffffffff","curve":"stepped"},{"time":0.9,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"blue_star25":{"color":[{"color":"ffffff00"}]},"effect_coin_39":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.7667,"color":"ffffff00"},{"time":0.8333,"color":"ffffffff","curve":"stepped"},{"time":1,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"effect_coin_1":{"attachment":[{"name":null}]},"effect_coin_19":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.3667,"color":"ffffffff","curve":"stepped"},{"time":0.4667,"color":"ffffffff"},{"time":0.7,"color":"ffffff00"}]},"effect_coin_26":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":0.9333,"color":"ffffff00"}]},"blue_star51":{"color":[{"color":"ffffff00"}]},"blue_star19":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.7,"color":"ffffffff"},{"time":1.5,"color":"ffffff00"}]},"effect_coin_11":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3333,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"blue_star39":{"color":[{"color":"ffffff00"}]},"blue_star48":{"color":[{"color":"ffffff00"}]},"effect_coin_18":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5333,"color":"ffffff00"},{"time":0.8667,"color":"ffffff96"},{"time":1.6667,"color":"ffffff00"}]},"effect_coin_32":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4667,"color":"ffffff97"},{"time":0.8667,"color":"ffffff00"}]},"blue_star20":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4333,"color":"ffffff00"},{"time":0.5,"color":"ffffffff"},{"time":1.2667,"color":"ffffff00"}]},"blue_star33":{"color":[{"color":"ffffff00"}]},"blue_star40":{"color":[{"color":"ffffff00"}]}},"bones":{"d1":{"rotate":[{"time":0.2},{"time":1.3,"angle":155}],"translate":[{"time":0.2,"x":83.79,"y":19.15},{"time":1.3,"x":-88.58,"y":-54.26}]},"d2":{"rotate":[{"time":0.4667},{"time":1.5,"angle":131.12}],"translate":[{"time":0.4667},{"time":1.5,"x":-67.03,"y":-127.68}],"scale":[{"time":0.4667}]},"d5":{"rotate":[{"time":0.3333},{"time":0.9667,"angle":184.41}],"translate":[{"time":0.3333},{"time":0.9667,"x":64.64,"y":-68.63}],"scale":[{"time":0.3333}]},"d7":{"rotate":[{"time":0.4667},{"time":1.2667,"angle":309.07}],"translate":[{"time":0.4667},{"time":1.2667,"x":114.11,"y":63.84}]},"d8":{"rotate":[{"time":0.6667},{"time":1.4,"angle":453.48}],"translate":[{"time":0.6667},{"time":1.4,"x":-6.38,"y":-125.29}]},"d9":{"rotate":[{"time":0.6},{"time":1.5667,"angle":488.13}],"translate":[{"time":0.6},{"time":1.5667,"x":-115.71,"y":67.03}],"scale":[{"time":0.6}]},"d10":{"translate":[{"time":0.4},{"time":1.2,"x":178.75,"y":86.98}]},"d11":{"translate":[{"time":0.6},{"time":1.4667,"x":143.64,"y":-35.91}]},"d13":{"rotate":[{"time":0.6}],"translate":[{"time":0.6},{"time":1.6667,"x":-138.05,"y":-95.76}]},"d14":{"rotate":[{"time":0.6}],"translate":[{"time":0.6},{"time":1.4,"x":23.94,"y":126.08}],"scale":[{"time":0.6}]},"d16":{"translate":[{"time":0.3,"x":-30.32,"y":12.77},{"time":1.4333,"x":95.76,"y":-43.89}],"scale":[{"time":0.3}]},"d19":{"rotate":[{"time":0.4667},{"time":1.5,"angle":214.77}],"translate":[{"time":0.4667},{"time":1.5,"x":-181.94,"y":79}]},"d20":{"translate":[{"time":0.4333,"x":-3.99,"y":16.76},{"time":1.4,"x":22.34,"y":-109.33}]},"bone5":{"scale":[{"x":0,"y":0,"curve":"stepped"},{"time":0.1667,"x":0,"y":0},{"time":0.4333,"x":1.976,"y":1.976},{"time":0.9,"x":0.468,"y":0.468}]},"tq2":{"translate":[{"time":0.5667,"x":16.76,"y":-10.37},{"time":1.1333,"x":-169.97,"y":115.71}]},"tq3":{"rotate":[{"time":0.5667},{"time":1.3667,"angle":22}],"translate":[{"time":0.5667},{"time":1.3667,"x":193.12,"y":141.25}],"scale":[{"time":0.5667},{"time":1.3667,"x":0.864,"y":0.864}]},"tq5":{"rotate":[{"time":0.5},{"time":1,"angle":15}],"translate":[{"time":0.5,"x":8.78,"y":-71.82},{"time":1,"x":9.58,"y":109.33}],"scale":[{"time":0.5,"curve":"stepped"},{"time":1}]},"tq8":{"rotate":[{"time":0.3},{"time":1.1667,"angle":88}],"translate":[{"time":0.3},{"time":1.1667,"x":137.26,"y":197.9}],"scale":[{"time":0.3,"curve":"stepped"},{"time":1.1667}]},"tq9":{"rotate":[{"time":0.2667},{"time":0.8333,"angle":44}],"translate":[{"time":0.2667},{"time":0.8333,"x":244.19,"y":-23.94}],"scale":[{"time":0.2667},{"time":0.8333,"x":0.881,"y":0.881}]},"tq10":{"rotate":[{"time":0.3333},{"time":1,"angle":44}],"translate":[{"time":0.3333},{"time":1,"x":-58.25,"y":-190.72}],"scale":[{"time":0.3333},{"time":1,"x":0.836,"y":0.836}]},"tq12":{"rotate":[{"time":0.4},{"time":1,"angle":407.17}],"translate":[{"time":0.4},{"time":1,"x":-112.52,"y":137.26}],"scale":[{"time":0.4},{"time":1,"x":0.687,"y":0.687}]},"tq13":{"rotate":[{"time":0.5667},{"time":1.2,"angle":394.83}],"translate":[{"time":0.5667},{"time":1.2,"x":-352.72,"y":-90.97}],"scale":[{"time":0.5667},{"time":1.2,"x":0.916,"y":0.916}]},"tq17":{"rotate":[{"time":0.5333},{"time":1.6667,"angle":44}],"translate":[{"time":0.5333},{"time":1.6667,"x":-165.19,"y":-210.67}],"scale":[{"time":0.5333,"curve":"stepped"},{"time":1.6667}]},"tq18":{"rotate":[{"time":0.3},{"time":0.7,"angle":8.93}],"translate":[{"time":0.3},{"time":0.7,"x":209.87,"y":48.68}],"scale":[{"time":0.3},{"time":0.7,"x":1.332,"y":1.332}]},"tq19":{"rotate":[{"time":0.6667},{"time":1.5333,"angle":39.82}],"translate":[{"time":0.6667},{"time":1.5333,"x":43.89,"y":-266.53}],"scale":[{"time":0.6667},{"time":1.5333,"x":0.857,"y":0.857}]},"tq21":{"rotate":[{"time":0.3667},{"time":1.4333,"angle":33}],"translate":[{"time":0.3667},{"time":1.4333,"x":-173.96,"y":-168.38}],"scale":[{"time":0.3667},{"time":1.4333,"x":0.871,"y":0.871}]},"tq22":{"rotate":[{"time":0.5667},{"time":1.3667,"angle":43.07}],"translate":[{"time":0.5667},{"time":1.3667,"x":197.9,"y":244.19}],"scale":[{"time":0.5667},{"time":1.3667,"x":0.891,"y":0.891}]},"tq23":{"rotate":[{"time":0.3}],"translate":[{"time":0.3,"x":-29.53,"y":52.67},{"time":1.0333,"y":-130.87}],"scale":[{"time":0.3}]},"tq25":{"rotate":[{"time":0.4667},{"time":0.9333,"angle":371.82}],"translate":[{"time":0.4667,"x":63.04,"y":-35.11},{"time":0.9333,"x":-144.44,"y":69.43}],"scale":[{"time":0.4667},{"time":0.9333,"x":1.246,"y":1.246}]},"tq27":{"rotate":[{"time":0.4667},{"time":1.5333,"angle":44}],"translate":[{"time":0.4667},{"time":1.5333,"x":246.58,"y":-94.96}],"scale":[{"time":0.4667},{"time":1.5333,"x":0.815,"y":0.815}]},"tq28":{"rotate":[{"time":0.4667},{"time":1.2,"angle":21.93}],"translate":[{"time":0.4667,"x":-83.79,"y":-82.19},{"time":1.2,"x":216.26,"y":50.27}],"scale":[{"time":0.4667},{"time":1.2,"x":0.904,"y":0.904}]},"tq29":{"rotate":[{"time":0.3667},{"time":1.2,"angle":86.06}],"translate":[{"time":0.3667,"x":-37.51,"y":62.24},{"time":1.2,"x":48.68,"y":-98.15}],"scale":[{"time":0.3667,"curve":"stepped"},{"time":1.2}]},"tq31":{"rotate":[{"time":0.3},{"time":0.8667,"angle":33}],"translate":[{"time":0.3,"x":3.19,"y":-86.18},{"time":0.8667,"x":-59.05,"y":142.84}],"scale":[{"time":0.3},{"time":0.8667,"x":0.872,"y":0.872}]},"tq36":{"rotate":[{"time":0.2},{"time":0.8667,"angle":22}],"translate":[{"time":0.2,"x":-59.05,"y":-132.47},{"time":0.8667,"x":90.17,"y":51.07}],"scale":[{"time":0.2},{"time":0.8667,"x":0.693,"y":0.693}]},"tq38":{"translate":[{"time":0.7667,"x":114.11,"y":-25.54},{"time":1.3667,"x":-126.88,"y":82.19}]},"bone7":{"scale":[{"time":0.2333,"x":0.575,"y":0.575,"curve":0.084,"c2":0.33,"c3":0.51,"c4":0.91},{"time":0.7667,"x":2.533,"y":2.533}]},"x1":{"rotate":[{"time":0.3667},{"time":1.4,"angle":109.75}],"translate":[{"time":0.3667,"x":39.9,"y":12.77},{"time":1.4,"x":-156.41,"y":-112.52}],"scale":[{"time":0.3667}]},"x5":{"rotate":[{"time":0.6},{"time":1.5667,"angle":114.85}],"translate":[{"time":0.6},{"time":1.5667,"x":-98.15,"y":92.57}],"scale":[{"time":0.6}]},"x6":{"rotate":[{"time":0.4},{"time":1.1667,"angle":173.74}],"translate":[{"time":0.4},{"time":1.1667,"x":82.19,"y":-91.77}],"scale":[{"time":0.4}]},"bone8":{"scale":[{},{"time":0.4333,"x":0.701,"y":0.701},{"time":0.9,"x":1.97,"y":1.97}]},"bone9":{"scale":[{},{"time":0.7333,"x":0.701,"y":0.701},{"time":1.2,"x":1.97,"y":1.97}]}}},"feichu":{"slots":{"effect_coin_9":{"attachment":[{"name":null}]},"effect_coin_45":{"attachment":[{"name":null},{"time":0.1,"name":"effect_coin_6"},{"time":0.1333,"name":null},{"time":0.1667,"name":null},{"time":0.2,"name":null},{"time":0.3333,"name":"effect_coin_6"},{"time":0.3667,"name":null},{"time":0.4,"name":null},{"time":0.4333,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":"effect_coin_6"},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.8,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":"effect_coin_6"},{"time":0.9,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":"effect_coin_6"},{"time":1.1667,"name":null}]},"blue_star7":{"attachment":[{"name":null}]},"effect_coin_56":{"attachment":[{"name":null},{"time":0.2,"name":"effect_coin_1"},{"time":0.2333,"name":null},{"time":0.4667,"name":"effect_coin_1"},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.7333,"name":"effect_coin_1"},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":1,"name":"effect_coin_1"},{"time":1.0333,"name":null},{"time":1.1333,"name":null},{"time":1.2,"name":null},{"time":1.2333,"name":null},{"time":1.2667,"name":"effect_coin_1"},{"time":1.3,"name":null},{"time":1.4667,"name":null},{"time":1.6333,"name":null}]},"blue_star48":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8,"color":"ffffff00"},{"time":0.8667,"color":"ffffffff"},{"time":1.1333,"color":"ffffff00"}]},"blue_star47":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.7333,"color":"ffffff00"},{"time":0.8,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"blue_star44":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6333,"color":"ffffff00"},{"time":0.7,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"effect_coin_11":{"attachment":[{"name":null}]},"effect_coin_19":{"attachment":[{"name":null}]},"effect_coin_28":{"attachment":[{"name":null}]},"effect_coin_55":{"attachment":[{"time":0.1333,"name":"effect_coin_8"},{"time":0.1667,"name":null},{"time":0.3333,"name":null},{"time":0.3667,"name":null},{"time":0.4,"name":"effect_coin_8"},{"time":0.4333,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.6667,"name":"effect_coin_8"},{"time":0.7,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":"effect_coin_8"},{"time":0.9667,"name":null},{"time":1.1333,"name":null},{"time":1.1667,"name":null},{"time":1.2,"name":"effect_coin_8"},{"time":1.2333,"name":null}]},"effect_coin_47":{"attachment":[{"name":null},{"time":0.0333,"name":"effect_coin_8"},{"time":0.0667,"name":null},{"time":0.2333,"name":null},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.4667,"name":null},{"time":0.5,"name":null},{"time":0.5333,"name":"effect_coin_8"},{"time":0.5667,"name":null},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":"effect_coin_8"},{"time":0.8333,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.0667,"name":"effect_coin_8"},{"time":1.1,"name":null},{"time":1.1667,"name":null},{"time":1.2,"name":null}]},"blue_star57":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.1,"color":"ffffff00"},{"time":1.1667,"color":"ffffffff"},{"time":1.5,"color":"ffffff00"}]},"effect_coin_53":{"attachment":[{"time":0.2,"name":"effect_coin_6"},{"time":0.2333,"name":null},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.4667,"name":"effect_coin_6"},{"time":0.5,"name":null},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.7333,"name":"effect_coin_6"},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.8333,"name":null},{"time":1,"name":"effect_coin_6"},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.2667,"name":"effect_coin_6"},{"time":1.3,"name":null}]},"effect_coin_41":{"attachment":[{"name":null},{"time":0.0333,"name":null},{"time":0.0667,"name":null},{"time":0.2333,"name":"effect_coin_2"},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.4667,"name":"effect_coin_2"},{"time":0.5,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.7333,"name":"effect_coin_2"},{"time":0.7667,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":1,"name":"effect_coin_2"},{"time":1.0333,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null}]},"blue_star11":{"attachment":[{"name":null}]},"blue_star55":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.0667,"color":"ffffff00"},{"time":1.1333,"color":"ffffffff"},{"time":1.4667,"color":"ffffff00"}]},"blue_star27":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2333,"color":"ffffffff"},{"time":0.6667,"color":"ffffff00"}]},"blue_star13":{"attachment":[{"name":null}]},"effect_coin_43":{"attachment":[{"name":null},{"time":0.1,"name":"effect_coin_4"},{"time":0.1333,"name":null},{"time":0.1667,"name":"effect_coin_4"},{"time":0.2,"name":null},{"time":0.3333,"name":"effect_coin_4"},{"time":0.3667,"name":null},{"time":0.4,"name":"effect_coin_4"},{"time":0.4333,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.6667,"name":"effect_coin_4"},{"time":0.7,"name":null},{"time":0.8,"name":"effect_coin_4"},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":"effect_coin_4"},{"time":0.9667,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":"effect_coin_4"},{"time":1.1333,"name":null},{"time":1.2,"name":"effect_coin_4"},{"time":1.2333,"name":null}]},"bone6":{"attachment":[{"name":null}]},"blue_star34":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.3,"color":"ffffffff"},{"time":0.7,"color":"ffffff00"}]},"blue_star36":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.8,"color":"ffffff00"}]},"effect_coin_37":{"attachment":[{"name":null}]},"blue_star14":{"attachment":[{"name":null}]},"blue_star32":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.2333,"color":"ffffffff"},{"time":0.6333,"color":"ffffff00"}]},"effect_coin_54":{"attachment":[{"time":0.1667,"name":"effect_coin_7"},{"time":0.2,"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.4333,"name":"effect_coin_7"},{"time":0.4667,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.7,"name":"effect_coin_7"},{"time":0.7333,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":0.9667,"name":"effect_coin_7"},{"time":1,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null},{"time":1.2333,"name":"effect_coin_7"},{"time":1.2667,"name":null}]},"blue_star9":{"attachment":[{"name":null}]},"wjx01":{"attachment":[{"name":null}]},"ww2_0":{"attachment":[{"name":null}]},"effect_coin_62":{"attachment":[{"name":null},{"time":0.2667,"name":"effect_coin_7"},{"time":0.3,"name":null},{"time":0.4,"name":null},{"time":0.4333,"name":null},{"time":0.5333,"name":"effect_coin_7"},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.7333,"name":"effect_coin_7"},{"time":0.7667,"name":null},{"time":0.8,"name":"effect_coin_7"},{"time":0.8333,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1.0667,"name":"effect_coin_7"},{"time":1.1,"name":null},{"time":1.2667,"name":null},{"time":1.3,"name":null},{"time":1.3333,"name":"effect_coin_7"},{"time":1.3667,"name":null},{"time":1.4,"name":null},{"time":1.4333,"name":null},{"time":1.6333,"name":null}]},"effect_coin_48":{"attachment":[{"time":0.1,"name":"effect_coin_1"},{"time":0.1333,"name":null},{"time":0.3667,"name":"effect_coin_1"},{"time":0.4,"name":null},{"time":0.6333,"name":"effect_coin_1"},{"time":0.6667,"name":null},{"time":0.9,"name":"effect_coin_1"},{"time":0.9333,"name":null},{"time":1.1667,"name":"effect_coin_1"},{"time":1.2,"name":null}]},"blue_star30":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.3,"color":"ffffffff"},{"time":0.6333,"color":"ffffff00"}]},"blue_star29":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.6333,"color":"ffffff00"}]},"effect_coin_4":{"attachment":[{"name":null}]},"effect_coin_57":{"attachment":[{"name":null},{"time":0.2333,"name":null},{"time":0.2667,"name":null},{"time":0.4333,"name":"effect_coin_2"},{"time":0.4667,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.7,"name":"effect_coin_2"},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":"effect_coin_2"},{"time":1,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null},{"time":1.2333,"name":"effect_coin_2"},{"time":1.2667,"name":null},{"time":1.4333,"name":null},{"time":1.4667,"name":null},{"time":1.6333,"name":null}]},"blue_star23":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0667,"color":"ffffff00"},{"time":0.1,"color":"ffffffff"},{"time":0.5,"color":"ffffff00"}]},"blue_star58":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.2,"color":"ffffff00"},{"time":1.2667,"color":"ffffffff"},{"time":1.6333,"color":"ffffff00"}]},"blue_star54":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.9667,"color":"ffffff00"},{"time":1.0667,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"blue_star5":{"attachment":[{"name":null}]},"effect_coin_22":{"attachment":[{"name":null}]},"ww2_00000":{"attachment":[{"name":null}]},"effect_coin_49":{"attachment":[{"time":0.1333,"name":null},{"time":0.1667,"name":null},{"time":0.3333,"name":"effect_coin_2"},{"time":0.3667,"name":null},{"time":0.4,"name":null},{"time":0.4333,"name":null},{"time":0.6,"name":"effect_coin_2"},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.8667,"name":"effect_coin_2"},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1.1333,"name":"effect_coin_2"},{"time":1.1667,"name":null},{"time":1.2,"name":null},{"time":1.2333,"name":null}]},"blue_star10":{"attachment":[{"name":null}]},"blue_star45":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6667,"color":"ffffff00"},{"time":0.7667,"color":"ffffffff"},{"time":1.1333,"color":"ffffff00"}]},"effect_coin_63":{"attachment":[{"name":null},{"time":0.2333,"name":"effect_coin_8"},{"time":0.2667,"name":null},{"time":0.4333,"name":"effect_coin_8"},{"time":0.4667,"name":null},{"time":0.5,"name":"effect_coin_8"},{"time":0.5333,"name":null},{"time":0.5667,"name":"effect_coin_8"},{"time":0.6,"name":null},{"time":0.7667,"name":"effect_coin_8"},{"time":0.8,"name":null},{"time":0.9,"name":"effect_coin_8"},{"time":0.9333,"name":null},{"time":1.0333,"name":"effect_coin_8"},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null},{"time":1.2333,"name":"effect_coin_8"},{"time":1.2667,"name":null},{"time":1.3,"name":"effect_coin_8"},{"time":1.3333,"name":null},{"time":1.4333,"name":"effect_coin_8"},{"time":1.4667,"name":null},{"time":1.6333,"name":null}]},"effect_coin_10":{"attachment":[{"name":null}]},"blue_star40":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff"},{"time":0.8667,"color":"ffffff00"}]},"blue_star25":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2333,"color":"ffffffff"},{"time":0.7,"color":"ffffff00"}]},"effect_coin_1":{"attachment":[{"name":"effect_coin_1"},{"time":0.0333,"name":null},{"time":0.2667,"name":"effect_coin_1"},{"time":0.3,"name":null},{"time":0.5,"name":"effect_coin_1"},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.7667,"name":"effect_coin_1"},{"time":0.8,"name":null},{"time":0.8333,"name":null},{"time":1.0333,"name":"effect_coin_1"},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1667,"name":null},{"time":1.2,"name":null}]},"blue_star20":{"attachment":[{"name":null}]},"blue_star51":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8667,"color":"ffffff00"},{"time":0.9333,"color":"ffffffff"},{"time":1.4,"color":"ffffff00"}]},"blue_star19":{"attachment":[{"name":null}]},"effect_coin_3":{"attachment":[{"name":null}]},"effect_coin_18":{"attachment":[{"name":null}]},"blue_star33":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.5667,"color":"ffffff00"}]},"effect_coin_32":{"attachment":[{"name":null}]},"blue_star53":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8667,"color":"ffffff00"},{"time":0.9667,"color":"ffffffff"},{"time":1.2667,"color":"ffffff00"}]},"blue_star2":{"attachment":[{"name":null}]},"effect_coin_50":{"attachment":[{"time":0.1667,"name":null},{"time":0.2,"name":null},{"time":0.3,"name":"effect_coin_3"},{"time":0.3333,"name":null},{"time":0.4333,"name":null},{"time":0.4667,"name":null},{"time":0.5667,"name":"effect_coin_3"},{"time":0.6,"name":null},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.8333,"name":"effect_coin_3"},{"time":0.8667,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.1,"name":"effect_coin_3"},{"time":1.1333,"name":null},{"time":1.2333,"name":null},{"time":1.2667,"name":null}]},"blue_star50":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.9,"color":"ffffff00"},{"time":1.0333,"color":"ffffffff"},{"time":1.3,"color":"ffffff00"}]},"blue_star22":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.4667,"color":"ffffff00"}]},"blue_star31":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"},{"time":0.6,"color":"ffffff00"}]},"blue_star46":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8333,"color":"ffffff00"},{"time":0.9,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}]},"effect_coin_30":{"attachment":[{"name":null}]},"effect_coin_42":{"attachment":[{"name":null},{"time":0.0667,"name":"effect_coin_3"},{"time":0.1,"name":null},{"time":0.2,"name":"effect_coin_3"},{"time":0.2333,"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.4333,"name":"effect_coin_3"},{"time":0.4667,"name":null},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":"effect_coin_3"},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":"effect_coin_3"},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.1333,"name":null},{"time":1.1667,"name":null}]},"blue_star26":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.5667,"color":"ffffff00"}]},"effect_coin_20":{"attachment":[{"name":null}]},"blue_star43":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.6,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"jbb122":{"attachment":[{"name":null}]},"effect_coin_39":{"attachment":[{"name":null}]},"blue_star16":{"attachment":[{"name":null}]},"blue_star42":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.6333,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"effect_coin_59":{"attachment":[{"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.3667,"name":"effect_coin_4"},{"time":0.4,"name":null},{"time":0.6333,"name":"effect_coin_4"},{"time":0.6667,"name":"effect_coin_4"},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.9,"name":"effect_coin_4"},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1667,"name":"effect_coin_4"},{"time":1.2,"name":null},{"time":1.3,"name":null},{"time":1.3333,"name":null},{"time":1.3667,"name":null},{"time":1.4,"name":null},{"time":1.6333,"name":null}]},"effect_coin_6":{"attachment":[{"name":null}]},"effect_coin_52":{"attachment":[{"time":0.2333,"name":"effect_coin_5"},{"time":0.2667,"name":null},{"time":0.5,"name":"effect_coin_5"},{"time":0.5333,"name":null},{"time":0.7667,"name":"effect_coin_5"},{"time":0.8,"name":null},{"time":1.0333,"name":"effect_coin_5"},{"time":1.0667,"name":null},{"time":1.3,"name":"effect_coin_5"},{"time":1.3333,"name":null}]},"blue_star56":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.0333,"color":"ffffff00"},{"time":1.1333,"color":"ffffffff"},{"time":1.5,"color":"ffffff00"}]},"effect_coin_13":{"attachment":[{"name":null}]},"jbb123":{"attachment":[{"name":null}]},"blue_star":{"attachment":[{"name":null}]},"effect_coin_58":{"attachment":[{"name":null},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.4,"name":"effect_coin_3"},{"time":0.4333,"name":null},{"time":0.6,"name":"effect_coin_3"},{"time":0.6333,"name":null},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.9333,"name":"effect_coin_3"},{"time":0.9667,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.2,"name":"effect_coin_3"},{"time":1.2333,"name":null},{"time":1.2667,"name":null},{"time":1.3,"name":null},{"time":1.4,"name":null},{"time":1.4333,"name":null},{"time":1.6333,"name":null}]},"effect_coin_60":{"attachment":[{"name":null},{"time":0.3333,"name":"effect_coin_5"},{"time":0.3667,"name":null},{"time":0.6,"name":"effect_coin_5"},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.8667,"name":"effect_coin_5"},{"time":0.9,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.1333,"name":"effect_coin_5"},{"time":1.1667,"name":null},{"time":1.3333,"name":null},{"time":1.3667,"name":null},{"time":1.4,"name":"effect_coin_5"},{"time":1.4333,"name":null},{"time":1.6333,"name":null}]},"blue_star52":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.9333,"color":"ffffff00"},{"time":1.0333,"color":"ffffffff"},{"time":1.3,"color":"ffffff00"}]},"blue_star41":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5333,"color":"ffffff00"},{"time":0.6,"color":"ffffffff"},{"time":0.9667,"color":"ffffff00"}]},"effect_coin_29":{"attachment":[{"name":null}]},"blue_star49":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8,"color":"ffffff00"},{"time":0.8667,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}]},"blue_star18":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0333,"color":"ffffff00"},{"time":0.1,"color":"ffffffff"},{"time":0.4667,"color":"ffffff00"}]},"blue_star37":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.4667,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"blue_star8":{"attachment":[{"name":null}]},"blue_star21":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0333,"color":"ffffff00"},{"time":0.1333,"color":"ffffffff"},{"time":0.5667,"color":"ffffff00"}]},"effect_coin_44":{"attachment":[{"name":null},{"time":0.1333,"name":"effect_coin_5"},{"time":0.1667,"name":null},{"time":0.3667,"name":"effect_coin_5"},{"time":0.4,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":"effect_coin_5"},{"time":0.6667,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":"effect_coin_5"},{"time":0.9333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1667,"name":"effect_coin_5"},{"time":1.2,"name":null}]},"bone5":{"attachment":[{"name":null}]},"blue_star28":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"},{"time":0.6667,"color":"ffffff00"}]},"effect_coin_46":{"attachment":[{"name":null},{"time":0.0667,"name":"effect_coin_7"},{"time":0.1,"name":null},{"time":0.2,"name":null},{"time":0.2333,"name":null},{"time":0.3,"name":"effect_coin_7"},{"time":0.3333,"name":null},{"time":0.4333,"name":null},{"time":0.4667,"name":null},{"time":0.5333,"name":null},{"time":0.5667,"name":"effect_coin_7"},{"time":0.6,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.8333,"name":"effect_coin_7"},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.1,"name":"effect_coin_7"},{"time":1.1333,"name":null},{"time":1.1667,"name":null}]},"blue_star35":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2333,"color":"ffffff00"},{"time":0.3333,"color":"ffffffff"},{"time":0.7333,"color":"ffffff00"}]},"effect_coin_24":{"attachment":[{"name":null}]},"blue_star38":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5,"color":"ffffffff"},{"time":0.8333,"color":"ffffff00"}]},"blue_star24":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0667,"color":"ffffff00"},{"time":0.1333,"color":"ffffffff"},{"time":0.6,"color":"ffffff00"}]},"effect_coin_51":{"attachment":[{"time":0.2,"name":null},{"time":0.2333,"name":null},{"time":0.2667,"name":"effect_coin_4"},{"time":0.3,"name":null},{"time":0.4667,"name":null},{"time":0.5,"name":null},{"time":0.5333,"name":"effect_coin_4"},{"time":0.5667,"name":null},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":"effect_coin_4"},{"time":0.8333,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":"effect_coin_4"},{"time":1.1,"name":null},{"time":1.2667,"name":null},{"time":1.3,"name":null}]},"wjx5":{"attachment":[{"name":null}]},"effect_coin_23":{"attachment":[{"name":null}]},"effect_coin_14":{"attachment":[{"name":null}]},"wjx4":{"attachment":[{"name":null}]},"effect_coin_26":{"attachment":[{"name":null}]},"effect_coin_61":{"attachment":[{"name":null},{"time":0.3,"name":"effect_coin_6"},{"time":0.3333,"name":null},{"time":0.3667,"name":null},{"time":0.4,"name":null},{"time":0.5667,"name":"effect_coin_6"},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.8333,"name":"effect_coin_6"},{"time":0.8667,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":"effect_coin_6"},{"time":1.1333,"name":null},{"time":1.3,"name":null},{"time":1.3333,"name":null},{"time":1.3667,"name":"effect_coin_6"},{"time":1.4,"name":null},{"time":1.6333,"name":null}]},"blue_star39":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]}},"bones":{"bn1":{"rotate":[{"time":0.0333},{"time":0.4667,"angle":33}],"translate":[{"time":0.0333},{"time":0.4667,"x":-4.73,"y":41.47}],"scale":[{"time":0.0333}]},"bn2":{"rotate":[{"time":0.0333}],"translate":[{"time":0.0333},{"time":0.5667,"x":17.32,"y":47.25}],"scale":[{"time":0.0333}]},"bn3":{"rotate":[{"time":0.1},{"time":0.4667,"angle":55}],"translate":[{"time":0.1},{"time":0.4667,"x":2.63,"y":55.65}]},"bn4":{"rotate":[{"time":0.0667},{"time":0.5,"angle":74.1}],"translate":[{"time":0.0667},{"time":0.5,"x":15.22,"y":43.05}],"scale":[{"time":0.0667}]},"bn5":{"rotate":[{"time":0.0667},{"time":0.6,"angle":41.1}],"translate":[{"time":0.0667},{"time":0.6,"x":-4.72,"y":61.95}]},"bn6":{"rotate":[{"time":0.1333}],"translate":[{"time":0.1333},{"time":0.7,"x":15.22,"y":50.4}],"scale":[{"time":0.1333,"x":0.63,"y":0.63}]},"bn7":{"rotate":[{"time":0.1667}],"translate":[{"time":0.1667},{"time":0.5667,"x":2.63,"y":51.45}],"scale":[{"time":0.1667,"x":0.729,"y":0.729}]},"bn8":{"rotate":[{"time":0.1333}],"translate":[{"time":0.1333},{"time":0.6667,"x":33.08,"y":42}],"scale":[{"time":0.1333}]},"bn9":{"rotate":[{"time":0.1333},{"time":0.6667,"angle":130.1}],"translate":[{"time":0.1333},{"time":0.6667,"x":13.13,"y":54.6}],"scale":[{"time":0.1333,"x":0.828,"y":0.828}]},"bn10":{"rotate":[{"time":0.1333}],"translate":[{"time":0.1333},{"time":0.6333,"x":45.15,"y":63}],"scale":[{"time":0.1333}]},"bn11":{"rotate":[{"time":0.2},{"time":0.6333,"angle":52.1}],"translate":[{"time":0.2},{"time":0.6333,"x":37.27,"y":44.62}]},"bn12":{"rotate":[{"time":0.1333,"angle":21.2},{"time":0.6,"angle":96.1}],"translate":[{"time":0.1333},{"time":0.6,"x":61.95,"y":34.65}],"scale":[{"time":0.1333,"x":0.824,"y":0.824}]},"bn13":{"rotate":[{"time":0.1667}],"translate":[{"time":0.1667},{"time":0.6333,"x":46.2,"y":40.42}],"scale":[{"time":0.1667},{"time":0.6333,"x":0.609,"y":0.609}]},"bn14":{"rotate":[{"time":0.1333},{"time":0.5667,"angle":230.1}],"translate":[{"time":0.1333},{"time":0.5667,"x":66.15,"y":38.32}],"scale":[{"time":0.1333},{"time":0.5667,"x":0.806,"y":0.806}]},"bn15":{"rotate":[{"time":0.2},{"time":0.7,"angle":130.1}],"translate":[{"time":0.2},{"time":0.7,"x":59.85,"y":49.35}],"scale":[{"time":0.2,"x":0.817,"y":0.817},{"time":0.7,"x":0.519,"y":0.519}]},"bn16":{"rotate":[{"time":0.2333}],"translate":[{"time":0.2333},{"time":0.7333,"x":67.2,"y":20.47}],"scale":[{"time":0.2333},{"time":0.7333,"x":0.75,"y":0.75}]},"bn17":{"rotate":[{"time":0.3},{"time":0.8,"angle":152.1}],"translate":[{"time":0.3},{"time":0.8,"x":51.97,"y":30.97}],"scale":[{"time":0.3},{"time":0.8,"x":0.869,"y":0.869}]},"bn18":{"rotate":[{"time":0.4}],"translate":[{"time":0.4},{"time":0.9,"x":75.6,"y":25.2}],"scale":[{"time":0.4},{"time":0.9,"x":0.732,"y":0.732}]},"bn19":{"rotate":[{"time":0.4667}],"translate":[{"time":0.4667},{"time":0.8333,"x":66.67,"y":25.2}],"scale":[{"time":0.4667},{"time":0.8333,"x":0.673,"y":0.673}]},"bn20":{"rotate":[{"time":0.4667},{"time":1,"angle":219.1}],"translate":[{"time":0.4667},{"time":1,"x":84,"y":8.4}],"scale":[{"time":0.4667},{"time":1,"x":0.709,"y":0.709}]},"bn21":{"rotate":[{"time":0.4667}],"translate":[{"time":0.4667},{"time":0.8667,"x":72.97,"y":17.85}],"scale":[{"time":0.4667},{"time":0.8667,"x":0.573,"y":0.573}]},"bn22":{"rotate":[{"time":0.5333}],"translate":[{"time":0.5333},{"time":0.9667,"x":93.45,"y":27.83}],"scale":[{"time":0.5333},{"time":0.9667,"x":0.799,"y":0.799}]},"bn23":{"rotate":[{"time":0.5667}],"translate":[{"time":0.5667},{"time":0.9,"x":90.82,"y":16.28}],"scale":[{"time":0.5667},{"time":0.9,"x":0.667,"y":0.667}]},"bn24":{"rotate":[{"time":0.5667},{"time":1,"angle":274.1}],"translate":[{"time":0.5667},{"time":1,"x":86.62,"y":25.2}],"scale":[{"time":0.5667}]},"bn25":{"rotate":[{"time":0.6333}],"translate":[{"time":0.6333},{"time":1,"x":79.27}],"scale":[{"time":0.6333}]},"bn26":{"rotate":[{"time":0.6667}],"translate":[{"time":0.6667},{"time":1.1333,"x":87.15,"y":17.33}],"scale":[{"time":0.6667},{"time":1.1333,"x":0.833,"y":0.833}]},"bn27":{"rotate":[{"time":0.8333},{"time":1.1667,"angle":96.1}],"translate":[{"time":0.8333},{"time":1.1667,"x":85.05,"y":-4.72}],"scale":[{"time":0.8333},{"time":1.1667,"x":0.831,"y":0.831}]},"bn28":{"rotate":[{"time":0.7333}],"translate":[{"time":0.7333},{"time":1.2,"x":88.72,"y":15.22}],"scale":[{"time":0.7333},{"time":1.2,"x":0.872,"y":0.872}]},"bn29":{"rotate":[{"time":0.8}],"translate":[{"time":0.8},{"time":1.1333,"x":74.02,"y":5.78}],"scale":[{"time":0.8},{"time":1.1333,"x":0.79,"y":0.79}]},"bn30":{"rotate":[{"time":0.8}],"translate":[{"time":0.8},{"time":1.1667,"x":84.52,"y":19.42}],"scale":[{"time":0.8},{"time":1.1667,"x":0.773,"y":0.773}]},"bn31":{"rotate":[{"time":0.9},{"time":1.3,"angle":329.1}],"translate":[{"time":0.9},{"time":1.3,"x":91.35,"y":11.55}],"scale":[{"time":0.9},{"time":1.3,"x":0.732,"y":0.732}]},"bn32":{"rotate":[{"time":0.8667}],"translate":[{"time":0.8667},{"time":1.4,"x":86.1,"y":41.47}],"scale":[{"time":0.8667},{"time":1.4,"x":0.63,"y":0.63}]},"bn33":{"rotate":[{"time":0.9333}],"translate":[{"time":0.9333},{"time":1.3,"x":117.6,"y":9.45}],"scale":[{"time":0.9333},{"time":1.3,"x":0.813,"y":0.813}]},"bn34":{"rotate":[{"time":0.8667},{"time":1.2667,"angle":219.1}],"translate":[{"time":0.8667},{"time":1.2667,"x":62.47,"y":31.5}],"scale":[{"time":0.8667},{"time":1.2667,"x":0.953,"y":0.953}]},"bn35":{"rotate":[{"time":0.9667}],"translate":[{"time":0.9667},{"time":1.3667,"x":69.3,"y":18.9}],"scale":[{"time":0.9667},{"time":1.3667,"x":0.912,"y":0.912}]},"bn36":{"rotate":[{"time":1.0667}],"translate":[{"time":1.0667},{"time":1.4667,"x":49.88,"y":43.57}],"scale":[{"time":1.0667},{"time":1.4667,"x":0.643,"y":0.643}]},"bn37":{"rotate":[{"time":1.0333},{"time":1.5,"angle":107.1}],"translate":[{"time":1.0333},{"time":1.5,"x":68.25,"y":28.88}],"scale":[{"time":1.0333},{"time":1.5,"x":0.87,"y":0.87}]},"bn38":{"rotate":[{"time":1.1},{"time":1.5,"angle":152.1}],"translate":[{"time":1.1},{"time":1.5,"x":-5.78,"y":61.42}],"scale":[{"time":1.1},{"time":1.5,"x":0.809,"y":0.809}]},"bn39":{"rotate":[{"time":1.2},{"time":1.6333,"angle":130.1}],"translate":[{"time":1.2},{"time":1.6333,"x":49.35,"y":46.2}],"scale":[{"time":1.2},{"time":1.6333,"x":0.868,"y":0.868}]},"bone11":{"rotate":[{"curve":"stepped"},{"time":1.2}],"translate":[{},{"time":0.0333,"x":1.2,"y":16.85},{"time":0.0667,"x":7.01,"y":42.21},{"time":0.1,"x":23.67,"y":64.22},{"time":0.2,"x":85.01,"y":107.69},{"time":0.3,"x":136.58,"y":121.53},{"time":0.4,"x":197.07,"y":135.74},{"time":0.5,"x":251.31,"y":140.09},{"time":0.6,"x":303.5,"y":144.43},{"time":0.7,"x":358.15,"y":150.73},{"time":0.8,"x":413.25,"y":162.74},{"time":0.9,"x":460.51,"y":189.3},{"time":1,"x":473.57,"y":215.18},{"time":1.1,"x":473.88,"y":260.68}],"scale":[{"x":1.421,"y":1.421},{"time":1.2}]},"bone12":{"rotate":[{"time":0.1,"curve":"stepped"},{"time":1.3}],"translate":[{"time":0.1},{"time":0.1333,"x":1.2,"y":16.85},{"time":0.1667,"x":7.01,"y":42.21},{"time":0.2,"x":23.67,"y":64.22},{"time":0.3,"x":85.01,"y":107.69},{"time":0.4,"x":136.58,"y":121.53},{"time":0.5,"x":197.07,"y":135.74},{"time":0.6,"x":251.31,"y":140.09},{"time":0.7,"x":303.5,"y":144.43},{"time":0.8,"x":358.15,"y":150.73},{"time":0.9,"x":413.25,"y":162.74},{"time":1,"x":460.51,"y":189.3},{"time":1.1,"x":473.57,"y":215.18},{"time":1.2,"x":473.88,"y":260.68}],"scale":[{"time":0.1,"x":1.421,"y":1.421},{"time":1.3}]},"bone13":{"rotate":[{"time":0.2,"curve":"stepped"},{"time":1.4}],"translate":[{"time":0.2},{"time":0.2333,"x":1.2,"y":16.85},{"time":0.2667,"x":7.01,"y":42.21},{"time":0.3,"x":23.67,"y":64.22},{"time":0.4,"x":85.01,"y":107.69},{"time":0.5,"x":136.58,"y":121.53},{"time":0.6,"x":197.07,"y":135.74},{"time":0.7,"x":251.31,"y":140.09},{"time":0.8,"x":303.5,"y":144.43},{"time":0.9,"x":358.15,"y":150.73},{"time":1,"x":413.25,"y":162.74},{"time":1.1,"x":460.51,"y":189.3},{"time":1.2,"x":473.57,"y":215.18},{"time":1.3,"x":473.88,"y":260.68}],"scale":[{"time":0.2,"x":1.421,"y":1.421},{"time":1.4}]}}}}},[0]]],0,0,[0],[-1],[39]],[[{"name":"title","rect":{"x":0,"y":0,"width":500,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":500,"height":92},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-250,-46,0,250,-46,0,-250,46,0,250,46,0],"indexes":[0,1,2,2,1,3],"uv":[0,92,500,92,0,0,500,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-250,"y":-46,"z":0},"maxPos":{"x":250,"y":46,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[40]],[[{"name":"coin","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[41]],[[{"name":"check","rect":{"x":0,"y":0,"width":64,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-32,-30,0,32,-30,0,-32,30,0,32,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,64,60,0,0,64,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-32,"y":-30,"z":0},"maxPos":{"x":32,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[42]],[[[20,".bin",815868016,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":14280,"count":7140,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[20,".bin",2489017538,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[20,".bin",2531713262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[{"name":"btn1","rect":{"x":0,"y":0,"width":358,"height":112},"offset":{"x":0,"y":0},"originalSize":{"width":358,"height":112},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-179,-56,0,179,-56,0,-179,56,0,179,56,0],"indexes":[0,1,2,2,1,3],"uv":[0,112,358,112,0,0,358,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-179,"y":-56,"z":0},"maxPos":{"x":179,"y":56,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[43]],[[{"name":"bar","rect":{"x":0,"y":0,"width":443,"height":50},"offset":{"x":0,"y":0},"originalSize":{"width":443,"height":50},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-221.5,-25,0,221.5,-25,0,-221.5,25,0,221.5,25,0],"indexes":[0,1,2,2,1,3],"uv":[0,50,443,50,0,0,443,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-221.5,"y":-25,"z":0},"maxPos":{"x":221.5,"y":25,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[44]],[[{"name":"usdt","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[45]],[[[43,1,0.8,0.8]],0,0,[],[],[]],[[{"name":"stop","rect":{"x":0,"y":0,"width":86,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":86,"height":84},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-43,-42,0,43,-42,0,-43,42,0,43,42,0],"indexes":[0,1,2,2,1,3],"uv":[0,84,86,84,0,0,86,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-43,"y":-42,"z":0},"maxPos":{"x":43,"y":42,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[46]],[[[44,"plane",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"USE_ALPHA_TEST":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[9,8],[47,48]],[[[71,"../AssetsPackage/materias/effect",[{"hash":1731685396,"name":"../AssetsPackage/materias/effect|legacy/main-functions/general-vs:vert|unlit-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":17,"defines":[]},{"name":"a_texCoord1","format":21,"location":18,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    layout(location = 11) in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    layout(location = 12) in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    layout(location = 13) in vec4 a_sh_linear_const_r;\n    layout(location = 14) in vec4 a_sh_linear_const_g;\n    layout(location = 15) in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 8) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 9) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 10) uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 7) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      layout(set = 2, binding = 7) uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(set = 2, binding = 3) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(set = 0, binding = 3) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 4) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 6) uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nlayout(location = 17) in vec4 a_color;\n#if HAS_SECOND_UV\n  layout(location = 18) in vec2 a_texCoord1;\n#endif\nlayout(location = 2) out vec3 v_position;\nlayout(location = 3) out vec3 v_normal;\nlayout(location = 4) out vec3 v_tangent;\nlayout(location = 5) out vec3 v_bitangent;\nlayout(location = 6) out vec2 v_uv;\nlayout(location = 7) out vec2 v_uv1;\nlayout(location = 8) out vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nlayout(location = 6) in vec2 v_uv;\nlayout(location = 2) in vec3 v_position;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  CC_APPLY_FOG(col, v_position);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nin vec4 a_color;\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nin vec2 v_uv;\nin vec3 v_position;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  CC_APPLY_FOG(col, v_position);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nattribute vec4 a_color;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvarying vec2 v_uv;\nvarying vec3 v_position;\nuniform sampler2D mainTexture;\n   uniform vec4 mainColor;\nvec4 frag () {\n  vec4 col = mainColor * texture2D(mainTexture, v_uv);\n  CC_APPLY_FOG(col, v_position);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":131,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"}]},{"hash":1731685396,"name":"../AssetsPackage/materias/effect|general-vs:vert|unlit-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":17,"defines":[]},{"name":"a_texCoord1","format":21,"location":18,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    layout(location = 11) in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    layout(location = 12) in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    layout(location = 13) in vec4 a_sh_linear_const_r;\n    layout(location = 14) in vec4 a_sh_linear_const_g;\n    layout(location = 15) in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 8) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 9) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 10) uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 7) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      layout(set = 2, binding = 7) uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(set = 2, binding = 3) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(set = 0, binding = 3) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 4) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 6) uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nlayout(location = 17) in vec4 a_color;\n#if HAS_SECOND_UV\n  layout(location = 18) in vec2 a_texCoord1;\n#endif\nlayout(location = 2) out vec3 v_position;\nlayout(location = 3) out vec3 v_normal;\nlayout(location = 4) out vec3 v_tangent;\nlayout(location = 5) out vec3 v_bitangent;\nlayout(location = 6) out vec2 v_uv;\nlayout(location = 7) out vec2 v_uv1;\nlayout(location = 8) out vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nlayout(location = 6) in vec2 v_uv;\nlayout(location = 2) in vec3 v_position;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  CC_APPLY_FOG(col, v_position);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nin vec4 a_color;\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nin vec2 v_uv;\nin vec3 v_position;\nuniform sampler2D mainTexture;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec4 col = mainColor * texture(mainTexture, v_uv);\n  CC_APPLY_FOG(col, v_position);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if defined(CC_USE_METAL) || defined(CC_USE_WGPU)\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nattribute vec4 a_color;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvarying vec2 v_uv;\nvarying vec3 v_position;\nuniform sampler2D mainTexture;\n   uniform vec4 mainColor;\nvec4 frag () {\n  vec4 col = mainColor * texture2D(mainTexture, v_uv);\n  CC_APPLY_FOG(col, v_position);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":131,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../AssetsPackage/materias/effect|legacy/main-functions/general-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1]}}}]},{"name":"transparent","passes":[{"program":"../AssetsPackage/materias/effect|general-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1]}}}]}]]],0,0,[],[],[]],[[{"name":"musical-notes","rect":{"x":30,"y":12,"width":132,"height":168},"offset":{"x":0,"y":0},"originalSize":{"width":192,"height":192},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-66,-84,0,66,-84,0,-66,84,0,66,84,0],"indexes":[0,1,2,2,1,3],"uv":[30,180,162,180,30,12,162,12],"nuv":[0.15625,0.0625,0.84375,0.0625,0.15625,0.9375,0.84375,0.9375],"minPos":{"x":-66,"y":-84,"z":0},"maxPos":{"x":66,"y":84,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[49]],[[{"name":"USDT","rect":{"x":25,"y":39,"width":160,"height":168},"offset":{"x":-10,"y":-17},"originalSize":{"width":230,"height":212},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-80,-84,0,80,-84,0,-80,84,0,80,84,0],"indexes":[0,1,2,2,1,3],"uv":[25,173,185,173,25,5,185,5],"nuv":[0.10869565217391304,0.02358490566037736,0.8043478260869565,0.02358490566037736,0.10869565217391304,0.8160377358490566,0.8043478260869565,0.8160377358490566],"minPos":{"x":-80,"y":-84,"z":0},"maxPos":{"x":80,"y":84,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[50]],[[{"name":"add","rect":{"x":2,"y":0,"width":64,"height":65},"offset":{"x":1,"y":0.5},"originalSize":{"width":66,"height":66},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-32,-32.5,0,32,-32.5,0,-32,32.5,0,32,32.5,0],"indexes":[0,1,2,2,1,3],"uv":[2,66,66,66,2,1,66,1],"nuv":[0.030303030303030304,0.015151515151515152,1,0.015151515151515152,0.030303030303030304,1,1,1],"minPos":{"x":-32,"y":-32.5,"z":0},"maxPos":{"x":32,"y":32.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[51]],[[{"name":"failbar","rect":{"x":1,"y":0,"width":304,"height":24},"offset":{"x":0.5,"y":0},"originalSize":{"width":305,"height":24},"rotated":false,"capInsets":[9,7,10,7],"vertices":{"rawPosition":[-152,-12,0,152,-12,0,-152,12,0,152,12,0],"indexes":[0,1,2,2,1,3],"uv":[1,24,305,24,1,0,305,0],"nuv":[0.003278688524590164,0,1,0,0.003278688524590164,1,1,1],"minPos":{"x":-152,"y":-12,"z":0},"maxPos":{"x":152,"y":12,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[52]],[[{"name":"tree","rect":{"x":0,"y":0,"width":800,"height":800},"offset":{"x":0,"y":0},"originalSize":{"width":800,"height":800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-400,-400,0,400,-400,0,-400,400,0,400,400,0],"indexes":[0,1,2,2,1,3],"uv":[0,800,800,800,0,0,800,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-400,"y":-400,"z":0},"maxPos":{"x":400,"y":400,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[53]],[[{"name":"volume-high","rect":{"x":13,"y":32,"width":181,"height":143},"offset":{"x":0,"y":0},"originalSize":{"width":207,"height":207},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-90.5,-71.5,0,90.5,-71.5,0,-90.5,71.5,0,90.5,71.5,0],"indexes":[0,1,2,2,1,3],"uv":[13,175,194,175,13,32,194,32],"nuv":[0.06280193236714976,0.15458937198067632,0.9371980676328503,0.15458937198067632,0.06280193236714976,0.8454106280193237,0.9371980676328503,0.8454106280193237],"minPos":{"x":-90.5,"y":-71.5,"z":0},"maxPos":{"x":90.5,"y":71.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[54]],[[[20,".bin",1361083069,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14400,"length":2568,"count":1284,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14400,"count":300,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.02500000037252903,-0.024620195850729942,-0.002619552193209529],"maxPosition",8,[1,0.02500000037252903,0.024620195850729942,0.057380449026823044]]],-1],0,0,[],[],[]],[[[20,".bin",1135839361,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19008,"length":3456,"count":1728,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19008,"count":396,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05000000074505806,-0.05000000074505806,0],"maxPosition",8,[1,0.05000000074505806,0.05000000074505806,0.04000000283122063]]],-1],0,0,[],[],[]],[[{"name":"libao","rect":{"x":55,"y":48,"width":337,"height":397},"offset":{"x":-16.5,"y":-6.5},"originalSize":{"width":480,"height":480},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-168.5,-198.5,0,168.5,-198.5,0,-168.5,198.5,0,168.5,198.5,0],"indexes":[0,1,2,2,1,3],"uv":[55,432,392,432,55,35,392,35],"nuv":[0.11458333333333333,0.07291666666666667,0.8166666666666667,0.07291666666666667,0.11458333333333333,0.9,0.8166666666666667,0.9],"minPos":{"x":-168.5,"y":-198.5,"z":0},"maxPos":{"x":168.5,"y":198.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[55]],[[[69,"standard-material",[{"roughness":0.8,"metallic":0.6}]]],0,0,[0],[8],[8]],[[{"name":"btn","rect":{"x":0,"y":0,"width":282,"height":112},"offset":{"x":0,"y":0},"originalSize":{"width":282,"height":112},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-141,-56,0,141,-56,0,-141,56,0,141,56,0],"indexes":[0,1,2,2,1,3],"uv":[0,112,282,112,0,0,282,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-141,"y":-56,"z":0},"maxPos":{"x":141,"y":56,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[56]],[[{"name":"btn3","rect":{"x":0,"y":0,"width":286,"height":116},"offset":{"x":0,"y":0},"originalSize":{"width":286,"height":116},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-143,-58,0,143,-58,0,-143,58,0,143,58,0],"indexes":[0,1,2,2,1,3],"uv":[0,116,286,116,0,0,286,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-143,"y":-58,"z":0},"maxPos":{"x":143,"y":58,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[57]],[[[72,"main"],[7,"Canvas",33554432,[-5,-6,-7,-8,-9,-10,-11,-12],[[0,-1,[5,750,1622]],[88,-3,-2],[89,45,5.684341886080802e-14,5.684341886080802e-14,-1.1368683772161603e-13,-1.1368683772161603e-13,-4]],[1,375.00000000000006,810.9999999999999,0]],[73,"Mian","07p8el3JpDfqvHCDr9YDQf",[1,-14,-15,-16,-17,-18,-19,-20,-21],[[94,-13,163,164,165,166,167,168]]],[74,"ui",33554432,1,[-24,-25,-26,-27,-28,-29],[[0,-22,[5,750,1622]],[19,45,100,100,-23]]],[36,"mask",33554432,[-32,-33,-34,-35,-36,-37],[[0,-30,[5,514,718]],[4,0,-31,33]]],[45,"collectnox",2,[-39,-40,-41,-42,-43,-44,-45],[[57,"Cube<ModelComponent>",1,-38,[151],[5],152]],[1,0,14.76,7.136],[3,0,1,0,6.123233995736766e-17],[1,9.5,1.2,1.8],[1,0,180,0]],[36,"mask",33554432,[-48,-49,-50,-51,-52],[[0,-46,[5,514,718]],[4,0,-47,51]]],[46,"lose",false,33554432,[-55,-56,-57,-58,-59],[[0,-53,[5,516,812]],[3,-54,78]]],[21,"Tost",false,33554432,1,[-61,-62,-63,-64,-65,-66],[[0,-60,[5,807,482]]]],[2,"bottom",33554432,3,[-70,-71,-72],[[0,-67,[5,750,176]],[4,0,-68,17],[90,44,-16,778,-69]],[1,0,-739,0]],[2,"Button",33554432,4,[-77,-78],[[0,-73,[5,358,112]],[12,1,2,-74,31],[17,3,-76,[4,4292269782],-75,32]],[1,0,-260,0]],[47,"timeOut",false,33554432,[-81,-82,-83,-84],[[0,-79,[5,516,676]],[3,-80,64]],[1,0,100.042,0]],[46,"win",false,33554432,[-86,-87,-88,-89,-90],[[9,-85]]],[2,"button",33554432,9,[-94,-95],[[0,-91,[5,164,132]],[4,0,-92,7],[23,3,-93,8]],[1,-230,0,0]],[2,"button1",33554432,9,[-99,-100],[[0,-96,[5,164,132]],[4,0,-97,11],[23,3,-98,12]],[1,8.047,0,0]],[2,"button2",33554432,9,[-104,-105],[[0,-101,[5,164,132]],[4,0,-102,15],[23,3,-103,16]],[1,230,0,0]],[48,"time",false,33554432,3,[-108,-109,-110],[[9,-106],[91,1,50,-107]],[1,0,711,0]],[21,"BulletFrame",false,33554432,1,[-114,4],[[0,-111,[5,750,1622]],[19,45,100,100,-112],[99,-113,34,35,36]]],[2,"continue",33554432,6,[-119],[[0,-115,[5,286,116]],[12,1,2,-116,41],[17,3,-118,[4,4292269782],-117,42]],[1,0,-97.761,0]],[2,"giveUp",33554432,6,[-124],[[0,-120,[5,286,116]],[12,1,2,-121,43],[17,3,-123,[4,4292269782],-122,44]],[1,0,-246.732,0]],[7,"Toggle",33554432,[-130],[[0,-125,[5,64,60]],[4,2,-126,46],[59,-129,[4,4292269782],-128,-127,47]],[1,122.124,32.67,0]],[7,"Toggle",33554432,[-136],[[0,-131,[5,64,60]],[4,2,-132,49],[59,-135,[4,4292269782],-134,-133,50]],[1,0,-57.054,0]],[21,"Over",false,33554432,1,[-139,-140,12],[[0,-137,[5,750,1622]],[19,45,100,100,-138]]],[2,"hd1",33554432,11,[-143,-144,-145],[[0,-141,[5,500,92]],[3,-142,55]],[1,0,287.831,0]],[7,"usdc",33554432,[-148,-149,-150],[[0,-146,[5,150,110]],[16,0,-147]],[1,-81.751,0,0]],[7,"myToken",33554432,[-153,-154,-155],[[0,-151,[5,150,110]],[16,0,-152]],[1,149.357,0,0]],[47,"continue",false,33554432,[-160],[[0,-156,[5,286,116]],[12,1,2,-157,60],[17,3,-159,[4,4292269782],-158,61]],[1,0,68,0]],[36,"giveUp",33554432,[-165],[[0,-161,[5,286,116]],[12,1,2,-162,62],[17,3,-164,[4,4292269782],-163,63]]],[7,"usdc",33554432,[-168,-169,-170],[[0,-166,[5,150,110]],[16,0,-167]],[1,-81.751,0,0]],[7,"myToken",33554432,[-173,-174,-175],[[0,-171,[5,150,110]],[16,0,-172]],[1,149.357,0,0]],[7,"continue",33554432,[-180],[[0,-176,[5,286,116]],[12,1,2,-177,70],[17,3,-179,[4,4292269782],-178,71]],[1,0,68,0]],[7,"giveUp",33554432,[-185],[[0,-181,[5,286,116]],[12,1,2,-182,72],[17,3,-184,[4,4292269782],-183,73]],[1,0,-68,0]],[2,"continue",33554432,12,[-190],[[0,-186,[5,286,116]],[12,1,2,-187,82],[17,3,-189,[4,4292269782],-188,83]],[1,34.236,-184.093,0]],[2,"prop",33554432,8,[-193,-194,-195],[[9,-191],[38,3,-192]],[1,-231.904,47.19,0]],[49,"wall",2,[-196,-197,-198,-199,-200],[1,0,7.502,-0.938],[1,1,10,1]],[45,"temporary",2,[-203,-204,-205],[[57,"Cube<ModelComponent>",1,-201,[159],[5],160],[100,-202,[161],162]],[1,0,15.296,5.407],[3,0,1,0,6.123233995736766e-17],[1,4.8,1,2],[1,0,180,0]],[21,"dianzhi",false,33554432,1,[-207,-208,-209],[[9,-206]]],[1,"stop",33554432,3,[[0,-210,[5,86,84]],[3,-211,3],[92,9,50,59.66899999999998,-212],[23,3,-213,4]],[1,-282,709.331,0]],[2,"coinBox",33554432,3,[-216,-217],[[9,-214],[93,32,325,-215]],[1,0,598.742,0]],[2,"eggCion",33554432,38,[-219,-220,-221],[[9,-218]],[1,90,0,0]],[2,"usdcCion",33554432,38,[-223,-224,-225],[[9,-222]],[1,-90,0,0]],[21,"gameOver",false,33554432,1,[-228,6],[[0,-226,[5,750,1622]],[19,45,100,100,-227]]],[2,"ProgressBar",33554432,11,[-233],[[0,-229,[5,443,50]],[12,1,2,-230,57],[60,406.4,0,-232,-231]],[1,0,153.27,0]],[52,"Bar",33554432,42,[-236],[[[29,-234,[5,0,25],[0,0,0.5]],-235],4,1],[1,-203.625,1,0]],[50,"USDT",33554432,43,[-240],[[0,-237,[5,160,168]],[3,-238,56],[54,32,-20,1,-239,43]],[1,0.25,0.25,1]],[2,"Layout",33554432,11,[26,27],[[0,-241,[5,592,116]],[61,1,2,20,20,-242]],[1,0,-189.828,0]],[2,"ProgressBar",33554432,7,[-247],[[0,-243,[5,443,50]],[12,1,2,-244,67],[60,406.4,0,-246,-245]],[1,0,146.043,0]],[52,"Bar",33554432,46,[-250],[[[29,-248,[5,0,25],[0,0,0.5]],-249],4,1],[1,-203.625,1,0]],[50,"USDT",33554432,47,[-254],[[0,-251,[5,160,168]],[3,-252,66],[54,32,-20,1,-253,47]],[1,0.25,0.25,1]],[2,"Layout",33554432,7,[30,31],[[0,-255,[5,592,252]],[61,1,2,20,20,-256]],[1,0,-227.514,0]],[7,"coin",33554432,[-259,-260],[[0,-257,[5,222,62]],[3,-258,75]],[1,-128.313,0,0]],[7,"usdt",33554432,[-263,-264],[[0,-261,[5,222,62]],[3,-262,77]],[1,140.34,0,0]],[7,"usdc",33554432,[-267,-268],[[0,-265,[5,220,110]],[16,0,-266]],[1,-70.521,0,0]],[7,"myToken",33554432,[-271,-272],[[0,-269,[5,220,110]],[16,0,-270]],[1,142.19,0,0]],[7,"coin",33554432,[-275,-276],[[0,-273,[5,222,62]],[3,-274,85]],[1,-128.313,0,0]],[7,"usdt",33554432,[-279,-280],[[0,-277,[5,222,62]],[3,-278,87]],[1,140.34,0,0]],[2,"info",33554432,8,[-282,-283,-284],[[9,-281]],[1,0,-22.921,0]],[48,"test",false,33554432,1,[-286,-287,-288],[[9,-285]],[1,0,605.371,0]],[75,"wall",34,[-289,-290,-291,-292],[3,0,0.3826834323650898,0,0.9238795325112867],[1,0,45,0]],[30,["74FGXsdUxZmIgmC0YbZvDA"]],[101,"main",true,[-294,-295,2],[102,null,null,"ff76d102-99c9-4e7c-83e7-e667ed6f79aa",null,null,[-293]],[104,[105,0.8,[2,0.2,0.5,0.8,0.520833125],[2,0.452588,0.607642,0.755699,0],[2,0.618555,0.577848,0.544564,0]],[106,true,1,[4,4283190348],[0,2048,2048]],[107,true,169,170],[108],[109],[110],[111],[112]]],[2,"add",33554432,13,[-298],[[0,-296,[5,64,65]],[4,0,-297,6]],[1,64.754,52.257,0]],[2,"add",33554432,14,[-301],[[0,-299,[5,64,65]],[4,0,-300,10]],[1,64.754,52.257,0]],[2,"add",33554432,15,[-304],[[0,-302,[5,64,65]],[4,0,-303,14]],[1,64.754,52.257,0]],[13,"bg",33554432,17,[[0,-305,[5,750,1622]],[37,0,-306,[4,1343493151],24],[19,45,100,100,-307]]],[2,"title",33554432,4,[-310],[[0,-308,[5,500,92]],[3,-309,25]],[1,0,310.1,0]],[1,"close",33554432,4,[[0,-311,[5,72,76]],[3,-312,26],[23,3,-313,27]],[1,245.771,346.038,0]],[2,"cal",33554432,4,[-316],[[0,-314,[5,242,242]],[4,0,-315,29]],[1,0,109.835,0]],[13,"bg",33554432,41,[[0,-317,[5,750,1622]],[37,0,-318,[4,1343493151],37],[19,45,100,100,-319]]],[2,"title",33554432,6,[-322],[[0,-320,[5,500,92]],[3,-321,38]],[1,0,310.1,0]],[1,"close",33554432,6,[[0,-323,[5,72,76]],[3,-324,39],[23,3,-325,40]],[1,245.771,346.038,0]],[2,"setting",33554432,6,[-327,-328],[[9,-326]],[1,0,134.011,0]],[2,"sound",33554432,71,[-330,20],[[9,-329]],[1,-71.65,12.462,0]],[2,"music",33554432,71,[-332,21],[[9,-331]],[1,54.4,-4.985,0]],[13,"bg",33554432,22,[[0,-333,[5,750,1622]],[37,0,-334,[4,3859483409],52],[19,45,100,100,-335]]],[21,"flied",false,33554432,22,[11,7],[[9,-336]]],[2,"detail",33554432,11,[24,25],[[0,-337,[5,500,100]]],[1,0,-2.16,0]],[2,"hd1",33554432,7,[-340],[[0,-338,[5,500,138]],[3,-339,65]],[1,0,328.684,0]],[2,"detail",33554432,7,[28,29],[[0,-341,[5,500,100]]],[1,0,-2.16,0]],[2,"coinBox",33554432,7,[50,51],[[0,-342,[5,500,100]]],[1,-16.016,466.017,0]],[2,"detail",33554432,12,[52,53],[[9,-343]],[1,0,24.669,0]],[2,"coinBox",33554432,12,[54,55],[[0,-344,[5,500,100]]],[1,0,-338.52,0]],[8,"yes",33554432,8,[[0,-345,[5,286,116]],[4,0,-346,92],[38,3,-347]],[1,-152.356,-126.738,0],[1,0.9,0.9,1]],[8,"no",33554432,8,[[0,-348,[5,286,116]],[4,0,-349,93],[38,3,-350]],[1,149.659,-126.738,0],[1,0.9,0.9,1]],[10,"plate",2,[[6,"Plane<ModelComponent>",-351,[96],[97,true,true],97],[11,2,-352],[14,-353,98]],[1,0,0,-0.3],[1,1.2,0.1,1.2]],[10,"targetNode",2,[[6,"Sphere<ModelComponent>",-354,[99],[5],100],[11,2,-355],[115,-356,[1,0.0010054856538772583,0,7.450580596923828e-8],101]],[1,0,-0.047,-0.938],[1,0.1,0.1,0.1]],[15,"Plane",34,[[6,"Plane<ModelComponent>",-357,[102],[5],103],[11,2,-358],[14,-359,104]],[1,0,0,-4.8],[3,0.7071067811865475,0,0,0.7071067811865476],[1,2,1,1],[1,89.99999999999999,0,0]],[15,"Plane1",34,[[6,"Plane<ModelComponent>",-360,[105],[5],106],[11,2,-361],[14,-362,107]],[1,0,0,5.2],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,1,1],[1,-90,0,0]],[15,"Plane2",34,[[6,"Plane<ModelComponent>",-363,[108],[5],109],[11,2,-364],[14,-365,110]],[1,5.2,0,0.798],[3,0.5,-0.5,0.4999999999999999,0.5000000000000001],[1,2,1,1],[1,90,-90,0]],[15,"Plane3",34,[[6,"Plane<ModelComponent>",-366,[111],[5],112],[11,2,-367],[14,-368,113]],[1,-5,0,0.798],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,2,1,1],[1,-90,-90,0]],[15,"Plane",58,[[6,"Plane<ModelComponent>",-369,[114],[5],115],[11,2,-370],[14,-371,116]],[1,0,0,-4.8],[3,0.7071067811865475,0,0,0.7071067811865476],[1,2,1,1],[1,89.99999999999999,0,0]],[15,"Plane1",58,[[6,"Plane<ModelComponent>",-372,[117],[5],118],[11,2,-373],[14,-374,119]],[1,0,0,5.2],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2,1,1],[1,-90,0,0]],[15,"Plane2",58,[[6,"Plane<ModelComponent>",-375,[120],[5],121],[11,2,-376],[14,-377,122]],[1,5.2,0,0.798],[3,0.5,-0.5,0.4999999999999999,0.5000000000000001],[1,2,1,1],[1,90,-90,0]],[15,"Plane3",58,[[6,"Plane<ModelComponent>",-378,[123],[5],124],[11,2,-379],[14,-380,125]],[1,-5,0,0.798],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,2,1,1],[1,-90,-90,0]],[76,"Cone",[[58,-381,[129],[5],130],[11,2,-382],[62,-383,131,132]],[1,0.009,-0.002,0.005],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,1,1,6],[1,-90.00000000000004,0,0]],[77,"Cylinder",false,[[58,-384,[133],[5],134],[11,2,-385],[62,-386,135,136]],[1,0.009313477203249931,0.002619552193209529,0.005222313106060028],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1,1,2],[1,-90.00000000000003,0,0]],[8,"libao",33554432,36,[[0,-387,[5,338,397]],[3,-388,0]],[1,190.307,547.972,0],[1,0.4,0.4,1]],[8,"tree",33554432,36,[[0,-389,[5,800,800]],[3,-390,1]],[1,-250.087,510.112,0],[1,0.28,0.28,1]],[8,"tree1",33554432,36,[[0,-391,[5,800,800]],[3,-392,2]],[1,336.892,427.009,0],[1,0.15,0.15,1]],[1,"1",33554432,13,[[0,-393,[5,63,76]],[3,-394,5]],[1,0,18.346,0]],[1,"Label",33554432,61,[[0,-395,[5,0,50.4]],[31,"",30,30,true,-396]],[1,0,6.345,0]],[1,"2",33554432,14,[[0,-397,[5,65,68]],[3,-398,9]],[1,0,16.679,0]],[1,"Label",33554432,62,[[0,-399,[5,0,50.4]],[31,"",30,30,true,-400]],[1,0,6.345,0]],[8,"3",33554432,15,[[0,-401,[5,34,35]],[4,0,-402,13]],[1,0,11.675,0],[1,2,2,1]],[1,"Label",33554432,63,[[0,-403,[5,0,50.4]],[31,"",30,30,true,-404]],[1,0,6.345,0]],[22,"animation",false,33554432,3,[[29,-405,[5,199.1199951171875,130.130005],[0,0,0]],[124,"default","<None>",0,false,-406,18]],[1,-194,-560,0]],[13,"bg1",33554432,16,[[0,-407,[5,286,102]],[3,-408,19]]],[1,"clock",33554432,16,[[0,-409,[5,51,60]],[3,-410,20]],[1,-85.534,0,0]],[1,"Label",33554432,16,[[0,-411,[5,80.05859375,75.6]],[118,"8:00",40,60,true,-412]],[1,23.387,0,0]],[25,"spriteFrame",33554432,39,[[0,-413,[5,71,36]],[55,-414]],[1,2.2,2.2,1]],[8,"coin",33554432,39,[[0,-415,[5,111,111]],[4,0,-416,21]],[1,-44.146,0,0],[1,0.7,0.7,1]],[1,"Label",33554432,39,[[0,-417,[5,150,75.6]],[24,"0",0,55,55,60,1,true,-418,[4,4278190080]]],[1,83.975,0,0]],[25,"spriteFrame",33554432,40,[[0,-419,[5,71,36]],[55,-420]],[1,2.2,2.2,1]],[8,"coin",33554432,40,[[0,-421,[5,111,111]],[4,0,-422,22]],[1,-44.146,0,0],[1,0.7,0.7,1]],[1,"Label",33554432,40,[[0,-423,[5,150,75.6]],[24,"0",0,50,50,60,1,true,-424,[4,4278190080]]],[1,83.975,0,0]],[78,"tokenani",false,33554432,3,[[29,-425,[5,708.030029296875,438.79998779296875],[0,0.3008064445219133,0.4853691924622971]],[125,"default","feichu",false,0,false,-426,23]],[1,0.8,0.8,0.8]],[22,"desc",false,33554432,4,[[0,-427,[5,500,112.99999999999999]],[119,"The level has been completed by 20%",44.63625154130703,50,3,true,-428]],[1,0,455.215,0]],[13,"Label",33554432,65,[[0,-429,[5,155.625,50.4]],[63,"Remove",40,true,-430]]],[25,"icon",33554432,67,[[0,-431,[5,63,76]],[3,-432,28]],[1,1.5,1.5,1]],[1,"Label",33554432,4,[[0,-433,[5,450,130.39999999999998]],[120,"Remove 3 objects from the grid and place them in the temporary storage.",35,35,3,true,-434,[4,4281479784]]],[1,0,-100,0]],[18,"Label",512,33554432,10,[[0,-435,[5,200,100]],[40,"Get props",40,1,false,true,-436]],[1,27.339,0,0]],[8,"Vector",33554432,10,[[0,-437,[5,27,29]],[3,-438,30]],[1,-103.537,0,0],[1,2,2,1]],[13,"Label",33554432,69,[[0,-439,[5,117.8515625,50.4]],[63,"Pause",40,true,-440]]],[18,"Label",512,33554432,18,[[0,-441,[5,200,100]],[40,"CONTINUE",40,1,false,true,-442]],[1,0,6.634,0]],[18,"Label",512,33554432,19,[[0,-443,[5,200,100]],[40,"GIVE UP",40,1,false,true,-444]],[1,0,3.981,0]],[8,"Sprite",33554432,72,[[0,-445,[5,192,192]],[4,2,-446,45]],[1,0,30,0],[1,0.3,0.3,1]],[53,"Checkmark",33554432,20,[[[0,-447,[5,59,47]],-448],4,1]],[8,"Sprite",33554432,73,[[0,-449,[5,207,207]],[4,2,-450,48]],[1,-114.647,-52.247,0],[1,0.3,0.3,1]],[53,"Checkmark",33554432,21,[[[0,-451,[5,59,47]],-452],4,1]],[13,"Label",33554432,23,[[0,-453,[5,500,75.6]],[121,"TIMES UP",60,60,60,3,true,-454]]],[1,"time",33554432,23,[[0,-455,[5,120,132]],[3,-456,53]],[1,-250.783,14.249000000000024,0]],[1,"Vector",33554432,23,[[0,-457,[5,35,63]],[3,-458,54]],[1,276.432,76.945,0]],[1,"Label",33554432,44,[[0,-459,[5,144.53125,126]],[41,"0%",100,100,100,true,-460,[4,4278190080]]],[1,0,164.128,0]],[1,"usdc",33554432,24,[[0,-461,[5,111,111]],[4,0,-462,58]],[1,-69.998,0,0]],[22,"Label",false,33554432,24,[[0,-463,[5,80,50.4]],[64,"20",0,50,50,3,true,-464]],[1,69.859,23.545,0]],[1,"Label1",33554432,24,[[0,-465,[5,150,75.6]],[24,"0",0,55,55,60,3,true,-466,[4,4278190080]]],[1,64.778,0,0]],[1,"usdc",33554432,25,[[0,-467,[5,111,111]],[4,0,-468,59]],[1,-69.998,0,0]],[22,"Label",false,33554432,25,[[0,-469,[5,80,50.4]],[32,"20",0,50,50,3,true,-470,[4,4278190080]]],[1,86.934,20.598,0]],[1,"Label1",33554432,25,[[0,-471,[5,150,75.6]],[24,"0",0,55,55,60,3,true,-472,[4,4278190080]]],[1,68.692,0,0]],[18,"Label",512,33554432,26,[[0,-473,[5,300,100]],[26,"REVIVE",45,45,1,false,true,-474]],[1,0,6.634,0]],[18,"Label",512,33554432,27,[[0,-475,[5,200,100]],[26,"GIVE UP",45,45,1,false,true,-476]],[1,0,3.981,0]],[1,"Label",33554432,77,[[0,-477,[5,460,101.69999999999999]],[122,"Finish The Game To Earn Your Rewards",0,45,45,45,3,true,-478]],[1,14.455,5.782,0]],[1,"Label",33554432,48,[[0,-479,[5,144.53125,126]],[41,"0%",100,100,100,true,-480,[4,4278190080]]],[1,0,164.128,0]],[1,"usdc",33554432,28,[[0,-481,[5,111,111]],[4,0,-482,68]],[1,-69.998,0,0]],[22,"Label",false,33554432,28,[[0,-483,[5,80,50.4]],[64,"20",0,50,50,3,true,-484]],[1,69.859,23.545,0]],[1,"Label1",33554432,28,[[0,-485,[5,150,75.6]],[24,"0",0,55,55,60,3,true,-486,[4,4278190080]]],[1,69.066,0,0]],[1,"usdc",33554432,29,[[0,-487,[5,111,111]],[4,0,-488,69]],[1,-69.998,0,0]],[22,"Label",false,33554432,29,[[0,-489,[5,80,50.4]],[32,"20",0,50,50,3,true,-490,[4,4278190080]]],[1,86.934,20.598,0]],[1,"Label1",33554432,29,[[0,-491,[5,150,75.6]],[24,"0",0,55,55,60,3,true,-492,[4,4278190080]]],[1,67.62,0,0]],[18,"Label",512,33554432,30,[[0,-493,[5,300,100]],[26,"REVIVE",45,45,1,false,true,-494]],[1,0,6.634,0]],[18,"Label",512,33554432,31,[[0,-495,[5,200,100]],[26,"GIVE UP",45,45,1,false,true,-496]],[1,0,3.981,0]],[1,"coin",33554432,50,[[0,-497,[5,60,60]],[3,-498,74]],[1,-80.951,0,0]],[1,"Label",33554432,50,[[0,-499,[5,30.58837890625,69.3]],[33,"0",55,55,55,true,-500]],[1,23.705,0,0]],[1,"coin",33554432,51,[[0,-501,[5,60,60]],[3,-502,76]],[1,-80.951,0,0]],[1,"Label",33554432,51,[[0,-503,[5,30.58837890625,69.3]],[33,"0",55,55,55,true,-504]],[1,23.705,0,0]],[13,"win",33554432,12,[[0,-505,[5,603,579]],[4,0,-506,79]]],[1,"Label",33554432,12,[[0,-507,[5,285.3271484375,94.5]],[41,"VICTORY",65,65,75,true,-508,[4,4280048341]]],[1,0,169.222,0]],[8,"usdc",33554432,52,[[0,-509,[5,111,111]],[4,0,-510,80]],[1,-42.43,0,0],[1,0.7,0.7,1]],[1,"Label",33554432,52,[[0,-511,[5,80,50.4]],[32,"0",0,50,50,3,true,-512,[4,4278190080]]],[1,47.927,4.201,0]],[8,"usdc",33554432,53,[[0,-513,[5,111,111]],[4,0,-514,81]],[1,-49.414,0,0],[1,0.7,0.7,1]],[1,"Label",33554432,53,[[0,-515,[5,80,50.4]],[32,"0",0,50,50,3,true,-516,[4,4278190080]]],[1,52.95,4.201,0]],[79,"Label",512,33554432,32,[[0,-517,[5,300,100]],[26,"NEXT",45,45,1,false,true,-518]]],[1,"coin",33554432,54,[[0,-519,[5,60,60]],[3,-520,84]],[1,-80.951,0,0]],[1,"Label",33554432,54,[[0,-521,[5,30.58837890625,69.3]],[33,"0",55,55,55,true,-522]],[1,23.705,0,0]],[1,"coin",33554432,55,[[0,-523,[5,60,60]],[3,-524,86]],[1,-80.951,0,0]],[1,"Label",33554432,55,[[0,-525,[5,30.58837890625,69.3]],[33,"0",55,55,55,true,-526]],[1,23.705,0,0]],[25,"bg",33554432,8,[[0,-527,[5,807,482]],[4,0,-528,88]],[1,0.9,0.9,1]],[1,"time",33554432,8,[[0,-529,[5,120.087890625,50.4]],[31,"0:30",60,60,true,-530]],[1,0,163.794,0]],[8,"btn1",33554432,33,[[0,-531,[5,142,72]],[3,-532,89]],[1,5.854,0,0],[1,1.2,1.2,1]],[8,"core",33554432,33,[[0,-533,[5,144,144]],[3,-534,90]],[1,-74.598,0,0],[1,0.6,0.6,1]],[1,"Label",33554432,33,[[0,-535,[5,55.615234375,63]],[123,"00",50,50,50,true,true,-536,[0,2,-2]]],[1,26.343,-4.391,0]],[25,"1",33554432,56,[[0,-537,[5,144,144]],[3,-538,91]],[1,0.6,0.6,1]],[1,"Label",33554432,56,[[0,-539,[5,102.8076171875,50.4]],[65,"USE",50,50,true,-540,[4,4282744550]]],[1,-98.425,0,0]],[1,"x",33554432,56,[[0,-541,[5,61.1572265625,50.4]],[65,"X1",50,50,true,-542,[4,4282744550]]],[1,88.986,0,0]],[1,"Label",33554432,57,[[0,-543,[5,11.123046875,50.4]],[42,"0",20,20,-544]],[1,-85.368,0,0]],[13,"count",33554432,57,[[0,-545,[5,11.123046875,50.4]],[42,"0",20,20,-546]]],[1,"temp",33554432,57,[[0,-547,[5,11.123046875,50.4]],[42,"0",20,20,-548]],[1,92.053,0,0]],[49,"bottom",2,[-549,-550],[1,0,0,-0.6],[1,1.2,1,1.2]],[80,0,{},177,[103,"74FGXsdUxZmIgmC0YbZvDA",null,null,-553,[126,"3eDQNWYzZHLq5UMAfgaueJ",null,[[127,[30,["26JVbxqRlcn7nVpbIBRBTp"]],[[113,2],[117,127,128]]]],[[66,"yuanzui",["_name"],59],[27,["_lpos"],59,[1,0,14,0]],[27,["_lrot"],59,[3,0,0,0,1]],[27,["_euler"],59,[1,0,0,0]],[27,["_lscale"],59,[1,480,3800,480]],[128,false,["_enabled"],[30,["a7SWzxwlJasZzP5UONFtSg"]]],[27,["_lpos"],-551,[1,0,0,0]],[66,true,["_active"],-552]]],126]],[81,"bottom",false,177,[94,95],[1,-1.151,0,-0.591],[1,100,200,100]],[51,"Main Light","c0y6F5f+pAvI805TdmxIjx",60,[[129,6500,110000,true,2,0.84,501,-554,[130]]],[1,0,64,-0.9379999999999987],[3,-0.7131028734095046,0.013860092450453634,-0.014268603662823086,0.7007771376992019],[1,-91,-0.053,-2.279]],[51,"Main Camera","c9DMICJLFO5IeO07EPon7U",60,[[131,0,2000,14,1822425087,-555]],[1,0,500,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-89.99999999999999,0,0]],[86,"Camera",1,[-556],[1,0,0,1000]],[132,0,1073741824,811,2000,6,41943040,182,[4,4278190080]],[16,2,126],[16,2,128],[56,1,0,43],[56,1,0,47],[10,"Plane",2,[[6,"Plane<ModelComponent>",-557,[94],[98,true],95]],[1,0,-0.2,0],[1,1.2,1,2.6]],[87,"GameSpace",2,[[82,"ItemSource",-558,[1,0,1.4,0]]],[1,0,0,-0.938]],[30,["26JVbxqRlcn7nVpbIBRBTp"]],[10,"Sphere0",5,[[6,"Sphere<ModelComponent>",-559,[137],[5],138]],[1,-0.402,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere1",5,[[6,"Sphere<ModelComponent>",-560,[139],[5],140]],[1,-0.268,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere2",5,[[6,"Sphere<ModelComponent>",-561,[141],[5],142]],[1,-0.137,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere3",5,[[6,"Sphere<ModelComponent>",-562,[143],[5],144]],[1,-0.001,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere4",5,[[6,"Sphere<ModelComponent>",-563,[145],[5],146]],[1,0.132,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere5",5,[[6,"Sphere<ModelComponent>",-564,[147],[5],148]],[1,0.267,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere6",5,[[6,"Sphere<ModelComponent>",-565,[149],[5],150]],[1,0.401,1.324,0.097],[1,0.1,1,0.5]],[10,"Sphere0",35,[[6,"Sphere<ModelComponent>",-566,[153],[5],154]],[1,0.275,1.324,0.097],[1,0.2,1,0.5]],[10,"Sphere1",35,[[6,"Sphere<ModelComponent>",-567,[155],[5],156]],[1,-0.008,1.324,0.097],[1,0.2,1,0.5]],[10,"Sphere2",35,[[6,"Sphere<ModelComponent>",-568,[157],[5],158]],[1,-0.275,1.324,0.097],[1,0.2,1,0.5]]],0,[0,0,1,0,17,183,0,0,1,0,0,1,0,-1,182,0,-2,36,0,-3,3,0,-4,17,0,-5,41,0,-6,22,0,-7,8,0,-8,57,0,0,2,0,-2,188,0,-3,84,0,-4,189,0,-5,85,0,-6,34,0,-7,177,0,-8,5,0,-9,35,0,0,3,0,0,3,0,-1,37,0,-2,9,0,-3,105,0,-4,16,0,-5,38,0,-6,115,0,0,4,0,0,4,0,-1,116,0,-2,65,0,-3,66,0,-4,67,0,-5,119,0,-6,10,0,0,5,0,-1,191,0,-2,192,0,-3,193,0,-4,194,0,-5,195,0,-6,196,0,-7,197,0,0,6,0,0,6,0,-1,69,0,-2,70,0,-3,18,0,-4,19,0,-5,71,0,0,7,0,0,7,0,-1,77,0,-2,46,0,-3,78,0,-4,49,0,-5,79,0,0,8,0,-1,166,0,-2,167,0,-3,33,0,-4,56,0,-5,82,0,-6,83,0,0,9,0,0,9,0,0,9,0,-1,13,0,-2,14,0,-3,15,0,0,10,0,0,10,0,7,10,0,0,10,0,-1,120,0,-2,121,0,0,11,0,0,11,0,-1,23,0,-2,42,0,-3,76,0,-4,45,0,0,12,0,-1,155,0,-2,156,0,-3,80,0,-4,32,0,-5,81,0,0,13,0,0,13,0,0,13,0,-1,99,0,-2,61,0,0,14,0,0,14,0,0,14,0,-1,101,0,-2,62,0,0,15,0,0,15,0,0,15,0,-1,103,0,-2,63,0,0,16,0,0,16,0,-1,106,0,-2,107,0,-3,108,0,0,17,0,0,17,0,0,17,0,-1,64,0,0,18,0,0,18,0,7,18,0,0,18,0,-1,123,0,0,19,0,0,19,0,7,19,0,0,19,0,-1,124,0,0,20,0,0,20,0,11,184,0,7,20,0,0,20,0,-1,126,0,0,21,0,0,21,0,11,185,0,7,21,0,0,21,0,-1,128,0,0,22,0,0,22,0,-1,74,0,-2,75,0,0,23,0,0,23,0,-1,129,0,-2,130,0,-3,131,0,0,24,0,0,24,0,-1,133,0,-2,134,0,-3,135,0,0,25,0,0,25,0,-1,136,0,-2,137,0,-3,138,0,0,26,0,0,26,0,7,26,0,0,26,0,-1,139,0,0,27,0,0,27,0,7,27,0,0,27,0,-1,140,0,0,28,0,0,28,0,-1,143,0,-2,144,0,-3,145,0,0,29,0,0,29,0,-1,146,0,-2,147,0,-3,148,0,0,30,0,0,30,0,7,30,0,0,30,0,-1,149,0,0,31,0,0,31,0,7,31,0,0,31,0,-1,150,0,0,32,0,0,32,0,7,32,0,0,32,0,-1,161,0,0,33,0,0,33,0,-1,168,0,-2,169,0,-3,170,0,-1,86,0,-2,87,0,-3,88,0,-4,89,0,-5,58,0,0,35,0,0,35,0,-1,198,0,-2,199,0,-3,200,0,0,36,0,-1,96,0,-2,97,0,-3,98,0,0,37,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,-1,39,0,-2,40,0,0,39,0,-1,109,0,-2,110,0,-3,111,0,0,40,0,-1,112,0,-2,113,0,-3,114,0,0,41,0,0,41,0,-1,68,0,0,42,0,0,42,0,12,186,0,0,42,0,-1,43,0,0,43,0,-2,186,0,-1,44,0,0,44,0,0,44,0,0,44,0,-1,132,0,0,45,0,0,45,0,0,46,0,0,46,0,12,187,0,0,46,0,-1,47,0,0,47,0,-2,187,0,-1,48,0,0,48,0,0,48,0,0,48,0,-1,142,0,0,49,0,0,49,0,0,50,0,0,50,0,-1,151,0,-2,152,0,0,51,0,0,51,0,-1,153,0,-2,154,0,0,52,0,0,52,0,-1,157,0,-2,158,0,0,53,0,0,53,0,-1,159,0,-2,160,0,0,54,0,0,54,0,-1,162,0,-2,163,0,0,55,0,0,55,0,-1,164,0,-2,165,0,0,56,0,-1,171,0,-2,172,0,-3,173,0,0,57,0,-1,174,0,-2,175,0,-3,176,0,-1,90,0,-2,91,0,-3,92,0,-4,93,0,-1,178,0,-1,180,0,-2,181,0,0,61,0,0,61,0,-1,100,0,0,62,0,0,62,0,-1,102,0,0,63,0,0,63,0,-1,104,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,-1,117,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,-1,118,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,-1,122,0,0,70,0,0,70,0,0,70,0,0,71,0,-1,72,0,-2,73,0,0,72,0,-1,125,0,0,73,0,-1,127,0,0,74,0,0,74,0,0,74,0,0,75,0,0,76,0,0,77,0,0,77,0,-1,141,0,0,78,0,0,79,0,0,80,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,-2,184,0,0,127,0,0,127,0,0,128,0,-2,185,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,0,153,0,0,153,0,0,154,0,0,154,0,0,155,0,0,155,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,0,160,0,0,161,0,0,161,0,0,162,0,0,162,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,0,167,0,0,167,0,0,168,0,0,168,0,0,169,0,0,169,0,0,170,0,0,170,0,0,171,0,0,171,0,0,172,0,0,172,0,0,173,0,0,173,0,0,174,0,0,174,0,0,175,0,0,175,0,0,176,0,0,176,0,-1,178,0,-2,179,0,13,190,0,13,190,0,10,178,0,0,180,0,0,181,0,-1,183,0,0,188,0,4,189,0,0,191,0,0,192,0,0,193,0,0,194,0,0,195,0,0,196,0,0,197,0,0,198,0,0,199,0,0,200,0,18,60,1,4,2,2,4,60,4,4,17,6,4,41,7,4,75,11,4,75,12,4,22,20,4,72,21,4,73,24,4,76,25,4,76,26,4,45,27,4,45,28,4,78,29,4,78,30,4,49,31,4,49,50,4,79,51,4,79,52,4,80,53,4,80,54,4,81,55,4,81,94,4,179,95,4,179,568],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,186,187],[1,1,1,1,5,1,1,1,5,1,1,1,5,1,1,1,5,1,14,1,1,1,1,14,1,1,1,5,1,1,1,1,5,1,19,20,21,1,1,1,5,1,5,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,1,1,1,1,1,5,1,5,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,-1,3,-1,3,6,-1,3,6,-1,3,6,-1,3,6,-1,3,6,-1,3,6,-1,3,6,-1,3,6,-1,3,6,-1,3,6,22,6,3,-1,3,6,3,-1,3,6,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,23,24,25,26,27,28,29,30,31,1,1,1,1],[58,18,18,19,19,16,9,6,6,20,9,6,6,21,9,6,6,59,60,61,62,10,11,22,17,23,12,12,16,63,64,24,24,25,16,20,21,17,23,12,12,4,4,7,7,65,13,13,66,13,13,25,17,67,68,69,26,27,11,10,4,4,7,7,70,71,26,27,11,10,4,4,7,7,28,14,29,14,72,73,11,10,4,4,28,14,29,14,74,75,30,30,76,77,78,3,79,3,0,2,1,80,5,3,0,5,3,0,5,3,0,5,3,0,5,3,0,5,3,0,5,3,0,5,3,0,81,0,31,32,33,0,33,32,34,0,34,2,1,2,1,2,1,2,1,2,1,2,1,2,1,82,35,2,1,2,1,2,1,83,35,36,36,84,9,85,86,22,87,88,89,37,37,38,38]],[[{"name":"hbg","rect":{"x":0,"y":0,"width":222,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":222,"height":62},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-111,-31,0,111,-31,0,-111,31,0,111,31,0],"indexes":[0,1,2,2,1,3],"uv":[0,62,222,62,0,0,222,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-111,"y":-31,"z":0},"maxPos":{"x":111,"y":31,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[90]],[[{"name":"1","rect":{"x":1,"y":0,"width":63,"height":76},"offset":{"x":0.5,"y":0},"originalSize":{"width":64,"height":76},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-31.5,-38,0,31.5,-38,0,-31.5,38,0,31.5,38,0],"indexes":[0,1,2,2,1,3],"uv":[1,76,64,76,1,0,64,0],"nuv":[0.015625,0,1,0,0.015625,1,1,1],"minPos":{"x":-31.5,"y":-38,"z":0},"maxPos":{"x":31.5,"y":38,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[91]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-1,-1,0,1,-1,0,-1,1,0,1,1,0],"indexes":[0,1,2,2,1,3],"uv":[0,2,2,2,0,0,2,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-1,"y":-1,"z":0},"maxPos":{"x":1,"y":1,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[92]],[[{"name":"tost","rect":{"x":0,"y":1,"width":658,"height":420},"offset":{"x":0,"y":-0.5},"originalSize":{"width":658,"height":421},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-329,-210,0,329,-210,0,-329,210,0,329,210,0],"indexes":[0,1,2,2,1,3],"uv":[0,420,658,420,0,0,658,0],"nuv":[0,0,1,0,0,0.997624703087886,1,0.997624703087886],"minPos":{"x":-329,"y":-210,"z":0},"maxPos":{"x":329,"y":210,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[93]],[[{"name":"clock","rect":{"x":14,"y":8,"width":51,"height":60},"offset":{"x":-0.5,"y":0},"originalSize":{"width":80,"height":76},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-25.5,-30,0,25.5,-30,0,-25.5,30,0,25.5,30,0],"indexes":[0,1,2,2,1,3],"uv":[14,68,65,68,14,8,65,8],"nuv":[0.175,0.10526315789473684,0.8125,0.10526315789473684,0.175,0.8947368421052632,0.8125,0.8947368421052632],"minPos":{"x":-25.5,"y":-30,"z":0},"maxPos":{"x":25.5,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[94]],[[{"name":"button","rect":{"x":0,"y":0,"width":82,"height":66},"offset":{"x":0,"y":0},"originalSize":{"width":82,"height":66},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-41,-33,0,41,-33,0,-41,33,0,41,33,0],"indexes":[0,1,2,2,1,3],"uv":[0,66,82,66,0,0,82,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-41,"y":-33,"z":0},"maxPos":{"x":41,"y":33,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[95]],[[{"name":"Vector","rect":{"x":0,"y":0,"width":27,"height":29},"offset":{"x":0,"y":0},"originalSize":{"width":27,"height":29},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-13.5,-14.5,0,13.5,-14.5,0,-13.5,14.5,0,13.5,14.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,29,27,29,0,0,27,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-13.5,"y":-14.5,"z":0},"maxPos":{"x":13.5,"y":14.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[96]],[[{"name":"timeBg","rect":{"x":0,"y":0,"width":516,"height":676},"offset":{"x":0,"y":0},"originalSize":{"width":516,"height":676},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-258,-338,0,258,-338,0,-258,338,0,258,338,0],"indexes":[0,1,2,2,1,3],"uv":[0,676,516,676,0,0,516,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-258,"y":-338,"z":0},"maxPos":{"x":258,"y":338,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[97]],[[{"name":"win","rect":{"x":33,"y":59,"width":602,"height":579},"offset":{"x":9,"y":-29.5},"originalSize":{"width":650,"height":638},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-301,-289.5,0,301,-289.5,0,-301,289.5,0,301,289.5,0],"indexes":[0,1,2,2,1,3],"uv":[33,579,635,579,33,0,635,0],"nuv":[0.05076923076923077,0,0.9769230769230769,0,0.05076923076923077,0.9075235109717869,0.9769230769230769,0.9075235109717869],"minPos":{"x":-301,"y":-289.5,"z":0},"maxPos":{"x":301,"y":289.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[98]],[[{"name":"hui","rect":{"x":0,"y":0,"width":142,"height":72},"offset":{"x":0,"y":0},"originalSize":{"width":142,"height":72},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-71,-36,0,71,-36,0,-71,36,0,71,36,0],"indexes":[0,1,2,2,1,3],"uv":[0,72,142,72,0,0,142,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-71,"y":-36,"z":0},"maxPos":{"x":71,"y":36,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[99]],[[{"name":"1","rect":{"x":0,"y":0,"width":144,"height":144},"offset":{"x":0,"y":0},"originalSize":{"width":144,"height":144},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-72,-72,0,72,-72,0,-72,72,0,72,72,0],"indexes":[0,1,2,2,1,3],"uv":[0,144,144,144,0,0,144,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-72,"y":-72,"z":0},"maxPos":{"x":72,"y":72,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[100]],[[[67,"NFT"],[83,"NFT",[[95,"Cube<ModelComponent>",1,-2,[28,"9bvTGAaQpDt4ErGWHp34Gc"],[0],[5],1],[114,50000,0.9,1,-3,[28,"d3IGFQOE9L6LD7fwpPsJ5m"]],[116,-4,[28,"20DniyYGJHKLbkKtvsZ1hp"],[1,0.0010054856538772583,0,7.450580596923828e-8]],[133,-5,[28,"109raC3GFI14QddzXqOfZ6"]]],[39,"9b5XhNLrtDjZMCHCoq8g25",null,null,null,-1,0],[1,0,1,0],[1,0.7,0.7,0.7]]],0,[0,10,1,0,0,1,0,0,1,0,0,1,0,0,1,0,15,1,5],[0,0],[-1,3],[101,1]],[[[44,"material",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_PBR_MAP":true,"USE_OCCLUSION_MAP":true,"USE_EMISSIVE_MAP":true,"USE_ALPHA_TEST":true},{},{},{},{},{}],[[[{"roughness":0,"metallic":0.46,"specularIntensity":0.428},"mainColor",8,[4,4278190080],"mainTexture",6,0,"pbrMap",6,1,"occlusionMap",6,2,"emissiveMap",6,3],{},{},{},{},{}],11,0,0,0,0,0]]],0,0,[0,0,0,0,0],[9,16,32,33,8],[15,15,15,15,8]],[[{"name":"right","rect":{"x":1,"y":3,"width":57,"height":43},"offset":{"x":0,"y":-1},"originalSize":{"width":59,"height":47},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-28.5,-21.5,0,28.5,-21.5,0,-28.5,21.5,0,28.5,21.5,0],"indexes":[0,1,2,2,1,3],"uv":[1,44,58,44,1,1,58,1],"nuv":[0.01694915254237288,0.02127659574468085,0.9830508474576272,0.02127659574468085,0.01694915254237288,0.9361702127659575,0.9830508474576272,0.9361702127659575],"minPos":{"x":-28.5,"y":-21.5,"z":0},"maxPos":{"x":28.5,"y":21.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[102]],[[{"name":"btn2","rect":{"x":0,"y":0,"width":286,"height":116},"offset":{"x":0,"y":0},"originalSize":{"width":286,"height":116},"rotated":false,"capInsets":[34,26,34,23],"vertices":{"rawPosition":[-143,-58,0,143,-58,0,-143,58,0,143,58,0],"indexes":[0,1,2,2,1,3],"uv":[0,116,286,116,0,0,286,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-143,"y":-58,"z":0},"maxPos":{"x":143,"y":58,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[103]],[[{"name":"close","rect":{"x":0,"y":0,"width":72,"height":76},"offset":{"x":0,"y":0},"originalSize":{"width":72,"height":76},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-36,-38,0,36,-38,0,-36,38,0,36,38,0],"indexes":[0,1,2,2,1,3],"uv":[0,76,72,76,0,0,72,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-36,"y":-38,"z":0},"maxPos":{"x":36,"y":38,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[104]],[[{"name":"time","rect":{"x":0,"y":0,"width":286,"height":102},"offset":{"x":0,"y":0},"originalSize":{"width":286,"height":102},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-143,-51,0,143,-51,0,-143,51,0,143,51,0],"indexes":[0,1,2,2,1,3],"uv":[0,102,286,102,0,0,286,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-143,"y":-51,"z":0},"maxPos":{"x":143,"y":51,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[105]],[[{"name":"red","rect":{"x":1,"y":0,"width":32,"height":33},"offset":{"x":0,"y":0.5},"originalSize":{"width":34,"height":34},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-16,-16.5,0,16,-16.5,0,-16,16.5,0,16,16.5,0],"indexes":[0,1,2,2,1,3],"uv":[1,34,33,34,1,1,33,1],"nuv":[0.029411764705882353,0.029411764705882353,0.9705882352941176,0.029411764705882353,0.029411764705882353,1,0.9705882352941176,1],"minPos":{"x":-16,"y":-16.5,"z":0},"maxPos":{"x":16,"y":16.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[106]],[[[34,"effect_hecheng","\r\neffect_hecheng.png\r\nsize: 520,262\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\n1110\r\n  rotate: false\r\n  xy: 260, 132\r\n  size: 128, 128\r\n  orig: 128, 128\r\n  offset: 0, 0\r\n  index: -1\r\nMMCG_taobao_8\r\n  rotate: false\r\n  xy: 2, 4\r\n  size: 256, 256\r\n  orig: 256, 256\r\n  offset: 0, 0\r\n  index: -1\r\nkt (505)\r\n  rotate: false\r\n  xy: 260, 2\r\n  size: 128, 128\r\n  orig: 128, 128\r\n  offset: 0, 0\r\n  index: -1\r\nshock\r\n  rotate: false\r\n  xy: 390, 132\r\n  size: 128, 128\r\n  orig: 128, 128\r\n  offset: 0, 0\r\n  index: -1\r\n",["effect_hecheng.png"],{"skeleton":{"hash":"K0AQeB7U3aVjpmz9cnT6/hKRer4","spine":"3.6.53","width":199.12,"height":130.13},"bones":[{"name":"root"},{"name":"1110","parent":"root","rotation":-47.66,"x":12.66,"y":11.53,"scaleX":0.094,"scaleY":0.488},{"name":"1111","parent":"root","rotation":55.36,"x":12.89,"y":-5.63,"scaleX":0.094,"scaleY":0.425},{"name":"1112","parent":"root","rotation":10.9,"x":-1.36,"y":11.92,"scaleX":0.094,"scaleY":0.535},{"name":"1113","parent":"root","rotation":-10.83,"x":3.78,"y":9.2,"scaleX":0.094,"scaleY":0.488},{"name":"1114","parent":"root","rotation":91.27,"x":-7.72,"y":-1.97,"scaleX":0.084,"scaleY":0.488},{"name":"1115","parent":"root","rotation":172.4,"x":-0.59,"y":0.06,"scaleX":0.094,"scaleY":0.488},{"name":"1116","parent":"root","rotation":-88.57,"x":10.43,"y":2.59,"scaleX":0.094,"scaleY":0.537},{"name":"MMCG_taobao_8","parent":"root","scaleY":0.431},{"name":"MMCG_taobao_9","parent":"root","scaleY":0.431},{"name":"l03","parent":"root"},{"name":"l3","parent":"root"},{"name":"shock","parent":"root"}],"slots":[{"name":"shock","bone":"shock","color":"ebbc72ff","attachment":"shock","blend":"additive"},{"name":"MMCG_taobao_8","bone":"MMCG_taobao_8","color":"fabb5eff","attachment":"MMCG_taobao_8","blend":"additive"},{"name":"MMCG_taobao_9","bone":"MMCG_taobao_9","color":"fabb5eff","attachment":"MMCG_taobao_8","blend":"additive"},{"name":"l03","bone":"l03","color":"fff8c5ff","attachment":"kt (505)","blend":"additive"},{"name":"l3","bone":"l3","color":"fff8c5ff","attachment":"kt (505)","blend":"additive"},{"name":"1110","bone":"1110","color":"f9b76eff","attachment":"1110","blend":"additive"},{"name":"1116","bone":"1116","color":"f9b76eff","attachment":"1110","blend":"additive"},{"name":"1112","bone":"1112","color":"f9b76eff","attachment":"1110","blend":"additive"},{"name":"1113","bone":"1113","color":"f9b76eff","attachment":"1110","blend":"additive"},{"name":"1114","bone":"1114","color":"f9b76eff","attachment":"1110","blend":"additive"},{"name":"1115","bone":"1115","color":"f9b76eff","attachment":"1110","blend":"additive"},{"name":"1111","bone":"1111","color":"f9b76eff","attachment":"1110","blend":"additive"}],"skins":{"default":{"1110":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"1111":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"1112":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"1113":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"1114":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"1115":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"1116":{"1110":{"x":-0.07,"y":1.74,"width":128,"height":128}},"MMCG_taobao_8":{"MMCG_taobao_8":{"scaleX":0.778,"scaleY":0.778,"width":256,"height":256}},"MMCG_taobao_9":{"MMCG_taobao_8":{"scaleX":0.778,"scaleY":0.778,"width":256,"height":256}},"l03":{"kt (505)":{"x":1.06,"y":2.13,"width":128,"height":128}},"l3":{"kt (505)":{"x":1.06,"y":2.13,"width":128,"height":128}},"shock":{"shock":{"width":128,"height":128}}}},"animations":{"effect":{"slots":{"1110":{"color":[{"time":0.2667,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.0667,"name":"1110"}]},"1111":{"color":[{"time":0.3667,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.4333,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.2,"name":"1110"}]},"1112":{"color":[{"time":0.2667,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.0667,"name":"1110"}]},"1113":{"color":[{"time":0.4,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.4667,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.2,"name":"1110"}]},"1114":{"color":[{"time":0.3333,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.4,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.1667,"name":"1110"}]},"1115":{"color":[{"time":0.2667,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.0667,"name":"1110"}]},"1116":{"color":[{"time":0.3,"color":"f9b76eff","curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"color":"f9b66d00"}],"attachment":[{"time":0,"name":null},{"time":0.1,"name":"1110"}]},"MMCG_taobao_8":{"attachment":[{"time":0.1,"name":null}]},"MMCG_taobao_9":{"attachment":[{"time":0.1,"name":null}]},"l03":{"color":[{"time":0.1,"color":"fff8c5ff","curve":"stepped"},{"time":0.2,"color":"fff8c5ff","curve":[0.396,0.57,0.632,0.89]},{"time":0.3,"color":"fff8c500"}],"attachment":[{"time":0,"name":null},{"time":0.1,"name":"kt (505)"}]},"l3":{"color":[{"time":0.1333,"color":"fff8c5ff","curve":"stepped"},{"time":0.2,"color":"fff8c5ff","curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"color":"fff8c500"}],"attachment":[{"time":0,"name":null},{"time":0.1333,"name":"kt (505)"}]},"shock":{"color":[{"time":0.3,"color":"ebbc72ff","curve":[0.396,0.57,0.632,0.89]},{"time":0.6,"color":"ebbc7200"}],"attachment":[{"time":0,"name":null},{"time":0.1333,"name":"shock"}]}},"bones":{"1110":{"translate":[{"time":0.0667,"x":-17.53,"y":-15.98,"curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"x":52.62,"y":47.95}],"scale":[{"time":0.0667,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.2667,"x":1.077,"y":1.571}]},"1111":{"translate":[{"time":0.2,"x":0,"y":0,"curve":[0.396,0.57,0.632,0.89]},{"time":0.4333,"x":54.14,"y":-27.55}],"scale":[{"time":0.2,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.3667,"x":1.077,"y":1.571}]},"1112":{"translate":[{"time":0.0667,"x":2.63,"y":-13.64,"curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"x":-9.08,"y":47.16}],"scale":[{"time":0.0667,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.2667,"x":1.077,"y":1.571}]},"1113":{"translate":[{"time":0.2,"x":0,"y":0,"curve":[0.396,0.57,0.632,0.89]},{"time":0.4667,"x":13.95,"y":72.9}],"scale":[{"time":0.2,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.4,"x":1.077,"y":1.571}]},"1114":{"translate":[{"time":0.1667,"x":0,"y":0,"curve":[0.396,0.57,0.632,0.89]},{"time":0.4,"x":-82.19,"y":-1.82}],"scale":[{"time":0.1667,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.3333,"x":1.077,"y":1.571}]},"1115":{"translate":[{"time":0.0667,"x":-1.11,"y":-8.3,"curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"x":-8.97,"y":-67.21}],"scale":[{"time":0.0667,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.2667,"x":1.077,"y":1.571}]},"1116":{"translate":[{"time":0.1,"x":0,"y":0,"curve":[0.396,0.57,0.632,0.89]},{"time":0.3333,"x":45.9,"y":1.15}],"scale":[{"time":0.1,"x":1,"y":1,"curve":[0.25,0,0.709,0.45]},{"time":0.3,"x":1.077,"y":1.571}]},"shock":{"scale":[{"time":0.1333,"x":0.242,"y":0.242,"curve":[0.396,0.57,0.632,0.89]},{"time":0.3,"x":1,"y":1,"curve":[0.396,0.57,0.632,0.89]},{"time":0.5333,"x":1.103,"y":1.103}]},"MMCG_taobao_8":{"translate":[{"time":0,"x":231.17,"y":0,"curve":[0.373,0.53,0.75,1]},{"time":0.1,"x":0,"y":0}],"scale":[{"time":0,"x":1,"y":1,"curve":[0.373,0.53,0.75,1]},{"time":0.1,"x":0.813,"y":1}]},"l03":{"scale":[{"time":0.1,"x":0.815,"y":0.815,"curve":[0.396,0.57,0.632,0.89]},{"time":0.2,"x":1.71,"y":1.71,"curve":[0.396,0.57,0.632,0.89]},{"time":0.2333,"x":1.911,"y":1.911}]},"MMCG_taobao_9":{"translate":[{"time":0,"x":-236.96,"y":0,"curve":[0.373,0.53,0.75,1]},{"time":0.1,"x":0,"y":0}],"scale":[{"time":0,"x":1,"y":1,"curve":[0.373,0.53,0.75,1]},{"time":0.1,"x":0.813,"y":1}]},"l3":{"scale":[{"time":0.1333,"x":0.815,"y":0.815,"curve":[0.396,0.57,0.632,0.89]},{"time":0.2,"x":1.71,"y":1.71,"curve":[0.396,0.57,0.632,0.89]},{"time":0.2667,"x":1.911,"y":1.911}]}}}}},[0]]],0,0,[0],[-1],[107]],[[[43,1,1,1]],0,0,[],[],[]],[[{"name":"hd1","rect":{"x":0,"y":0,"width":500,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":500,"height":92},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-250,-46,0,250,-46,0,-250,46,0,250,46,0],"indexes":[0,1,2,2,1,3],"uv":[0,92,500,92,0,0,500,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-250,"y":-46,"z":0},"maxPos":{"x":250,"y":46,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[108]],[[[34,"yellow","\nyellow.png\nsize: 824,233\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nblue_star\n  rotate: true\n  xy: 543, 18\n  size: 49, 47\n  orig: 54, 52\n  offset: 3, 3\n  index: -1\neffect_coin_1\n  rotate: false\n  xy: 592, 7\n  size: 76, 76\n  orig: 76, 76\n  offset: 0, 0\n  index: -1\neffect_coin_2\n  rotate: false\n  xy: 744, 33\n  size: 72, 76\n  orig: 72, 76\n  offset: 0, 0\n  index: -1\neffect_coin_3\n  rotate: true\n  xy: 229, 8\n  size: 53, 76\n  orig: 53, 76\n  offset: 0, 0\n  index: -1\neffect_coin_4\n  rotate: true\n  xy: 385, 29\n  size: 32, 77\n  orig: 32, 78\n  offset: 0, 1\n  index: -1\neffect_coin_5\n  rotate: true\n  xy: 464, 2\n  size: 31, 76\n  orig: 31, 76\n  offset: 0, 0\n  index: -1\neffect_coin_6\n  rotate: true\n  xy: 464, 35\n  size: 32, 77\n  orig: 32, 78\n  offset: 0, 1\n  index: -1\neffect_coin_7\n  rotate: true\n  xy: 307, 8\n  size: 53, 76\n  orig: 53, 78\n  offset: 0, 2\n  index: -1\neffect_coin_8\n  rotate: false\n  xy: 670, 6\n  size: 72, 77\n  orig: 72, 78\n  offset: 0, 1\n  index: -1\njbb122\n  rotate: false\n  xy: 562, 85\n  size: 146, 146\n  orig: 152, 152\n  offset: 3, 5\n  index: -1\njbb122a_00000\n  rotate: false\n  xy: 229, 63\n  size: 168, 168\n  orig: 350, 350\n  offset: 91, 94\n  index: -1\nwjx01\n  rotate: true\n  xy: 710, 111\n  size: 120, 112\n  orig: 120, 112\n  offset: 0, 0\n  index: -1\nww1_00000\n  rotate: false\n  xy: 2, 4\n  size: 225, 227\n  orig: 350, 350\n  offset: 64, 63\n  index: -1\nww2_00000\n  rotate: true\n  xy: 399, 69\n  size: 162, 161\n  orig: 350, 350\n  offset: 95, 98\n  index: -1\n",["yellow.png"],{"skeleton":{"hash":"SVywxUY96Ji1W7EVDQ/FL2ciZ88","spine":"3.8.75","x":-212.98,"y":-212.98,"width":708.03,"height":438.8,"images":"","audio":"E:/外包/sp081/sp081/动画源文件"},"bones":[{"name":"root"},{"name":"zt551","parent":"root"},{"name":"zt22","parent":"zt551","rotation":178.77},{"name":"bn1","parent":"zt22","x":-8.26,"y":-13.57,"scaleX":0.179,"scaleY":0.179},{"name":"bn2","parent":"zt22","x":7.72,"y":-18.38,"scaleX":0.498,"scaleY":0.498},{"name":"bn3","parent":"zt22","x":3.11,"y":-2.55,"scaleX":0.328,"scaleY":0.328},{"name":"bn4","parent":"zt22","rotation":-8.1,"x":-1.93,"y":-37.98,"scaleX":0.498,"scaleY":0.498},{"name":"bn5","parent":"zt22","rotation":-8.1,"x":-15.15,"y":-33.37,"scaleX":0.498,"scaleY":0.498},{"name":"bn6","parent":"zt22","rotation":-8.1,"x":6.29,"y":-46.96,"scaleX":0.498,"scaleY":0.498},{"name":"bn7","parent":"zt22","rotation":-8.1,"x":-26.92,"y":-53.29,"scaleX":0.498,"scaleY":0.498},{"name":"bn8","parent":"zt22","rotation":-8.1,"x":-16.54,"y":-78.25,"scaleX":0.498,"scaleY":0.498},{"name":"bn9","parent":"zt22","rotation":-8.1,"x":-44.68,"y":-72.94,"scaleX":0.498,"scaleY":0.498},{"name":"bn10","parent":"zt22","rotation":-8.1,"x":-31.02,"y":-96.53,"scaleX":0.498,"scaleY":0.498},{"name":"bn11","parent":"zt22","rotation":-8.1,"x":-70.78,"y":-81.54,"scaleX":0.498,"scaleY":0.498},{"name":"bn12","parent":"zt22","rotation":-8.1,"x":-62.92,"y":-112.37,"scaleX":0.498,"scaleY":0.498},{"name":"bn13","parent":"zt22","rotation":-8.1,"x":-91.16,"y":-105.01,"scaleX":0.498,"scaleY":0.498},{"name":"bn14","parent":"zt22","rotation":-8.1,"x":-84.44,"y":-127.09,"scaleX":0.498,"scaleY":0.498},{"name":"bn15","parent":"zt22","rotation":-8.1,"x":-110.04,"y":-109.12,"scaleX":0.498,"scaleY":0.498},{"name":"bn16","parent":"zt22","rotation":-8.1,"x":-125.36,"y":-136.48,"scaleX":0.498,"scaleY":0.498},{"name":"bn17","parent":"zt22","rotation":-8.1,"x":-152.21,"y":-118.31,"scaleX":0.498,"scaleY":0.498},{"name":"bn18","parent":"zt22","rotation":-8.1,"x":-161.04,"y":-148.06,"scaleX":0.498,"scaleY":0.498},{"name":"bn19","parent":"zt22","rotation":-8.1,"x":-191.57,"y":-127.78,"scaleX":0.498,"scaleY":0.498},{"name":"bn20","parent":"zt22","rotation":-8.1,"x":-200.14,"y":-149.07,"scaleX":0.498,"scaleY":0.498},{"name":"bn21","parent":"zt22","rotation":-8.1,"x":-222.94,"y":-134.81,"scaleX":0.498,"scaleY":0.498},{"name":"bn22","parent":"zt22","rotation":-8.1,"x":-243.79,"y":-126.91,"scaleX":0.498,"scaleY":0.498},{"name":"bn23","parent":"zt22","rotation":-8.1,"x":-247.79,"y":-164.35,"scaleX":0.498,"scaleY":0.498},{"name":"bn24","parent":"zt22","rotation":-8.1,"x":-277.47,"y":-133.26,"scaleX":0.498,"scaleY":0.498},{"name":"bn25","parent":"zt22","rotation":-8.1,"x":-283.44,"y":-151.61,"scaleX":0.498,"scaleY":0.498},{"name":"bn26","parent":"zt22","rotation":-8.1,"x":-310.42,"y":-134.83,"scaleX":0.498,"scaleY":0.498},{"name":"bn27","parent":"zt22","rotation":-8.1,"x":-330.25,"y":-150.47,"scaleX":0.498,"scaleY":0.498},{"name":"bn28","parent":"zt22","rotation":-8.1,"x":-368.45,"y":-140.16,"scaleX":0.498,"scaleY":0.498},{"name":"bn29","parent":"zt22","rotation":-8.1,"x":-380.63,"y":-155.45,"scaleX":0.498,"scaleY":0.498},{"name":"bn30","parent":"zt22","rotation":-8.1,"x":-407.29,"y":-151.44,"scaleX":0.498,"scaleY":0.498},{"name":"bn31","parent":"zt22","rotation":-8.1,"x":-405.73,"y":-169.83,"scaleX":0.498,"scaleY":0.498},{"name":"bn32","parent":"zt22","rotation":-8.1,"x":-432.88,"y":-165.56,"scaleX":0.498,"scaleY":0.498},{"name":"bn33","parent":"zt22","rotation":-8.1,"x":-427.51,"y":-181.14,"scaleX":0.498,"scaleY":0.498},{"name":"bn34","parent":"zt22","rotation":-8.1,"x":-453.56,"y":-167.42,"scaleX":0.498,"scaleY":0.498},{"name":"bn35","parent":"zt22","rotation":-8.1,"x":-441.35,"y":-188.95,"scaleX":0.498,"scaleY":0.498},{"name":"bn36","parent":"zt22","rotation":-8.1,"x":-467.34,"y":-180.83,"scaleX":0.498,"scaleY":0.498},{"name":"bn37","parent":"zt22","rotation":-8.1,"x":-453.33,"y":-204.55,"scaleX":0.498,"scaleY":0.498},{"name":"bn38","parent":"zt22","rotation":-8.1,"x":-475.35,"y":-206.87,"scaleX":0.498,"scaleY":0.498},{"name":"bn39","parent":"zt22","rotation":-8.1,"x":-458.1,"y":-220.76,"scaleX":0.498,"scaleY":0.498},{"name":"zt1","parent":"zt551"},{"name":"bone5","parent":"zt1"},{"name":"bone7","parent":"zt1"},{"name":"bone8","parent":"zt1","scaleX":1.217,"scaleY":1.217},{"name":"bone9","parent":"zt1","scaleX":1.068,"scaleY":1.068},{"name":"bone11","parent":"zt551"},{"name":"bone12","parent":"zt551","scaleX":0.87,"scaleY":0.87},{"name":"bone13","parent":"zt551","scaleX":0.74,"scaleY":0.74},{"name":"d1","parent":"zt1","x":-91.79,"y":-29.48},{"name":"d2","parent":"zt1","rotation":-9.12,"x":-48.7,"y":-74.97,"scaleX":0.715,"scaleY":0.715},{"name":"d5","parent":"zt1","rotation":-62.41,"x":79.78,"y":-63.8,"scaleX":0.627,"scaleY":0.627},{"name":"d7","parent":"zt1","rotation":-87.07,"x":71,"y":56.7,"scaleX":0.709,"scaleY":0.709},{"name":"d8","parent":"zt1","rotation":-109.48,"x":22.32,"y":-85.34,"scaleX":0.799,"scaleY":0.799},{"name":"d9","parent":"zt1","rotation":-133.13,"x":-83.81,"y":40.74,"scaleX":0.6,"scaleY":0.6},{"name":"d10","parent":"zt1","rotation":-162.96,"x":101.33,"y":53.51,"scaleX":0.747,"scaleY":0.747},{"name":"d11","parent":"zt1","rotation":178.04,"x":98.93,"y":-15.12,"scaleX":0.788,"scaleY":0.788},{"name":"d13","parent":"zt1","rotation":155.57,"x":-86.2,"y":-54.22,"scaleX":0.424,"scaleY":0.424},{"name":"d14","parent":"zt1","rotation":133.95,"x":6.36,"y":95.01,"scaleX":0.752,"scaleY":0.752},{"name":"d16","parent":"zt1","rotation":133.95,"x":111.7,"y":-38.26,"scaleX":0.507,"scaleY":0.507},{"name":"d19","parent":"zt1","rotation":73.23,"x":-113.34,"y":32.76,"scaleX":0.779,"scaleY":0.779},{"name":"d20","parent":"zt1","rotation":91.09,"x":43.07,"y":-114.07,"scaleX":0.732,"scaleY":0.732},{"name":"tq2","parent":"zt1","x":-46.3,"y":27.97,"scaleX":0.628,"scaleY":0.628},{"name":"tq3","parent":"zt1","x":62.22,"y":63.88,"scaleX":0.613,"scaleY":0.613},{"name":"tq5","parent":"zt1","x":-13.59,"y":94.21,"scaleX":0.489,"scaleY":0.489},{"name":"tq8","parent":"zt1","x":19.13,"y":64.68,"scaleX":0.58,"scaleY":0.58},{"name":"tq9","parent":"zt1","x":52.65,"y":-14.32,"scaleX":0.635,"scaleY":0.635},{"name":"tq10","parent":"zt1","x":-73.44,"y":-77.36,"scaleX":0.421,"scaleY":0.421},{"name":"tq12","parent":"zt1","rotation":-107.17,"x":-69.45,"y":78.25,"scaleX":0.402,"scaleY":0.402},{"name":"tq13","parent":"zt1","rotation":-84.83,"x":-98.17,"y":18.4,"scaleX":0.569,"scaleY":0.569},{"name":"tq17","parent":"zt1","x":-6.4,"y":-3.15,"scaleX":0.674,"scaleY":0.674},{"name":"tq18","parent":"zt1","rotation":16.07,"x":31.1,"y":16,"scaleX":0.635,"scaleY":0.635},{"name":"tq19","parent":"zt1","rotation":-17.82,"x":-3.21,"y":-51.03,"scaleX":0.735,"scaleY":0.735},{"name":"tq21","parent":"zt1","x":-36.73,"y":-28.68,"scaleX":0.946,"scaleY":0.946},{"name":"tq22","parent":"zt1","rotation":22.93,"x":-3.21,"y":31.17,"scaleX":0.854,"scaleY":0.854},{"name":"tq23","parent":"zt1","rotation":-42.06,"x":36.69,"y":-90.13,"scaleX":0.469,"scaleY":0.469},{"name":"tq25","parent":"zt1","rotation":-171.82,"x":-101.37,"y":61.49,"scaleX":0.463,"scaleY":0.463},{"name":"tq27","parent":"zt1","x":119.68,"y":-27.09,"scaleX":0.948,"scaleY":0.948},{"name":"tq28","parent":"zt1","rotation":16.07,"x":102.92,"y":89.42,"scaleX":1.011,"scaleY":1.011},{"name":"tq29","parent":"zt1","rotation":-42.06,"x":81.38,"y":-93.32,"scaleX":1.012,"scaleY":1.012},{"name":"tq31","parent":"zt1","x":-8,"y":142.89,"scaleX":0.954,"scaleY":0.954},{"name":"tq36","parent":"zt1","x":71,"y":146.08,"scaleX":1.139,"scaleY":1.139},{"name":"tq38","parent":"zt1","x":-150.04,"y":43.14,"scaleX":0.37,"scaleY":0.37},{"name":"x1","parent":"zt1","rotation":12.25,"x":-122.91,"y":-49.43,"scaleX":0.251,"scaleY":0.251},{"name":"x5","parent":"zt1","rotation":40.15,"x":-90.99,"y":53.51,"scaleX":0.206,"scaleY":0.206},{"name":"x6","parent":"zt1","rotation":14.26,"x":106.91,"y":-89.33,"scaleX":0.417,"scaleY":0.417}],"slots":[{"name":"wjx01","bone":"x1","color":"ffffff98","attachment":"wjx01"},{"name":"wjx4","bone":"x5","color":"ffffff98","attachment":"wjx01"},{"name":"wjx5","bone":"x6","color":"ffffff98","attachment":"wjx01"},{"name":"effect_coin_37","bone":"tq36","attachment":"effect_coin_1"},{"name":"effect_coin_29","bone":"tq28","attachment":"effect_coin_7"},{"name":"effect_coin_30","bone":"tq29","attachment":"effect_coin_7"},{"name":"effect_coin_19","bone":"tq18","attachment":"effect_coin_7"},{"name":"jbb123","bone":"bone7","attachment":"jbb122"},{"name":"ww2_00000","bone":"bone8","attachment":"ww2_00000","blend":"additive"},{"name":"ww2_0","bone":"bone9","attachment":"ww2_00000","blend":"additive"},{"name":"effect_coin_39","bone":"tq38","attachment":"effect_coin_1"},{"name":"effect_coin_32","bone":"tq31","attachment":"effect_coin_1"},{"name":"effect_coin_3","bone":"tq2","attachment":"effect_coin_2"},{"name":"effect_coin_22","bone":"tq21","attachment":"effect_coin_2"},{"name":"effect_coin_14","bone":"tq13","attachment":"effect_coin_2"},{"name":"effect_coin_4","bone":"tq3","attachment":"effect_coin_4"},{"name":"effect_coin_28","bone":"tq27","attachment":"effect_coin_8"},{"name":"effect_coin_13","bone":"tq12","attachment":"effect_coin_8"},{"name":"effect_coin_26","bone":"tq25","attachment":"effect_coin_8"},{"name":"effect_coin_6","bone":"tq5","attachment":"effect_coin_5"},{"name":"effect_coin_11","bone":"tq10","attachment":"effect_coin_6"},{"name":"effect_coin_23","bone":"tq22","attachment":"effect_coin_7"},{"name":"effect_coin_24","bone":"tq23","attachment":"effect_coin_7"},{"name":"effect_coin_9","bone":"tq8","attachment":"effect_coin_3"},{"name":"effect_coin_10","bone":"tq9","attachment":"effect_coin_5"},{"name":"effect_coin_18","bone":"tq17","attachment":"effect_coin_6"},{"name":"effect_coin_20","bone":"tq19","attachment":"effect_coin_7"},{"name":"jbb122","bone":"bone5","attachment":"jbb122"},{"name":"bone5","bone":"bone5","attachment":"jbb122a_00000","blend":"additive"},{"name":"bone6","bone":"bone5","attachment":"ww1_00000","blend":"additive"},{"name":"blue_star","bone":"d1","attachment":"blue_star","blend":"additive"},{"name":"blue_star2","bone":"d2","attachment":"blue_star","blend":"additive"},{"name":"blue_star5","bone":"d5","attachment":"blue_star","blend":"additive"},{"name":"blue_star7","bone":"d7","attachment":"blue_star","blend":"additive"},{"name":"blue_star8","bone":"d8","attachment":"blue_star","blend":"additive"},{"name":"blue_star9","bone":"d9","attachment":"blue_star","blend":"additive"},{"name":"blue_star10","bone":"d10","attachment":"blue_star","blend":"additive"},{"name":"blue_star11","bone":"d11","attachment":"blue_star","blend":"additive"},{"name":"blue_star13","bone":"d13","attachment":"blue_star","blend":"additive"},{"name":"blue_star14","bone":"d14","attachment":"blue_star","blend":"additive"},{"name":"blue_star16","bone":"d16","attachment":"blue_star","blend":"additive"},{"name":"blue_star19","bone":"d19","attachment":"blue_star","blend":"additive"},{"name":"blue_star20","bone":"d20","attachment":"blue_star","blend":"additive"},{"name":"effect_coin_1","bone":"bone11"},{"name":"effect_coin_48","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_56","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_41","bone":"bone11"},{"name":"effect_coin_49","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_57","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_42","bone":"bone11"},{"name":"effect_coin_50","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_58","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_43","bone":"bone11"},{"name":"effect_coin_51","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_59","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_44","bone":"bone11"},{"name":"effect_coin_52","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_60","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_45","bone":"bone11"},{"name":"effect_coin_53","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_61","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_46","bone":"bone11"},{"name":"effect_coin_54","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_62","bone":"bone13","color":"ffffff76"},{"name":"effect_coin_47","bone":"bone11"},{"name":"effect_coin_55","bone":"bone12","color":"ffffffa3"},{"name":"effect_coin_63","bone":"bone13","color":"ffffff76"},{"name":"blue_star18","bone":"bn1","attachment":"blue_star","blend":"additive"},{"name":"blue_star21","bone":"bn2","attachment":"blue_star","blend":"additive"},{"name":"blue_star22","bone":"bn3","attachment":"blue_star","blend":"additive"},{"name":"blue_star23","bone":"bn4","attachment":"blue_star","blend":"additive"},{"name":"blue_star24","bone":"bn5","attachment":"blue_star","blend":"additive"},{"name":"blue_star25","bone":"bn6","attachment":"blue_star","blend":"additive"},{"name":"blue_star26","bone":"bn7","attachment":"blue_star","blend":"additive"},{"name":"blue_star27","bone":"bn8","attachment":"blue_star","blend":"additive"},{"name":"blue_star28","bone":"bn9","attachment":"blue_star","blend":"additive"},{"name":"blue_star29","bone":"bn10","attachment":"blue_star","blend":"additive"},{"name":"blue_star30","bone":"bn11","attachment":"blue_star","blend":"additive"},{"name":"blue_star31","bone":"bn12","attachment":"blue_star","blend":"additive"},{"name":"blue_star32","bone":"bn13","attachment":"blue_star","blend":"additive"},{"name":"blue_star33","bone":"bn14","attachment":"blue_star","blend":"additive"},{"name":"blue_star34","bone":"bn15","attachment":"blue_star","blend":"additive"},{"name":"blue_star35","bone":"bn16","attachment":"blue_star","blend":"additive"},{"name":"blue_star36","bone":"bn17","attachment":"blue_star","blend":"additive"},{"name":"blue_star37","bone":"bn18","attachment":"blue_star","blend":"additive"},{"name":"blue_star38","bone":"bn19","attachment":"blue_star","blend":"additive"},{"name":"blue_star39","bone":"bn20","attachment":"blue_star","blend":"additive"},{"name":"blue_star40","bone":"bn21","attachment":"blue_star","blend":"additive"},{"name":"blue_star41","bone":"bn22","attachment":"blue_star","blend":"additive"},{"name":"blue_star42","bone":"bn23","attachment":"blue_star","blend":"additive"},{"name":"blue_star43","bone":"bn24","attachment":"blue_star","blend":"additive"},{"name":"blue_star44","bone":"bn25","attachment":"blue_star","blend":"additive"},{"name":"blue_star45","bone":"bn26","attachment":"blue_star","blend":"additive"},{"name":"blue_star46","bone":"bn27","attachment":"blue_star","blend":"additive"},{"name":"blue_star47","bone":"bn28","attachment":"blue_star","blend":"additive"},{"name":"blue_star48","bone":"bn29","attachment":"blue_star","blend":"additive"},{"name":"blue_star49","bone":"bn30","attachment":"blue_star","blend":"additive"},{"name":"blue_star50","bone":"bn31","attachment":"blue_star","blend":"additive"},{"name":"blue_star51","bone":"bn32","attachment":"blue_star","blend":"additive"},{"name":"blue_star52","bone":"bn33","attachment":"blue_star","blend":"additive"},{"name":"blue_star53","bone":"bn34","attachment":"blue_star","blend":"additive"},{"name":"blue_star54","bone":"bn35","attachment":"blue_star","blend":"additive"},{"name":"blue_star55","bone":"bn36","attachment":"blue_star","blend":"additive"},{"name":"blue_star56","bone":"bn37","attachment":"blue_star","blend":"additive"},{"name":"blue_star57","bone":"bn38","attachment":"blue_star","blend":"additive"},{"name":"blue_star58","bone":"bn39","attachment":"blue_star","blend":"additive"}],"skins":[{"name":"default","attachments":{"effect_coin_22":{"effect_coin_2":{"width":72,"height":76}},"blue_star8":{"blue_star":{"width":54,"height":52}},"effect_coin_24":{"effect_coin_7":{"width":53,"height":78}},"ww2_00000":{"ww2_00000":{"width":350,"height":350}},"effect_coin_26":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_28":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_29":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_37":{"effect_coin_1":{"width":76,"height":76}},"blue_star":{"blue_star":{"width":54,"height":52}},"effect_coin_30":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_32":{"effect_coin_1":{"width":76,"height":76}},"blue_star14":{"blue_star":{"width":54,"height":52}},"blue_star10":{"blue_star":{"width":54,"height":52}},"effect_coin_39":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_20":{"effect_coin_7":{"width":53,"height":78}},"bone6":{"ww1_00000":{"width":350,"height":350}},"effect_coin_41":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_42":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_43":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_44":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_45":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_46":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_47":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_48":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_49":{"effect_coin_2":{"width":72,"height":76}},"blue_star16":{"blue_star":{"width":54,"height":52}},"blue_star33":{"blue_star":{"width":54,"height":52}},"effect_coin_50":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_51":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_52":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_53":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_54":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_55":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_56":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_57":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_58":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_59":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_23":{"effect_coin_7":{"width":53,"height":78}},"blue_star13":{"blue_star":{"width":54,"height":52}},"effect_coin_1":{"effect_coin_1":{"width":76,"height":76}},"effect_coin_3":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_4":{"effect_coin_4":{"width":32,"height":78}},"effect_coin_6":{"effect_coin_5":{"width":31,"height":76}},"blue_star11":{"blue_star":{"width":54,"height":52}},"effect_coin_9":{"effect_coin_3":{"width":53,"height":76}},"effect_coin_60":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_61":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_62":{"effect_coin_7":{"width":53,"height":78}},"effect_coin_63":{"effect_coin_8":{"width":72,"height":78}},"blue_star18":{"blue_star":{"width":54,"height":52}},"blue_star19":{"blue_star":{"width":54,"height":52}},"ww2_0":{"ww2_00000":{"width":350,"height":350}},"blue_star20":{"blue_star":{"width":54,"height":52}},"blue_star21":{"blue_star":{"width":54,"height":52}},"blue_star22":{"blue_star":{"width":54,"height":52}},"blue_star23":{"blue_star":{"width":54,"height":52}},"blue_star24":{"blue_star":{"width":54,"height":52}},"blue_star25":{"blue_star":{"width":54,"height":52}},"blue_star26":{"blue_star":{"width":54,"height":52}},"blue_star27":{"blue_star":{"width":54,"height":52}},"blue_star28":{"blue_star":{"width":54,"height":52}},"blue_star29":{"blue_star":{"width":54,"height":52}},"blue_star9":{"blue_star":{"width":54,"height":52}},"blue_star30":{"blue_star":{"width":54,"height":52}},"blue_star31":{"blue_star":{"width":54,"height":52}},"blue_star32":{"blue_star":{"width":54,"height":52}},"blue_star7":{"blue_star":{"width":54,"height":52}},"blue_star34":{"blue_star":{"width":54,"height":52}},"blue_star35":{"blue_star":{"width":54,"height":52}},"blue_star36":{"blue_star":{"width":54,"height":52}},"blue_star37":{"blue_star":{"width":54,"height":52}},"blue_star38":{"blue_star":{"width":54,"height":52}},"blue_star39":{"blue_star":{"width":54,"height":52}},"wjx01":{"wjx01":{"width":120,"height":112}},"jbb122":{"jbb122":{"width":152,"height":152}},"jbb123":{"jbb122":{"width":152,"height":152}},"wjx4":{"wjx01":{"width":120,"height":112}},"wjx5":{"wjx01":{"width":120,"height":112}},"blue_star40":{"blue_star":{"width":54,"height":52}},"blue_star41":{"blue_star":{"width":54,"height":52}},"blue_star42":{"blue_star":{"width":54,"height":52}},"blue_star43":{"blue_star":{"width":54,"height":52}},"blue_star44":{"blue_star":{"width":54,"height":52}},"blue_star45":{"blue_star":{"width":54,"height":52}},"blue_star46":{"blue_star":{"width":54,"height":52}},"blue_star47":{"blue_star":{"width":54,"height":52}},"blue_star48":{"blue_star":{"width":54,"height":52}},"blue_star49":{"blue_star":{"width":54,"height":52}},"effect_coin_10":{"effect_coin_5":{"width":31,"height":76}},"effect_coin_11":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_13":{"effect_coin_8":{"width":72,"height":78}},"effect_coin_14":{"effect_coin_2":{"width":72,"height":76}},"effect_coin_18":{"effect_coin_6":{"width":32,"height":78}},"effect_coin_19":{"effect_coin_7":{"width":53,"height":78}},"bone5":{"jbb122a_00000":{"width":350,"height":350}},"blue_star50":{"blue_star":{"width":54,"height":52}},"blue_star51":{"blue_star":{"width":54,"height":52}},"blue_star52":{"blue_star":{"width":54,"height":52}},"blue_star53":{"blue_star":{"width":54,"height":52}},"blue_star54":{"blue_star":{"width":54,"height":52}},"blue_star55":{"blue_star":{"width":54,"height":52}},"blue_star56":{"blue_star":{"width":54,"height":52}},"blue_star57":{"blue_star":{"width":54,"height":52}},"blue_star58":{"blue_star":{"width":54,"height":52}},"blue_star2":{"blue_star":{"width":54,"height":52}},"blue_star5":{"blue_star":{"width":54,"height":52}}}}],"animations":{"baozha":{"slots":{"effect_coin_1":{"attachment":[{"name":null}]},"blue_star51":{"color":[{"color":"ffffff00"}]},"blue_star39":{"color":[{"color":"ffffff00"}]},"blue_star50":{"color":[{"color":"ffffff00"}]},"effect_coin_62":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_43":{"attachment":[{"name":null}]},"blue_star56":{"color":[{"color":"ffffff00"}]},"blue_star8":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6333,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.4,"color":"ffffff00"}]},"blue_star53":{"color":[{"color":"ffffff00"}]},"effect_coin_45":{"attachment":[{"name":null}]},"wjx01":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3667,"color":"ffffff00"},{"time":0.4667,"color":"ffffff98","curve":"stepped"},{"time":0.6,"color":"ffffff98"},{"time":1.4,"color":"ffffff00"}]},"effect_coin_20":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6667,"color":"ffffff00"},{"time":0.8,"color":"ffffffc9","curve":"stepped"},{"time":1.0333,"color":"ffffffc9"},{"time":1.5333,"color":"ffffff00"}]},"effect_coin_28":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.5333,"color":"ffffff00"}]},"effect_coin_30":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"blue_star45":{"color":[{"color":"ffffff00"}]},"blue_star37":{"color":[{"color":"ffffff00"}]},"effect_coin_19":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.3667,"color":"ffffffff","curve":"stepped"},{"time":0.4667,"color":"ffffffff"},{"time":0.7,"color":"ffffff00"}]},"wjx5":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.4333,"color":"ffffff98"},{"time":1.1667,"color":"ffffff00"}]},"blue_star54":{"color":[{"color":"ffffff00"}]},"blue_star41":{"color":[{"color":"ffffff00"}]},"blue_star43":{"color":[{"color":"ffffff00"}]},"effect_coin_59":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_24":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4667,"color":"ffffffff"},{"time":1.0333,"color":"ffffff00"}]},"blue_star58":{"color":[{"color":"ffffff00"}]},"effect_coin_14":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.7667,"color":"ffffffbd"},{"time":1.2,"color":"ffffff00"}]},"effect_coin_47":{"attachment":[{"name":null}]},"blue_star29":{"color":[{"color":"ffffff00"}]},"jbb123":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2667,"color":"ffffff00"},{"time":0.4,"color":"ffffffa4"},{"time":0.7667,"color":"ffffff00"}]},"effect_coin_44":{"attachment":[{"name":null}]},"effect_coin_4":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.7667,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"blue_star21":{"color":[{"color":"ffffff00"}]},"effect_coin_9":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4667,"color":"ffffffff","curve":"stepped"},{"time":0.6,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}]},"blue_star":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.3,"color":"ffffff00"}]},"blue_star13":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.7333,"color":"ffffffff"},{"time":1.6667,"color":"ffffff00"}]},"effect_coin_63":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star44":{"color":[{"color":"ffffff00"}]},"effect_coin_23":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.7,"color":"ffffffff","curve":"stepped"},{"time":0.9,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"ww2_0":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.7333,"color":"ffffff00"},{"time":0.8333,"color":"ffffffff","curve":"stepped"},{"time":1,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"blue_star48":{"color":[{"color":"ffffff00"}]},"blue_star16":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}]},"effect_coin_11":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3333,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"effect_coin_58":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star49":{"color":[{"color":"ffffff00"}]},"blue_star36":{"color":[{"color":"ffffff00"}]},"blue_star47":{"color":[{"color":"ffffff00"}]},"blue_star55":{"color":[{"color":"ffffff00"}]},"blue_star18":{"color":[{"color":"ffffff00"}]},"blue_star52":{"color":[{"color":"ffffff00"}]},"blue_star40":{"color":[{"color":"ffffff00"}]},"blue_star46":{"color":[{"color":"ffffff00"}]},"blue_star19":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.7,"color":"ffffffff"},{"time":1.5,"color":"ffffff00"}]},"effect_coin_41":{"attachment":[{"name":null}]},"blue_star38":{"color":[{"color":"ffffff00"}]},"effect_coin_60":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_13":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"blue_star14":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.8,"color":"ffffffff"},{"time":1.4,"color":"ffffff00"}]},"blue_star10":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.5,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"effect_coin_29":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"bone6":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.9,"color":"ffffff17"},{"time":1.1333,"color":"ffffff00"}]},"blue_star20":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4333,"color":"ffffff00"},{"time":0.5,"color":"ffffffff"},{"time":1.2667,"color":"ffffff00"}]},"blue_star34":{"color":[{"color":"ffffff00"}]},"blue_star5":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3333,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.9667,"color":"ffffff00"}]},"effect_coin_3":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.1333,"color":"ffffff00"}]},"effect_coin_18":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5333,"color":"ffffff00"},{"time":0.8667,"color":"ffffff96"},{"time":1.6667,"color":"ffffff00"}]},"blue_star32":{"color":[{"color":"ffffff00"}]},"effect_coin_26":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":0.9333,"color":"ffffff00"}]},"blue_star9":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1.5667,"color":"ffffff00"}]},"blue_star28":{"color":[{"color":"ffffff00"}]},"effect_coin_39":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.7667,"color":"ffffff00"},{"time":0.8333,"color":"ffffffff","curve":"stepped"},{"time":1,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"effect_coin_42":{"attachment":[{"name":null}]},"effect_coin_61":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star30":{"color":[{"color":"ffffff00"}]},"blue_star57":{"color":[{"color":"ffffff00"}]},"effect_coin_6":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"blue_star33":{"color":[{"color":"ffffff00"}]},"blue_star25":{"color":[{"color":"ffffff00"}]},"blue_star42":{"color":[{"color":"ffffff00"}]},"effect_coin_37":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.3667,"color":"ffffffff"},{"time":0.8667,"color":"ffffff00"}]},"bone5":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"blue_star27":{"color":[{"color":"ffffff00"}]},"effect_coin_57":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"effect_coin_56":{"attachment":[{"name":null},{"time":1.7,"name":null}]},"blue_star2":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1.4667,"color":"ffffff00"}]},"effect_coin_32":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4667,"color":"ffffff97"},{"time":0.8667,"color":"ffffff00"}]},"effect_coin_10":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2667,"color":"ffffff00"},{"time":0.3,"color":"ffffffff"},{"time":0.8333,"color":"ffffff00"}]},"blue_star35":{"color":[{"color":"ffffff00"}]},"blue_star31":{"color":[{"color":"ffffff00"}]},"blue_star24":{"color":[{"color":"ffffff00"}]},"wjx4":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.6333,"color":"ffffff98"},{"time":1.5667,"color":"ffffff00"}]},"effect_coin_22":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff","curve":"stepped"},{"time":0.7667,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}]},"effect_coin_46":{"attachment":[{"name":null}]},"blue_star7":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.6333,"color":"ffffffff"},{"time":1.2667,"color":"ffffff00"}]},"blue_star26":{"color":[{"color":"ffffff00"}]},"jbb122":{"attachment":[{"name":"jbb122"},{"time":0.9,"name":"jbb122"},{"time":0.9333,"name":null}]},"blue_star23":{"color":[{"color":"ffffff00"}]},"ww2_00000":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4333,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff","curve":"stepped"},{"time":0.7,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"blue_star11":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6,"color":"ffffff00"},{"time":0.6333,"color":"ffffffff"},{"time":1.4667,"color":"ffffff00"}]},"blue_star22":{"color":[{"color":"ffffff00"}]}},"bones":{"d1":{"rotate":[{"time":0.2},{"time":1.3,"angle":155}],"translate":[{"time":0.2,"x":83.79,"y":19.15},{"time":1.3,"x":-88.58,"y":-54.26}]},"d2":{"rotate":[{"time":0.4667},{"time":1.5,"angle":131.12}],"translate":[{"time":0.4667},{"time":1.5,"x":-67.03,"y":-127.68}],"scale":[{"time":0.4667}]},"d5":{"rotate":[{"time":0.3333},{"time":0.9667,"angle":184.41}],"translate":[{"time":0.3333},{"time":0.9667,"x":64.64,"y":-68.63}],"scale":[{"time":0.3333}]},"d7":{"rotate":[{"time":0.4667},{"time":1.2667,"angle":309.07}],"translate":[{"time":0.4667},{"time":1.2667,"x":114.11,"y":63.84}]},"d8":{"rotate":[{"time":0.6667},{"time":1.4,"angle":453.48}],"translate":[{"time":0.6667},{"time":1.4,"x":-6.38,"y":-125.29}]},"d9":{"rotate":[{"time":0.6},{"time":1.5667,"angle":488.13}],"translate":[{"time":0.6},{"time":1.5667,"x":-115.71,"y":67.03}],"scale":[{"time":0.6}]},"d10":{"translate":[{"time":0.4},{"time":1.2,"x":178.75,"y":86.98}]},"d11":{"translate":[{"time":0.6},{"time":1.4667,"x":143.64,"y":-35.91}]},"d13":{"rotate":[{"time":0.6}],"translate":[{"time":0.6},{"time":1.6667,"x":-138.05,"y":-95.76}]},"d14":{"rotate":[{"time":0.6}],"translate":[{"time":0.6},{"time":1.4,"x":23.94,"y":126.08}],"scale":[{"time":0.6}]},"d16":{"translate":[{"time":0.3,"x":-30.32,"y":12.77},{"time":1.4333,"x":95.76,"y":-43.89}],"scale":[{"time":0.3}]},"d19":{"rotate":[{"time":0.4667},{"time":1.5,"angle":214.77}],"translate":[{"time":0.4667},{"time":1.5,"x":-181.94,"y":79}]},"d20":{"translate":[{"time":0.4333,"x":-3.99,"y":16.76},{"time":1.4,"x":22.34,"y":-109.33}]},"bone5":{"scale":[{"x":0,"y":0,"curve":"stepped"},{"time":0.1667,"x":0,"y":0},{"time":0.4333,"x":1.976,"y":1.976},{"time":0.9,"x":0.468,"y":0.468}]},"tq2":{"translate":[{"time":0.5667,"x":16.76,"y":-10.37},{"time":1.1333,"x":-169.97,"y":115.71}]},"tq3":{"rotate":[{"time":0.5667},{"time":1.3667,"angle":22}],"translate":[{"time":0.5667},{"time":1.3667,"x":193.12,"y":141.25}],"scale":[{"time":0.5667},{"time":1.3667,"x":0.864,"y":0.864}]},"tq5":{"rotate":[{"time":0.5},{"time":1,"angle":15}],"translate":[{"time":0.5,"x":8.78,"y":-71.82},{"time":1,"x":9.58,"y":109.33}],"scale":[{"time":0.5,"curve":"stepped"},{"time":1}]},"tq8":{"rotate":[{"time":0.3},{"time":1.1667,"angle":88}],"translate":[{"time":0.3},{"time":1.1667,"x":137.26,"y":197.9}],"scale":[{"time":0.3,"curve":"stepped"},{"time":1.1667}]},"tq9":{"rotate":[{"time":0.2667},{"time":0.8333,"angle":44}],"translate":[{"time":0.2667},{"time":0.8333,"x":244.19,"y":-23.94}],"scale":[{"time":0.2667},{"time":0.8333,"x":0.881,"y":0.881}]},"tq10":{"rotate":[{"time":0.3333},{"time":1,"angle":44}],"translate":[{"time":0.3333},{"time":1,"x":-58.25,"y":-190.72}],"scale":[{"time":0.3333},{"time":1,"x":0.836,"y":0.836}]},"tq12":{"rotate":[{"time":0.4},{"time":1,"angle":407.17}],"translate":[{"time":0.4},{"time":1,"x":-112.52,"y":137.26}],"scale":[{"time":0.4},{"time":1,"x":0.687,"y":0.687}]},"tq13":{"rotate":[{"time":0.5667},{"time":1.2,"angle":394.83}],"translate":[{"time":0.5667},{"time":1.2,"x":-352.72,"y":-90.97}],"scale":[{"time":0.5667},{"time":1.2,"x":0.916,"y":0.916}]},"tq17":{"rotate":[{"time":0.5333},{"time":1.6667,"angle":44}],"translate":[{"time":0.5333},{"time":1.6667,"x":-165.19,"y":-210.67}],"scale":[{"time":0.5333,"curve":"stepped"},{"time":1.6667}]},"tq18":{"rotate":[{"time":0.3},{"time":0.7,"angle":8.93}],"translate":[{"time":0.3},{"time":0.7,"x":209.87,"y":48.68}],"scale":[{"time":0.3},{"time":0.7,"x":1.332,"y":1.332}]},"tq19":{"rotate":[{"time":0.6667},{"time":1.5333,"angle":39.82}],"translate":[{"time":0.6667},{"time":1.5333,"x":43.89,"y":-266.53}],"scale":[{"time":0.6667},{"time":1.5333,"x":0.857,"y":0.857}]},"tq21":{"rotate":[{"time":0.3667},{"time":1.4333,"angle":33}],"translate":[{"time":0.3667},{"time":1.4333,"x":-173.96,"y":-168.38}],"scale":[{"time":0.3667},{"time":1.4333,"x":0.871,"y":0.871}]},"tq22":{"rotate":[{"time":0.5667},{"time":1.3667,"angle":43.07}],"translate":[{"time":0.5667},{"time":1.3667,"x":197.9,"y":244.19}],"scale":[{"time":0.5667},{"time":1.3667,"x":0.891,"y":0.891}]},"tq23":{"rotate":[{"time":0.3}],"translate":[{"time":0.3,"x":-29.53,"y":52.67},{"time":1.0333,"y":-130.87}],"scale":[{"time":0.3}]},"tq25":{"rotate":[{"time":0.4667},{"time":0.9333,"angle":371.82}],"translate":[{"time":0.4667,"x":63.04,"y":-35.11},{"time":0.9333,"x":-144.44,"y":69.43}],"scale":[{"time":0.4667},{"time":0.9333,"x":1.246,"y":1.246}]},"tq27":{"rotate":[{"time":0.4667},{"time":1.5333,"angle":44}],"translate":[{"time":0.4667},{"time":1.5333,"x":246.58,"y":-94.96}],"scale":[{"time":0.4667},{"time":1.5333,"x":0.815,"y":0.815}]},"tq28":{"rotate":[{"time":0.4667},{"time":1.2,"angle":21.93}],"translate":[{"time":0.4667,"x":-83.79,"y":-82.19},{"time":1.2,"x":216.26,"y":50.27}],"scale":[{"time":0.4667},{"time":1.2,"x":0.904,"y":0.904}]},"tq29":{"rotate":[{"time":0.3667},{"time":1.2,"angle":86.06}],"translate":[{"time":0.3667,"x":-37.51,"y":62.24},{"time":1.2,"x":48.68,"y":-98.15}],"scale":[{"time":0.3667,"curve":"stepped"},{"time":1.2}]},"tq31":{"rotate":[{"time":0.3},{"time":0.8667,"angle":33}],"translate":[{"time":0.3,"x":3.19,"y":-86.18},{"time":0.8667,"x":-59.05,"y":142.84}],"scale":[{"time":0.3},{"time":0.8667,"x":0.872,"y":0.872}]},"tq36":{"rotate":[{"time":0.2},{"time":0.8667,"angle":22}],"translate":[{"time":0.2,"x":-59.05,"y":-132.47},{"time":0.8667,"x":90.17,"y":51.07}],"scale":[{"time":0.2},{"time":0.8667,"x":0.693,"y":0.693}]},"tq38":{"translate":[{"time":0.7667,"x":114.11,"y":-25.54},{"time":1.3667,"x":-126.88,"y":82.19}]},"bone7":{"scale":[{"time":0.2333,"x":0.575,"y":0.575,"curve":0.084,"c2":0.33,"c3":0.51,"c4":0.91},{"time":0.7667,"x":2.533,"y":2.533}]},"x1":{"rotate":[{"time":0.3667},{"time":1.4,"angle":109.75}],"translate":[{"time":0.3667,"x":39.9,"y":12.77},{"time":1.4,"x":-156.41,"y":-112.52}],"scale":[{"time":0.3667}]},"x5":{"rotate":[{"time":0.6},{"time":1.5667,"angle":114.85}],"translate":[{"time":0.6},{"time":1.5667,"x":-98.15,"y":92.57}],"scale":[{"time":0.6}]},"x6":{"rotate":[{"time":0.4},{"time":1.1667,"angle":173.74}],"translate":[{"time":0.4},{"time":1.1667,"x":82.19,"y":-91.77}],"scale":[{"time":0.4}]},"bone8":{"scale":[{},{"time":0.4333,"x":0.701,"y":0.701},{"time":0.9,"x":1.97,"y":1.97}]},"bone9":{"scale":[{},{"time":0.7333,"x":0.701,"y":0.701},{"time":1.2,"x":1.97,"y":1.97}]}}},"feichu":{"slots":{"blue_star9":{"attachment":[{"name":null}]},"blue_star37":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4,"color":"ffffff00"},{"time":0.4667,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"effect_coin_6":{"attachment":[{"name":null}]},"blue_star2":{"attachment":[{"name":null}]},"blue_star16":{"attachment":[{"name":null}]},"effect_coin_19":{"attachment":[{"name":null}]},"effect_coin_30":{"attachment":[{"name":null}]},"blue_star45":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6667,"color":"ffffff00"},{"time":0.7667,"color":"ffffffff"},{"time":1.1333,"color":"ffffff00"}]},"effect_coin_49":{"attachment":[{"time":0.1333,"name":null},{"time":0.1667,"name":null},{"time":0.3333,"name":"effect_coin_2"},{"time":0.3667,"name":null},{"time":0.4,"name":null},{"time":0.4333,"name":null},{"time":0.6,"name":"effect_coin_2"},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.8667,"name":"effect_coin_2"},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1.1333,"name":"effect_coin_2"},{"time":1.1667,"name":null},{"time":1.2,"name":null},{"time":1.2333,"name":null}]},"blue_star20":{"attachment":[{"name":null}]},"blue_star41":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5333,"color":"ffffff00"},{"time":0.6,"color":"ffffffff"},{"time":0.9667,"color":"ffffff00"}]},"blue_star48":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8,"color":"ffffff00"},{"time":0.8667,"color":"ffffffff"},{"time":1.1333,"color":"ffffff00"}]},"blue_star24":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0667,"color":"ffffff00"},{"time":0.1333,"color":"ffffffff"},{"time":0.6,"color":"ffffff00"}]},"effect_coin_3":{"attachment":[{"name":null}]},"effect_coin_56":{"attachment":[{"name":null},{"time":0.2,"name":"effect_coin_1"},{"time":0.2333,"name":null},{"time":0.4667,"name":"effect_coin_1"},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.7333,"name":"effect_coin_1"},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":1,"name":"effect_coin_1"},{"time":1.0333,"name":null},{"time":1.1333,"name":null},{"time":1.2,"name":null},{"time":1.2333,"name":null},{"time":1.2667,"name":"effect_coin_1"},{"time":1.3,"name":null},{"time":1.4667,"name":null},{"time":1.6333,"name":null}]},"effect_coin_57":{"attachment":[{"name":null},{"time":0.2333,"name":null},{"time":0.2667,"name":null},{"time":0.4333,"name":"effect_coin_2"},{"time":0.4667,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.7,"name":"effect_coin_2"},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":"effect_coin_2"},{"time":1,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null},{"time":1.2333,"name":"effect_coin_2"},{"time":1.2667,"name":null},{"time":1.4333,"name":null},{"time":1.4667,"name":null},{"time":1.6333,"name":null}]},"effect_coin_14":{"attachment":[{"name":null}]},"effect_coin_26":{"attachment":[{"name":null}]},"bone5":{"attachment":[{"name":null}]},"effect_coin_9":{"attachment":[{"name":null}]},"blue_star25":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2333,"color":"ffffffff"},{"time":0.7,"color":"ffffff00"}]},"blue_star44":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.6333,"color":"ffffff00"},{"time":0.7,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"effect_coin_24":{"attachment":[{"name":null}]},"effect_coin_37":{"attachment":[{"name":null}]},"blue_star36":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.3,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff"},{"time":0.8,"color":"ffffff00"}]},"effect_coin_62":{"attachment":[{"name":null},{"time":0.2667,"name":"effect_coin_7"},{"time":0.3,"name":null},{"time":0.4,"name":null},{"time":0.4333,"name":null},{"time":0.5333,"name":"effect_coin_7"},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.7333,"name":"effect_coin_7"},{"time":0.7667,"name":null},{"time":0.8,"name":"effect_coin_7"},{"time":0.8333,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1.0667,"name":"effect_coin_7"},{"time":1.1,"name":null},{"time":1.2667,"name":null},{"time":1.3,"name":null},{"time":1.3333,"name":"effect_coin_7"},{"time":1.3667,"name":null},{"time":1.4,"name":null},{"time":1.4333,"name":null},{"time":1.6333,"name":null}]},"effect_coin_20":{"attachment":[{"name":null}]},"blue_star18":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0333,"color":"ffffff00"},{"time":0.1,"color":"ffffffff"},{"time":0.4667,"color":"ffffff00"}]},"blue_star13":{"attachment":[{"name":null}]},"effect_coin_29":{"attachment":[{"name":null}]},"effect_coin_63":{"attachment":[{"name":null},{"time":0.2333,"name":"effect_coin_8"},{"time":0.2667,"name":null},{"time":0.4333,"name":"effect_coin_8"},{"time":0.4667,"name":null},{"time":0.5,"name":"effect_coin_8"},{"time":0.5333,"name":null},{"time":0.5667,"name":"effect_coin_8"},{"time":0.6,"name":null},{"time":0.7667,"name":"effect_coin_8"},{"time":0.8,"name":null},{"time":0.9,"name":"effect_coin_8"},{"time":0.9333,"name":null},{"time":1.0333,"name":"effect_coin_8"},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null},{"time":1.2333,"name":"effect_coin_8"},{"time":1.2667,"name":null},{"time":1.3,"name":"effect_coin_8"},{"time":1.3333,"name":null},{"time":1.4333,"name":"effect_coin_8"},{"time":1.4667,"name":null},{"time":1.6333,"name":null}]},"wjx5":{"attachment":[{"name":null}]},"blue_star26":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.5667,"color":"ffffff00"}]},"effect_coin_32":{"attachment":[{"name":null}]},"jbb123":{"attachment":[{"name":null}]},"blue_star32":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.2333,"color":"ffffffff"},{"time":0.6333,"color":"ffffff00"}]},"blue_star35":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2333,"color":"ffffff00"},{"time":0.3333,"color":"ffffffff"},{"time":0.7333,"color":"ffffff00"}]},"blue_star47":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.7333,"color":"ffffff00"},{"time":0.8,"color":"ffffffff"},{"time":1.2,"color":"ffffff00"}]},"wjx01":{"attachment":[{"name":null}]},"effect_coin_61":{"attachment":[{"name":null},{"time":0.3,"name":"effect_coin_6"},{"time":0.3333,"name":null},{"time":0.3667,"name":null},{"time":0.4,"name":null},{"time":0.5667,"name":"effect_coin_6"},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.8333,"name":"effect_coin_6"},{"time":0.8667,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":"effect_coin_6"},{"time":1.1333,"name":null},{"time":1.3,"name":null},{"time":1.3333,"name":null},{"time":1.3667,"name":"effect_coin_6"},{"time":1.4,"name":null},{"time":1.6333,"name":null}]},"blue_star42":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.6333,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}]},"effect_coin_55":{"attachment":[{"time":0.1333,"name":"effect_coin_8"},{"time":0.1667,"name":null},{"time":0.3333,"name":null},{"time":0.3667,"name":null},{"time":0.4,"name":"effect_coin_8"},{"time":0.4333,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.6667,"name":"effect_coin_8"},{"time":0.7,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":"effect_coin_8"},{"time":0.9667,"name":null},{"time":1.1333,"name":null},{"time":1.1667,"name":null},{"time":1.2,"name":"effect_coin_8"},{"time":1.2333,"name":null}]},"effect_coin_18":{"attachment":[{"name":null}]},"effect_coin_47":{"attachment":[{"name":null},{"time":0.0333,"name":"effect_coin_8"},{"time":0.0667,"name":null},{"time":0.2333,"name":null},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.4667,"name":null},{"time":0.5,"name":null},{"time":0.5333,"name":"effect_coin_8"},{"time":0.5667,"name":null},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":"effect_coin_8"},{"time":0.8333,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.0667,"name":"effect_coin_8"},{"time":1.1,"name":null},{"time":1.1667,"name":null},{"time":1.2,"name":null}]},"blue_star34":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.3,"color":"ffffffff"},{"time":0.7,"color":"ffffff00"}]},"blue_star27":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2333,"color":"ffffffff"},{"time":0.6667,"color":"ffffff00"}]},"blue_star31":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"},{"time":0.6,"color":"ffffff00"}]},"ww2_00000":{"attachment":[{"name":null}]},"wjx4":{"attachment":[{"name":null}]},"blue_star19":{"attachment":[{"name":null}]},"effect_coin_58":{"attachment":[{"name":null},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.4,"name":"effect_coin_3"},{"time":0.4333,"name":null},{"time":0.6,"name":"effect_coin_3"},{"time":0.6333,"name":null},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.9333,"name":"effect_coin_3"},{"time":0.9667,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.2,"name":"effect_coin_3"},{"time":1.2333,"name":null},{"time":1.2667,"name":null},{"time":1.3,"name":null},{"time":1.4,"name":null},{"time":1.4333,"name":null},{"time":1.6333,"name":null}]},"blue_star28":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"},{"time":0.6667,"color":"ffffff00"}]},"blue_star11":{"attachment":[{"name":null}]},"effect_coin_54":{"attachment":[{"time":0.1667,"name":"effect_coin_7"},{"time":0.2,"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.4333,"name":"effect_coin_7"},{"time":0.4667,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.7,"name":"effect_coin_7"},{"time":0.7333,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":0.9667,"name":"effect_coin_7"},{"time":1,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null},{"time":1.2333,"name":"effect_coin_7"},{"time":1.2667,"name":null}]},"blue_star51":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8667,"color":"ffffff00"},{"time":0.9333,"color":"ffffffff"},{"time":1.4,"color":"ffffff00"}]},"blue_star39":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5667,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"blue_star50":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.9,"color":"ffffff00"},{"time":1.0333,"color":"ffffffff"},{"time":1.3,"color":"ffffff00"}]},"blue_star49":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8,"color":"ffffff00"},{"time":0.8667,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}]},"blue_star53":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8667,"color":"ffffff00"},{"time":0.9667,"color":"ffffffff"},{"time":1.2667,"color":"ffffff00"}]},"effect_coin_51":{"attachment":[{"time":0.2,"name":null},{"time":0.2333,"name":null},{"time":0.2667,"name":"effect_coin_4"},{"time":0.3,"name":null},{"time":0.4667,"name":null},{"time":0.5,"name":null},{"time":0.5333,"name":"effect_coin_4"},{"time":0.5667,"name":null},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":"effect_coin_4"},{"time":0.8333,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":"effect_coin_4"},{"time":1.1,"name":null},{"time":1.2667,"name":null},{"time":1.3,"name":null}]},"effect_coin_45":{"attachment":[{"name":null},{"time":0.1,"name":"effect_coin_6"},{"time":0.1333,"name":null},{"time":0.1667,"name":null},{"time":0.2,"name":null},{"time":0.3333,"name":"effect_coin_6"},{"time":0.3667,"name":null},{"time":0.4,"name":null},{"time":0.4333,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":"effect_coin_6"},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.8,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":"effect_coin_6"},{"time":0.9,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":"effect_coin_6"},{"time":1.1667,"name":null}]},"effect_coin_13":{"attachment":[{"name":null}]},"blue_star54":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.9667,"color":"ffffff00"},{"time":1.0667,"color":"ffffffff"},{"time":1.3667,"color":"ffffff00"}]},"blue_star33":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.5667,"color":"ffffff00"}]},"effect_coin_10":{"attachment":[{"name":null}]},"blue_star58":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.2,"color":"ffffff00"},{"time":1.2667,"color":"ffffffff"},{"time":1.6333,"color":"ffffff00"}]},"blue_star29":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1333,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.6333,"color":"ffffff00"}]},"effect_coin_1":{"attachment":[{"name":"effect_coin_1"},{"time":0.0333,"name":null},{"time":0.2667,"name":"effect_coin_1"},{"time":0.3,"name":null},{"time":0.5,"name":"effect_coin_1"},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.7667,"name":"effect_coin_1"},{"time":0.8,"name":null},{"time":0.8333,"name":null},{"time":1.0333,"name":"effect_coin_1"},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1667,"name":null},{"time":1.2,"name":null}]},"effect_coin_44":{"attachment":[{"name":null},{"time":0.1333,"name":"effect_coin_5"},{"time":0.1667,"name":null},{"time":0.3667,"name":"effect_coin_5"},{"time":0.4,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":"effect_coin_5"},{"time":0.6667,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":"effect_coin_5"},{"time":0.9333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.1667,"name":"effect_coin_5"},{"time":1.2,"name":null}]},"effect_coin_4":{"attachment":[{"name":null}]},"blue_star21":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0333,"color":"ffffff00"},{"time":0.1333,"color":"ffffffff"},{"time":0.5667,"color":"ffffff00"}]},"ww2_0":{"attachment":[{"name":null}]},"blue_star":{"attachment":[{"name":null}]},"blue_star56":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.0333,"color":"ffffff00"},{"time":1.1333,"color":"ffffffff"},{"time":1.5,"color":"ffffff00"}]},"blue_star10":{"attachment":[{"name":null}]},"effect_coin_23":{"attachment":[{"name":null}]},"blue_star38":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5,"color":"ffffffff"},{"time":0.8333,"color":"ffffff00"}]},"effect_coin_48":{"attachment":[{"time":0.1,"name":"effect_coin_1"},{"time":0.1333,"name":null},{"time":0.3667,"name":"effect_coin_1"},{"time":0.4,"name":null},{"time":0.6333,"name":"effect_coin_1"},{"time":0.6667,"name":null},{"time":0.9,"name":"effect_coin_1"},{"time":0.9333,"name":null},{"time":1.1667,"name":"effect_coin_1"},{"time":1.2,"name":null}]},"effect_coin_50":{"attachment":[{"time":0.1667,"name":null},{"time":0.2,"name":null},{"time":0.3,"name":"effect_coin_3"},{"time":0.3333,"name":null},{"time":0.4333,"name":null},{"time":0.4667,"name":null},{"time":0.5667,"name":"effect_coin_3"},{"time":0.6,"name":null},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.8333,"name":"effect_coin_3"},{"time":0.8667,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.1,"name":"effect_coin_3"},{"time":1.1333,"name":null},{"time":1.2333,"name":null},{"time":1.2667,"name":null}]},"blue_star52":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.9333,"color":"ffffff00"},{"time":1.0333,"color":"ffffffff"},{"time":1.3,"color":"ffffff00"}]},"blue_star46":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.8333,"color":"ffffff00"},{"time":0.9,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}]},"effect_coin_60":{"attachment":[{"name":null},{"time":0.3333,"name":"effect_coin_5"},{"time":0.3667,"name":null},{"time":0.6,"name":"effect_coin_5"},{"time":0.6333,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.8667,"name":"effect_coin_5"},{"time":0.9,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.1333,"name":"effect_coin_5"},{"time":1.1667,"name":null},{"time":1.3333,"name":null},{"time":1.3667,"name":null},{"time":1.4,"name":"effect_coin_5"},{"time":1.4333,"name":null},{"time":1.6333,"name":null}]},"blue_star14":{"attachment":[{"name":null}]},"blue_star23":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0667,"color":"ffffff00"},{"time":0.1,"color":"ffffffff"},{"time":0.5,"color":"ffffff00"}]},"bone6":{"attachment":[{"name":null}]},"blue_star5":{"attachment":[{"name":null}]},"blue_star30":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2,"color":"ffffff00"},{"time":0.3,"color":"ffffffff"},{"time":0.6333,"color":"ffffff00"}]},"jbb122":{"attachment":[{"name":null}]},"blue_star8":{"attachment":[{"name":null}]},"blue_star55":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.0667,"color":"ffffff00"},{"time":1.1333,"color":"ffffffff"},{"time":1.4667,"color":"ffffff00"}]},"effect_coin_46":{"attachment":[{"name":null},{"time":0.0667,"name":"effect_coin_7"},{"time":0.1,"name":null},{"time":0.2,"name":null},{"time":0.2333,"name":null},{"time":0.3,"name":"effect_coin_7"},{"time":0.3333,"name":null},{"time":0.4333,"name":null},{"time":0.4667,"name":null},{"time":0.5333,"name":null},{"time":0.5667,"name":"effect_coin_7"},{"time":0.6,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.8333,"name":"effect_coin_7"},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.1,"name":"effect_coin_7"},{"time":1.1333,"name":null},{"time":1.1667,"name":null}]},"effect_coin_39":{"attachment":[{"name":null}]},"blue_star40":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.4667,"color":"ffffff00"},{"time":0.5333,"color":"ffffffff"},{"time":0.8667,"color":"ffffff00"}]},"blue_star43":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.5667,"color":"ffffff00"},{"time":0.6,"color":"ffffffff"},{"time":1,"color":"ffffff00"}]},"effect_coin_53":{"attachment":[{"time":0.2,"name":"effect_coin_6"},{"time":0.2333,"name":null},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.4667,"name":"effect_coin_6"},{"time":0.5,"name":null},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.7333,"name":"effect_coin_6"},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.8333,"name":null},{"time":1,"name":"effect_coin_6"},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":null},{"time":1.2667,"name":"effect_coin_6"},{"time":1.3,"name":null}]},"effect_coin_41":{"attachment":[{"name":null},{"time":0.0333,"name":null},{"time":0.0667,"name":null},{"time":0.2333,"name":"effect_coin_2"},{"time":0.2667,"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.4667,"name":"effect_coin_2"},{"time":0.5,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.7333,"name":"effect_coin_2"},{"time":0.7667,"name":null},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":1,"name":"effect_coin_2"},{"time":1.0333,"name":null},{"time":1.1,"name":null},{"time":1.1333,"name":null}]},"effect_coin_52":{"attachment":[{"time":0.2333,"name":"effect_coin_5"},{"time":0.2667,"name":null},{"time":0.5,"name":"effect_coin_5"},{"time":0.5333,"name":null},{"time":0.7667,"name":"effect_coin_5"},{"time":0.8,"name":null},{"time":1.0333,"name":"effect_coin_5"},{"time":1.0667,"name":null},{"time":1.3,"name":"effect_coin_5"},{"time":1.3333,"name":null}]},"blue_star22":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1,"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.4667,"color":"ffffff00"}]},"effect_coin_59":{"attachment":[{"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.3667,"name":"effect_coin_4"},{"time":0.4,"name":null},{"time":0.6333,"name":"effect_coin_4"},{"time":0.6667,"name":"effect_coin_4"},{"time":0.7,"name":null},{"time":0.7333,"name":null},{"time":0.9,"name":"effect_coin_4"},{"time":0.9333,"name":null},{"time":0.9667,"name":null},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1667,"name":"effect_coin_4"},{"time":1.2,"name":null},{"time":1.3,"name":null},{"time":1.3333,"name":null},{"time":1.3667,"name":null},{"time":1.4,"name":null},{"time":1.6333,"name":null}]},"effect_coin_28":{"attachment":[{"name":null}]},"effect_coin_22":{"attachment":[{"name":null}]},"blue_star7":{"attachment":[{"name":null}]},"effect_coin_11":{"attachment":[{"name":null}]},"effect_coin_43":{"attachment":[{"name":null},{"time":0.1,"name":"effect_coin_4"},{"time":0.1333,"name":null},{"time":0.1667,"name":"effect_coin_4"},{"time":0.2,"name":null},{"time":0.3333,"name":"effect_coin_4"},{"time":0.3667,"name":null},{"time":0.4,"name":"effect_coin_4"},{"time":0.4333,"name":null},{"time":0.5667,"name":null},{"time":0.6,"name":null},{"time":0.6333,"name":null},{"time":0.6667,"name":"effect_coin_4"},{"time":0.7,"name":null},{"time":0.8,"name":"effect_coin_4"},{"time":0.8333,"name":null},{"time":0.8667,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":"effect_coin_4"},{"time":0.9667,"name":null},{"time":1.0333,"name":null},{"time":1.0667,"name":null},{"time":1.1,"name":"effect_coin_4"},{"time":1.1333,"name":null},{"time":1.2,"name":"effect_coin_4"},{"time":1.2333,"name":null}]},"blue_star57":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":1.1,"color":"ffffff00"},{"time":1.1667,"color":"ffffffff"},{"time":1.5,"color":"ffffff00"}]},"effect_coin_42":{"attachment":[{"name":null},{"time":0.0667,"name":"effect_coin_3"},{"time":0.1,"name":null},{"time":0.2,"name":"effect_coin_3"},{"time":0.2333,"name":null},{"time":0.3,"name":null},{"time":0.3333,"name":null},{"time":0.4333,"name":"effect_coin_3"},{"time":0.4667,"name":null},{"time":0.5333,"name":null},{"time":0.5667,"name":null},{"time":0.6667,"name":null},{"time":0.7,"name":"effect_coin_3"},{"time":0.7333,"name":null},{"time":0.7667,"name":null},{"time":0.8,"name":null},{"time":0.9,"name":null},{"time":0.9333,"name":null},{"time":0.9667,"name":"effect_coin_3"},{"time":1,"name":null},{"time":1.0333,"name":null},{"time":1.1333,"name":null},{"time":1.1667,"name":null}]}},"bones":{"bn1":{"rotate":[{"time":0.0333},{"time":0.4667,"angle":33}],"translate":[{"time":0.0333},{"time":0.4667,"x":-4.73,"y":41.47}],"scale":[{"time":0.0333}]},"bn2":{"rotate":[{"time":0.0333}],"translate":[{"time":0.0333},{"time":0.5667,"x":17.32,"y":47.25}],"scale":[{"time":0.0333}]},"bn3":{"rotate":[{"time":0.1},{"time":0.4667,"angle":55}],"translate":[{"time":0.1},{"time":0.4667,"x":2.63,"y":55.65}]},"bn4":{"rotate":[{"time":0.0667},{"time":0.5,"angle":74.1}],"translate":[{"time":0.0667},{"time":0.5,"x":15.22,"y":43.05}],"scale":[{"time":0.0667}]},"bn5":{"rotate":[{"time":0.0667},{"time":0.6,"angle":41.1}],"translate":[{"time":0.0667},{"time":0.6,"x":-4.72,"y":61.95}]},"bn6":{"rotate":[{"time":0.1333}],"translate":[{"time":0.1333},{"time":0.7,"x":15.22,"y":50.4}],"scale":[{"time":0.1333,"x":0.63,"y":0.63}]},"bn7":{"rotate":[{"time":0.1667}],"translate":[{"time":0.1667},{"time":0.5667,"x":2.63,"y":51.45}],"scale":[{"time":0.1667,"x":0.729,"y":0.729}]},"bn8":{"rotate":[{"time":0.1333}],"translate":[{"time":0.1333},{"time":0.6667,"x":33.08,"y":42}],"scale":[{"time":0.1333}]},"bn9":{"rotate":[{"time":0.1333},{"time":0.6667,"angle":130.1}],"translate":[{"time":0.1333},{"time":0.6667,"x":13.13,"y":54.6}],"scale":[{"time":0.1333,"x":0.828,"y":0.828}]},"bn10":{"rotate":[{"time":0.1333}],"translate":[{"time":0.1333},{"time":0.6333,"x":45.15,"y":63}],"scale":[{"time":0.1333}]},"bn11":{"rotate":[{"time":0.2},{"time":0.6333,"angle":52.1}],"translate":[{"time":0.2},{"time":0.6333,"x":37.27,"y":44.62}]},"bn12":{"rotate":[{"time":0.1333,"angle":21.2},{"time":0.6,"angle":96.1}],"translate":[{"time":0.1333},{"time":0.6,"x":61.95,"y":34.65}],"scale":[{"time":0.1333,"x":0.824,"y":0.824}]},"bn13":{"rotate":[{"time":0.1667}],"translate":[{"time":0.1667},{"time":0.6333,"x":46.2,"y":40.42}],"scale":[{"time":0.1667},{"time":0.6333,"x":0.609,"y":0.609}]},"bn14":{"rotate":[{"time":0.1333},{"time":0.5667,"angle":230.1}],"translate":[{"time":0.1333},{"time":0.5667,"x":66.15,"y":38.32}],"scale":[{"time":0.1333},{"time":0.5667,"x":0.806,"y":0.806}]},"bn15":{"rotate":[{"time":0.2},{"time":0.7,"angle":130.1}],"translate":[{"time":0.2},{"time":0.7,"x":59.85,"y":49.35}],"scale":[{"time":0.2,"x":0.817,"y":0.817},{"time":0.7,"x":0.519,"y":0.519}]},"bn16":{"rotate":[{"time":0.2333}],"translate":[{"time":0.2333},{"time":0.7333,"x":67.2,"y":20.47}],"scale":[{"time":0.2333},{"time":0.7333,"x":0.75,"y":0.75}]},"bn17":{"rotate":[{"time":0.3},{"time":0.8,"angle":152.1}],"translate":[{"time":0.3},{"time":0.8,"x":51.97,"y":30.97}],"scale":[{"time":0.3},{"time":0.8,"x":0.869,"y":0.869}]},"bn18":{"rotate":[{"time":0.4}],"translate":[{"time":0.4},{"time":0.9,"x":75.6,"y":25.2}],"scale":[{"time":0.4},{"time":0.9,"x":0.732,"y":0.732}]},"bn19":{"rotate":[{"time":0.4667}],"translate":[{"time":0.4667},{"time":0.8333,"x":66.67,"y":25.2}],"scale":[{"time":0.4667},{"time":0.8333,"x":0.673,"y":0.673}]},"bn20":{"rotate":[{"time":0.4667},{"time":1,"angle":219.1}],"translate":[{"time":0.4667},{"time":1,"x":84,"y":8.4}],"scale":[{"time":0.4667},{"time":1,"x":0.709,"y":0.709}]},"bn21":{"rotate":[{"time":0.4667}],"translate":[{"time":0.4667},{"time":0.8667,"x":72.97,"y":17.85}],"scale":[{"time":0.4667},{"time":0.8667,"x":0.573,"y":0.573}]},"bn22":{"rotate":[{"time":0.5333}],"translate":[{"time":0.5333},{"time":0.9667,"x":93.45,"y":27.83}],"scale":[{"time":0.5333},{"time":0.9667,"x":0.799,"y":0.799}]},"bn23":{"rotate":[{"time":0.5667}],"translate":[{"time":0.5667},{"time":0.9,"x":90.82,"y":16.28}],"scale":[{"time":0.5667},{"time":0.9,"x":0.667,"y":0.667}]},"bn24":{"rotate":[{"time":0.5667},{"time":1,"angle":274.1}],"translate":[{"time":0.5667},{"time":1,"x":86.62,"y":25.2}],"scale":[{"time":0.5667}]},"bn25":{"rotate":[{"time":0.6333}],"translate":[{"time":0.6333},{"time":1,"x":79.27}],"scale":[{"time":0.6333}]},"bn26":{"rotate":[{"time":0.6667}],"translate":[{"time":0.6667},{"time":1.1333,"x":87.15,"y":17.33}],"scale":[{"time":0.6667},{"time":1.1333,"x":0.833,"y":0.833}]},"bn27":{"rotate":[{"time":0.8333},{"time":1.1667,"angle":96.1}],"translate":[{"time":0.8333},{"time":1.1667,"x":85.05,"y":-4.72}],"scale":[{"time":0.8333},{"time":1.1667,"x":0.831,"y":0.831}]},"bn28":{"rotate":[{"time":0.7333}],"translate":[{"time":0.7333},{"time":1.2,"x":88.72,"y":15.22}],"scale":[{"time":0.7333},{"time":1.2,"x":0.872,"y":0.872}]},"bn29":{"rotate":[{"time":0.8}],"translate":[{"time":0.8},{"time":1.1333,"x":74.02,"y":5.78}],"scale":[{"time":0.8},{"time":1.1333,"x":0.79,"y":0.79}]},"bn30":{"rotate":[{"time":0.8}],"translate":[{"time":0.8},{"time":1.1667,"x":84.52,"y":19.42}],"scale":[{"time":0.8},{"time":1.1667,"x":0.773,"y":0.773}]},"bn31":{"rotate":[{"time":0.9},{"time":1.3,"angle":329.1}],"translate":[{"time":0.9},{"time":1.3,"x":91.35,"y":11.55}],"scale":[{"time":0.9},{"time":1.3,"x":0.732,"y":0.732}]},"bn32":{"rotate":[{"time":0.8667}],"translate":[{"time":0.8667},{"time":1.4,"x":86.1,"y":41.47}],"scale":[{"time":0.8667},{"time":1.4,"x":0.63,"y":0.63}]},"bn33":{"rotate":[{"time":0.9333}],"translate":[{"time":0.9333},{"time":1.3,"x":117.6,"y":9.45}],"scale":[{"time":0.9333},{"time":1.3,"x":0.813,"y":0.813}]},"bn34":{"rotate":[{"time":0.8667},{"time":1.2667,"angle":219.1}],"translate":[{"time":0.8667},{"time":1.2667,"x":62.47,"y":31.5}],"scale":[{"time":0.8667},{"time":1.2667,"x":0.953,"y":0.953}]},"bn35":{"rotate":[{"time":0.9667}],"translate":[{"time":0.9667},{"time":1.3667,"x":69.3,"y":18.9}],"scale":[{"time":0.9667},{"time":1.3667,"x":0.912,"y":0.912}]},"bn36":{"rotate":[{"time":1.0667}],"translate":[{"time":1.0667},{"time":1.4667,"x":49.88,"y":43.57}],"scale":[{"time":1.0667},{"time":1.4667,"x":0.643,"y":0.643}]},"bn37":{"rotate":[{"time":1.0333},{"time":1.5,"angle":107.1}],"translate":[{"time":1.0333},{"time":1.5,"x":68.25,"y":28.88}],"scale":[{"time":1.0333},{"time":1.5,"x":0.87,"y":0.87}]},"bn38":{"rotate":[{"time":1.1},{"time":1.5,"angle":152.1}],"translate":[{"time":1.1},{"time":1.5,"x":-5.78,"y":61.42}],"scale":[{"time":1.1},{"time":1.5,"x":0.809,"y":0.809}]},"bn39":{"rotate":[{"time":1.2},{"time":1.6333,"angle":130.1}],"translate":[{"time":1.2},{"time":1.6333,"x":49.35,"y":46.2}],"scale":[{"time":1.2},{"time":1.6333,"x":0.868,"y":0.868}]},"bone11":{"rotate":[{"curve":"stepped"},{"time":1.2}],"translate":[{},{"time":0.0333,"x":1.2,"y":16.85},{"time":0.0667,"x":7.01,"y":42.21},{"time":0.1,"x":23.67,"y":64.22},{"time":0.2,"x":85.01,"y":107.69},{"time":0.3,"x":136.58,"y":121.53},{"time":0.4,"x":197.07,"y":135.74},{"time":0.5,"x":251.31,"y":140.09},{"time":0.6,"x":303.5,"y":144.43},{"time":0.7,"x":358.15,"y":150.73},{"time":0.8,"x":413.25,"y":162.74},{"time":0.9,"x":460.51,"y":189.3},{"time":1,"x":473.57,"y":215.18},{"time":1.1,"x":473.88,"y":260.68}],"scale":[{"x":1.421,"y":1.421},{"time":1.2}]},"bone12":{"rotate":[{"time":0.1,"curve":"stepped"},{"time":1.3}],"translate":[{"time":0.1},{"time":0.1333,"x":1.2,"y":16.85},{"time":0.1667,"x":7.01,"y":42.21},{"time":0.2,"x":23.67,"y":64.22},{"time":0.3,"x":85.01,"y":107.69},{"time":0.4,"x":136.58,"y":121.53},{"time":0.5,"x":197.07,"y":135.74},{"time":0.6,"x":251.31,"y":140.09},{"time":0.7,"x":303.5,"y":144.43},{"time":0.8,"x":358.15,"y":150.73},{"time":0.9,"x":413.25,"y":162.74},{"time":1,"x":460.51,"y":189.3},{"time":1.1,"x":473.57,"y":215.18},{"time":1.2,"x":473.88,"y":260.68}],"scale":[{"time":0.1,"x":1.421,"y":1.421},{"time":1.3}]},"bone13":{"rotate":[{"time":0.2,"curve":"stepped"},{"time":1.4}],"translate":[{"time":0.2},{"time":0.2333,"x":1.2,"y":16.85},{"time":0.2667,"x":7.01,"y":42.21},{"time":0.3,"x":23.67,"y":64.22},{"time":0.4,"x":85.01,"y":107.69},{"time":0.5,"x":136.58,"y":121.53},{"time":0.6,"x":197.07,"y":135.74},{"time":0.7,"x":251.31,"y":140.09},{"time":0.8,"x":303.5,"y":144.43},{"time":0.9,"x":358.15,"y":150.73},{"time":1,"x":413.25,"y":162.74},{"time":1.1,"x":460.51,"y":189.3},{"time":1.2,"x":473.57,"y":215.18},{"time":1.3,"x":473.88,"y":260.68}],"scale":[{"time":0.2,"x":1.421,"y":1.421},{"time":1.4}]}}}}},[0]]],0,0,[0],[-1],[109]],[[[70,"nft",[{"metallic":0.245},{},{},{},{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{},{},{},{},{}]]],0,0,[0],[8],[8]],[[{"name":"3","rect":{"x":1,"y":1,"width":66,"height":68},"offset":{"x":-1.5,"y":-0.5},"originalSize":{"width":71,"height":69},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-33,-34,0,33,-34,0,-33,34,0,33,34,0],"indexes":[0,1,2,2,1,3],"uv":[1,68,67,68,1,0,67,0],"nuv":[0.014084507042253521,0,0.9436619718309859,0,0.014084507042253521,0.9855072463768116,0.9436619718309859,0.9855072463768116],"minPos":{"x":-33,"y":-34,"z":0},"maxPos":{"x":33,"y":34,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[110]],[[{"name":"mask","rect":{"x":0,"y":0,"width":516,"height":714},"offset":{"x":0,"y":0},"originalSize":{"width":516,"height":714},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-258,-357,0,258,-357,0,-258,357,0,258,357,0],"indexes":[0,1,2,2,1,3],"uv":[0,714,516,714,0,0,516,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-258,"y":-357,"z":0},"maxPos":{"x":258,"y":357,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[111]],[[{"name":"cal","rect":{"x":0,"y":0,"width":121,"height":121},"offset":{"x":0,"y":0},"originalSize":{"width":121,"height":121},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60.5,-60.5,0,60.5,-60.5,0,-60.5,60.5,0,60.5,60.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,121,121,121,0,0,121,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60.5,"y":-60.5,"z":0},"maxPos":{"x":60.5,"y":60.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[112]],[[{"name":"Vector","rect":{"x":1,"y":0,"width":35,"height":63},"offset":{"x":0.5,"y":0},"originalSize":{"width":36,"height":63},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-17.5,-31.5,0,17.5,-31.5,0,-17.5,31.5,0,17.5,31.5,0],"indexes":[0,1,2,2,1,3],"uv":[1,63,36,63,1,0,36,0],"nuv":[0.027777777777777776,0,1,0,0.027777777777777776,1,1,1],"minPos":{"x":-17.5,"y":-31.5,"z":0},"maxPos":{"x":17.5,"y":31.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[113]],[[{"name":"btn2","rect":{"x":0,"y":0,"width":282,"height":112},"offset":{"x":0,"y":0},"originalSize":{"width":282,"height":112},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-141,-56,0,141,-56,0,-141,56,0,141,56,0],"indexes":[0,1,2,2,1,3],"uv":[0,112,282,112,0,0,282,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-141,"y":-56,"z":0},"maxPos":{"x":141,"y":56,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[114]],[[{"name":"2","rect":{"x":6,"y":0,"width":65,"height":68},"offset":{"x":1.5,"y":0},"originalSize":{"width":74,"height":68},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-32.5,-34,0,32.5,-34,0,-32.5,34,0,32.5,34,0],"indexes":[0,1,2,2,1,3],"uv":[6,68,71,68,6,0,71,0],"nuv":[0.08108108108108109,0,0.9594594594594594,0,0.08108108108108109,1,0.9594594594594594,1],"minPos":{"x":-32.5,"y":-34,"z":0},"maxPos":{"x":32.5,"y":34,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[115]],[[[35,"wall",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{},{},{}],[[[{},"mainColor",8,[4,16777215]],{},{},{},{}],11,0,0,0,0]]],0,0,[0],[8],[8]],[[{"name":"usdc","rect":{"x":0,"y":0,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-32,-32,0,32,-32,0,-32,32,0,32,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,64,64,0,0,64,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-32,"y":-32,"z":0},"maxPos":{"x":32,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[116]],[[{"name":"bottom","rect":{"x":0,"y":0,"width":780,"height":176},"offset":{"x":0,"y":0},"originalSize":{"width":780,"height":176},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-390,-88,0,390,-88,0,-390,88,0,390,88,0],"indexes":[0,1,2,2,1,3],"uv":[0,176,780,176,0,0,780,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-390,"y":-88,"z":0},"maxPos":{"x":390,"y":88,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[117]],[[[35,"outline",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainColor",8,[4,3691053055]]],11]]],0,0,[0],[8],[118]],[[[20,".bin",2275914951,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":83608,"length":12000,"count":6000,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":83608,"count":1493,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.00984705425798893,-0.010095063596963882,-0.009847056120634079],"maxPosition",8,[1,0.00984705239534378,0.010034577921032906,0.00984705239534378]]],-1],0,0,[],[],[]],[[[67,"yuanzui"],[84,"yuanzui",[-2],[39,"74FGXsdUxZmIgmC0YbZvDA",null,null,null,-1,0]],[85,"pCylinder1",1,[[96,-3,[28,"a7SWzxwlJasZzP5UONFtSg"],[0],[5],1]],[39,"26JVbxqRlcn7nVpbIBRBTp",null,null,null,1,0]]],0,[0,10,1,0,-1,2,0,0,2,0,15,1,3],[0,0],[-1,3],[119,31]],[[[68,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"DCC_APP_NAME":5},{},{},{}],[[[{"albedoScale":0.800000011920929},"mainColor",8,[4,4290559164]],{},{},{}],11,0,0,0]]],0,0,[0],[8],[120]],[[[35,"bottom",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_ALPHA_TEST":true},{},{},{},{}],[[[{"alphaThreshold":0,"occlusion":0.222,"roughness":0.453,"metallic":0.157,"specularIntensity":0.453},"mainTexture",6,0,"pbrMap",6,1],{},{},{},{}],11,0,0,0,0]]],0,0,[0,0,0],[9,16,8],[121,122,8]],[[{"name":"hd","rect":{"x":0,"y":0,"width":500,"height":138},"offset":{"x":0,"y":0},"originalSize":{"width":500,"height":138},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-250,-69,0,250,-69,0,-250,69,0,250,69,0],"indexes":[0,1,2,2,1,3],"uv":[0,138,500,138,0,0,500,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-250,"y":-69,"z":0},"maxPos":{"x":250,"y":69,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[123]],[[{"name":"bg","rect":{"x":0,"y":0,"width":516,"height":812},"offset":{"x":0,"y":0},"originalSize":{"width":516,"height":812},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-258,-406,0,258,-406,0,-258,406,0,258,406,0],"indexes":[0,1,2,2,1,3],"uv":[0,812,516,812,0,0,516,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-258,"y":-406,"z":0},"maxPos":{"x":258,"y":406,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[124]],[[{"name":"time","rect":{"x":57,"y":50,"width":120,"height":132},"offset":{"x":2,"y":-1},"originalSize":{"width":230,"height":230},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-66,0,60,-66,0,-60,66,0,60,66,0],"indexes":[0,1,2,2,1,3],"uv":[57,180,177,180,57,48,177,48],"nuv":[0.24782608695652175,0.20869565217391303,0.7695652173913043,0.20869565217391303,0.24782608695652175,0.782608695652174,0.7695652173913043,0.782608695652174],"minPos":{"x":-60,"y":-66,"z":0},"maxPos":{"x":60,"y":66,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[125]],[[{"name":"coin","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[126]]]]
