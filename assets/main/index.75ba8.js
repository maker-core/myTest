System.register("chunks:///_virtual/app.ts",["cc","./ResMgr.ts","./Message.ts"],(function(e){var s,t,n,a,c;return{setters:[function(e){s=e.cclegacy,t=e.find,n=e.instantiate},function(e){a=e.ResMgr},function(e){c=e.Message}],execute:function(){s._RF.push({},"8d593AQkSdEFYxZSVYq20cQ","app",void 0);e("Tost",(e=>{let s=t("Mian/Canvas");s||(s=t("Canvas"));const i=a.Instance.getAsset("Sounds","Message"),o=n(i);if(!s.getChildByName("Message")){s.addChild(o);o.getComponent(c).setValue(e)}}));s._RF.pop()}}}));

System.register("chunks:///_virtual/AudioMgr.ts",["cc","./ResMgr.ts"],(function(s){var o,t,n,u;return{setters:[function(s){o=s.cclegacy,t=s.Component,n=s.AudioSource},function(s){u=s.ResMgr}],execute:function(){o._RF.push({},"dfc68ApNu9H27Pz05ghRcER","AudioMgr",void 0);class e extends t{constructor(){super(...arguments),this.sounds={}}onLoad(){e.Instance?this.destroy():e.Instance=this}play(s,o){if(!this.sounds[s]){const o=u.Instance.getAsset("Sounds",`${s}`),t=new n(s);t.clip=o,this.sounds[s]=t}o.loop&&(this.sounds[s].loop=o.loop),o.playOnAwake&&(this.sounds[s].playOnAwake=o.playOnAwake),o.volume&&(this.sounds[s].volume=o.volume),this.sounds[s].play()}pause(s){this.sounds[s]&&this.sounds[s].pause()}stop(s){this.sounds[s]&&this.sounds[s].stop()}stopAll(){for(let s in this.sounds)this.sounds[s].stop()}getAudioSourceByName(s){if(this.sounds[s])return this.sounds[s];console.error(`${s} 不存在`)}}s("AudioMgr",e),e.Instance=void 0,o._RF.pop()}}}));

System.register("chunks:///_virtual/BulletFrame.ts",["./rollupPluginModLoBabelHelpers.js","cc","./UiMgr.ts","./AudioMgr.ts"],(function(e){var t,i,n,o,r,a,s,c,l,p;return{setters:[function(e){t=e.applyDecoratedDescriptor,i=e.initializerDefineProperty},function(e){n=e.cclegacy,o=e.SpriteFrame,r=e._decorator,a=e.Node,s=e.Label,c=e.Sprite},function(e){l=e.UICtrl},function(e){p=e.AudioMgr}],execute:function(){var u,m,h,g,b,d,v,f,y;n._RF.push({},"cdf2eac9r1DIJdgYX9SjOO8","BulletFrame",void 0);const{ccclass:k,property:w}=r;e("BulletFrame",(u=k("BulletFrame"),m=w(o),h=w(o),g=w(o),u((v=t((d=class extends l{constructor(){super(...arguments),i(this,"icon1",v,this),i(this,"icon2",f,this),i(this,"icon3",y,this),this.type=1}onLoad(){super.onLoad(),this.view["mask/close"].on(a.EventType.TOUCH_END,(e=>{e.propagationStopped=!0,p.Instance.play("djClick",{playOnAwake:!0}),this.node.active=!1}))}close(){this.node.active=!1}setType(e){switch(this.type=e,e){case 1:this.view["mask/title/Label"].getComponent(s).string="Remove",this.view["mask/cal/icon"].getComponent(c).spriteFrame=this.icon1,this.view["mask/Label"].getComponent(s).string="Remove 3 objects from the grid and place them in the temporary storage.";break;case 2:this.view["mask/title/Label"].getComponent(s).string="Scrape",this.view["mask/cal/icon"].getComponent(c).spriteFrame=this.icon2,this.view["mask/Label"].getComponent(s).string="Automatically gather and place objects together";break;case 3:this.view["mask/title/Label"].getComponent(s).string="Disruption",this.view["mask/cal/icon"].getComponent(c).spriteFrame=this.icon3,this.view["mask/Label"].getComponent(s).string="Disrupt the pile of items"}}update(e){}}).prototype,"icon1",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),f=t(d.prototype,"icon2",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),y=t(d.prototype,"icon3",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=d))||b));n._RF.pop()}}}));

System.register("chunks:///_virtual/config.ts",["cc"],(function(e){var t;return{setters:[function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"5fb11dsqL9C1JmVA7jcjYFI","config",void 0);e("baseUrl1","");let c=e("baseUrl","");c=e("baseUrl","https://flaskfi.xyz/game/"),t._RF.pop()}}}));

System.register("chunks:///_virtual/EventMgr.ts",["cc"],(function(n){var e,t,s;return{setters:[function(n){e=n.cclegacy,t=n.Component,s=n.EventTarget}],execute:function(){e._RF.push({},"a0520KQvgVIhr8MfV5+NVnO","EventMgr",void 0);class c extends t{onLoad(){c.Instance?this.destroy():c.Instance=new s}}n("EventMgr",c),c.Instance=void 0,e._RF.pop()}}}));

System.register("chunks:///_virtual/GameData.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResMgr.ts","./AudioMgr.ts","./EventMgr.ts","./GameFiMgr.ts"],(function(e){var t,n,o,i,a,r,s,c,d,u;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.initializerDefineProperty},function(e){o=e.cclegacy,i=e.ImageAsset,a=e._decorator,r=e.Component},function(e){s=e.ResMgr},function(e){c=e.AudioMgr},function(e){d=e.EventMgr},function(e){u=e.GameFiMgr}],execute:function(){var p,l,m,g,f,h;o._RF.push({},"b0fb1qHVZZJ2ryeBmIZ5PQb","GameData",void 0);const{ccclass:v,property:M}=a;e("GameData",(p=v("GameData"),l=M(i),p(((h=class e extends r{constructor(){super(...arguments),this.viewModel=void 0,n(this,"image",f,this)}onLoad(){if(e.Instance)return void this.destroy();e.Instance=this,this.node.addComponent(s),this.node.addComponent(c),this.node.addComponent(d),this.node.addComponent(u);const t=window?.Telegram?.WebApp;t&&(t?.ready(),t?.expand(),t.isClosingConfirmationEnabled=!0)}start(){}}).Instance=void 0,f=t((g=h).prototype,"image",[l],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),m=g))||m));o._RF.pop()}}}));

System.register("chunks:///_virtual/GameFiMgr.ts",["cc","./index5.ts","./EventMgr.ts"],(function(t){var n,e,o,s,c,i,a;return{setters:[function(t){n=t.cclegacy,e=t.Component},function(t){o=t.TonConnectUI,s=t.GameFi,c=t.Address,i=t.toNano},function(t){a=t.EventMgr}],execute:function(){n._RF.push({},"aad960tLrFGW6F0FqomlQl4","GameFiMgr",void 0);class d extends e{constructor(){super(...arguments),this._cocosGameFi=void 0,this._connectUI=void 0,this._bTonInit=!1,this.address=""}onLoad(){d.Instance?this.destroy():(d.Instance=this,this.initTonConnect())}async initTonConnect(){let t=new o({manifestUrl:"https://ton-connect.github.io/demo-dapp-with-wallet/tonconnect-manifest.json"});this._cocosGameFi=await s.create({network:"mainnet",connector:t,merchant:{jettonAddress:c.parse("EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs"),tonAddress:"UQAMNl5M8dv_x5gEjAGzmARBUaey6qME2zwghgk0Jbd6kZB0"}}),this._connectUI=this._cocosGameFi.walletConnector;this._connectUI.onModalStateChange((t=>{console.log("model state changed! : "),this.updateConnect()})),this._connectUI.onStatusChange((t=>{console.log("wallet info status changed : "),this.updateConnect(),a.Instance.emit("wallet",t)}));this._bTonInit=!0,this.updateConnect()}isConnected(){return this._connectUI?this._connectUI.connected:(console.error("ton ui not inited!"),!1)}updateConnect(){if(this.isConnected()){const t=this._connectUI.account.address;this.address=t}else console.log("wallet not connected")}async openModal(){this._bTonInit&&(this.isConnected()?this._connectUI.disconnect():this._connectUI.openModal())}async sendTransaction(t){return await this._cocosGameFi.transferJetton({to:c.parse("UQC_CsdAPMHTrZmInCGZaPmwPzOmxSZKCpx2HuH_anhcxYZG"),amount:i(t)})}start(){}}t("GameFiMgr",d),d.Instance=void 0,n._RF.pop()}}}));

System.register("chunks:///_virtual/index.ts",["cc"],(function(t){var e,p,a;return{setters:[function(t){e=t.cclegacy,p=t.Prefab,a=t.AudioClip}],execute:function(){e._RF.push({},"575f06Qf8dBlrkz2fzrc3qq","index",void 0);t("resPkg",{GUI:{urls:[{tooTip:"u",type:"0",path:"eggcoin",assetType:p},{tooTip:"1",type:"0",path:"Breakfast_Sandwich",assetType:p},{tooTip:"3",type:"0",path:"Croissant_Dough",assetType:p},{tooTip:"h",type:"1",path:"duck",assetType:p},{tooTip:"t",type:"1",path:"usdc",assetType:p},{tooTip:"2",type:"0",path:"Burger_Wrapped",assetType:p},{tooTip:"4",type:"1",path:"IceCream",assetType:p},{tooTip:"5",type:"1",path:"Ketchup_Cup",assetType:p},{tooTip:"6",type:"1",path:"Waffle_Plain",assetType:p},{tooTip:"7",type:"1",path:"Chip_Bag",assetType:p},{tooTip:"8",type:"1",path:"Corndog",assetType:p},{tooTip:"9",type:"2",path:"Loaf_Cinnamon",assetType:p},{tooTip:"a",type:"2",path:"Loaf_White",assetType:p},{tooTip:"b",type:"2",path:"Wreath_Light",assetType:p},{tooTip:"c",type:"2",path:"ToGo_Bag_W",assetType:p},{tooTip:"d",type:"1",path:"Banana_Yellow",assetType:p},{tooTip:"e",type:"1",path:"Coconut_Half",assetType:p},{tooTip:"f",type:"1",path:"Pomegranate",assetType:p},{tooTip:"g",type:"1",path:"Melon_Yellow_Half",assetType:p}]},Sounds:{urls:[{path:"app",assetType:a},{path:"bg",assetType:a},{path:"djClick",assetType:a},{path:"mdl",assetType:a},{path:"mianbao",assetType:a},{path:"other",assetType:a},{path:"qian",assetType:a},{path:"token",assetType:a},{path:"win",assetType:a},{path:"xiaoshi",assetType:a},{path:"Message",assetType:p},{path:"Loading",assetType:p}]}});e._RF.pop()}}}));

System.register("chunks:///_virtual/index2.ts",["cc","./moment.mjs_cjs=&original=.js","./moment.js"],(function(t){var n,o;return{setters:[function(t){n=t.cclegacy},null,function(t){o=t.default}],execute:function(){t({addSeparatorToNumber:function(t,n){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g,n)},countdown:function(t,n){const e=n,r=o.duration(e.diff(t));if(r.asMilliseconds()<=0)return{end:!0};const s=Math.floor(r.asDays()),u=Math.floor(r.hours()),a=Math.floor(r.minutes())>9?Math.floor(r.minutes()):`0${Math.floor(r.minutes())}`,i=Math.floor(r.seconds())>9?Math.floor(r.seconds()):`0${Math.floor(r.seconds())}`;return{days:s,hours:u,minutes:a,seconds:i,end:!1}},debounce:function(t,n){let o=null;return function(){for(var e=arguments.length,r=new Array(e),s=0;s<e;s++)r[s]=arguments[s];o&&clearTimeout(o),o=setTimeout((()=>{t.apply(this,r)}),n)}},getRandom:function(t,n){return t=Math.ceil(t),n=Math.floor(n),Math.floor(Math.random()*(n-t+1))+t}}),n._RF.push({},"75244sNKmhGJIbha+4+BzAW","index",void 0);t("keyObject",(t=>{let n="";for(let o in t)n+=o+"="+t[o]+"&";return""!==n&&(n=n.substr(0,n.lastIndexOf("&"))),n}));n._RF.pop()}}}));

System.register("chunks:///_virtual/index3.ts",["cc","./index.mjs_cjs=&original=.js","./Toggle.ts","./index.js"],(function(e){var t,n,c;return{setters:[function(e){t=e.cclegacy},null,function(e){n=e.Toggle},function(e){c=e.default}],execute:function(){t._RF.push({},"b9f29VM62hM4J2eMYafEWHY","index",void 0);e("ReactApp",(e=>c.createElement("div",null,c.createElement("h1",{className:"test-head"},"Hello React.js with Cocos!!!!!!"),c.createElement("div",{className:"test-button"},c.createElement(n,e.toggleVM),c.createElement("button",{onClick:()=>e.onClickButton()},e.buttonText)),c.createElement("p",{className:"test-input-head"},"▼ HTML input"),c.createElement("input",{type:"text",className:"test-input"}),c.createElement("img",{src:e.imgUrl,className:"test-img",alt:"TestIMG"}))));t._RF.pop()}}}));

System.register("chunks:///_virtual/index4.ts",["cc","./request.ts"],(function(e){var t,r;return{setters:[function(e){t=e.cclegacy},function(e){r=e.default}],execute:function(){e({buyProductBag:function(e){return r({data:e||null,method:"GET",url:"gameUser/buyProductBag"})},buyPropProduct:function(e){return r({data:e||null,method:"GET",url:"game/buyPropProduct"})},connectWalet:function(e){return r({data:e||null,method:"GET",url:"gameUser/connectWalet"})},gameOver:function(e){return r({data:e||null,method:"POST",url:"game/gameOver"})},generateModelSorting:function(e){return r({data:e||null,method:"GET",url:"rule/generateModelSorting"})},getAllShop:function(e){return r({data:e||null,method:"GET",url:"shop/getAllShop"})},getFriendPassNumber:function(e){return r({data:e||null,method:"GET",url:"gameUser/getFriendPassNumber"})},getGameUserInfo:function(e){return r({data:e||null,method:"GET",url:"gameUser/getGameUserInfo"})},getLatestRecord:function(e){return r({data:e||null,method:"GET",url:"record/getLatestRecord"})},getMyWithdrawRecord:function(e){return r({data:e||null,method:"GET",url:"withdraw/getMyWithdrawRecord"})},getPassNumber:function(e){return r({data:e||null,method:"GET",url:"gameUser/getPassNumber"})},getPrice:function(e){return r({data:e||null,method:"GET",url:"getPrice"})},getReferenceNumber:function(e){return r({data:e||null,method:"GET",url:"gameUser/getReferenceNumber"})},getUserPoint:function(e){return r({data:e||null,method:"GET",url:"point-ranking/getUserPoint"})},insertWithdrawRecord:function(e){return r({data:e||null,method:"GET",url:"withdraw/insertWithdrawRecord"})},openNewGame:function(e){return r({data:e||null,method:"GET",url:"game/openNewGame"})},postTest:function(e){return r({data:e||null,method:"POST",url:"postTest"})}}),t._RF.push({},"c657fQy5bpLFLenBmom+S00","index",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/Item.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,o,r,n,s,a,l;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.initializerDefineProperty},function(t){o=t.cclegacy,r=t.Vec3,n=t._decorator,s=t.Component,a=t.RigidBody,l=t.Collider}],execute:function(){var c,u,p,m,d,h,g,y,f;o._RF.push({},"b08a3qMqrRKXaTPZOtmmSw2","Item",void 0);const{ccclass:b,property:v}=n;t("Item",(c=b("Item"),u=v(Number),p=v(r),m=v(r),c((g=e((h=class extends s{constructor(){super(...arguments),this.removed=!1,this.removedPos=void 0,this.playRmovedEff=!1,this.isTemp=!1,this.isBottom=!1,this.isClick=!1,i(this,"num",g,this),i(this,"rotation",y,this),i(this,"scale",f,this)}start(){}setUseGravity(t){const e=this.node.getComponent(a);e&&(e.useGravity=t)}setWorldPosition(t){let e=this.node.getWorldPosition();e.y+=t,this.node.setWorldPosition(e)}destoryCollider(){if(!this.isTemp){const t=this.node.getComponent(a);this.node.getComponent(l).isTrigger=!0,t&&(t.useGravity=!1,t.linearDamping=1,t.angularDamping=1)}}}).prototype,"num",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),y=e(h.prototype,"rotation",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new r(0,0,0)}}),f=e(h.prototype,"scale",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new r(1,1,1)}}),d=h))||d));o._RF.pop()}}}));

System.register("chunks:///_virtual/Loading.ts",["cc","./UiMgr.ts"],(function(o){var t,n,e,a;return{setters:[function(o){t=o.cclegacy,n=o.Node,e=o._decorator},function(o){a=o.UICtrl}],execute:function(){var c;t._RF.push({},"263215wGV9AUaXxJ2fN4u9j","Loading",void 0);const{ccclass:s,property:r}=e;o("Loading",s("Loading")(c=class extends a{onLoad(){super.onLoad()}start(){this.node.on(n.EventType.TOUCH_END,(async o=>{o.propagationStopped=!0}))}})||c);t._RF.pop()}}}));

System.register("chunks:///_virtual/main",["./BulletFrame.ts","./Loading.ts","./Message.ts","./config.ts","./index.ts","./GameData.ts","./Item.ts","./Main.ts","./Play.ts","./Start.ts","./RankingList.ts","./Shopping.ts","./AudioMgr.ts","./EventMgr.ts","./GameFiMgr.ts","./ResMgr.ts","./UiMgr.ts","./app.ts","./index2.ts","./request.ts","./storage.ts","./type.ts","./index4.ts","./Toggle.ts","./index3.ts"],(function(){return{setters:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){}}}));

System.register("chunks:///_virtual/Main.ts",["./rollupPluginModLoBabelHelpers.js","cc","./UiMgr.ts","./index.ts","./ResMgr.ts","./AudioMgr.ts","./Item.ts","./index2.ts","./moment.mjs_cjs=&original=.js","./app.ts","./BulletFrame.ts","./index4.ts","./index.mjs_cjs=&original=2.js","./storage.ts","./moment.js","./index2.js"],(function(t){var e,i,s,a,n,o,l,h,r,c,m,p,u,g,v,d,C,y,T,w,f,O,b,I,S,M,k,E,P,_,A,N,D,L,U,B,x,G,R,F,H,j;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.initializerDefineProperty},function(t){s=t.cclegacy,a=t.Material,n=t.SpriteFrame,o=t.Prefab,l=t._decorator,h=t.sp,r=t.Sprite,c=t.Label,m=t.game,p=t.director,u=t.RigidBody,g=t.Node,v=t.instantiate,d=t.Vec3,C=t.MeshCollider,y=t.input,T=t.Input,w=t.Camera,f=t.geometry,O=t.PhysicsSystem,b=t.MeshRenderer,I=t.Animation,S=t.ProgressBar,M=t.tween},function(t){k=t.UICtrl},function(t){E=t.resPkg},function(t){P=t.ResMgr},function(t){_=t.AudioMgr},function(t){A=t.Item},function(t){N=t.getRandom,D=t.countdown},null,function(t){L=t.Tost},function(t){U=t.BulletFrame},function(t){B=t.generateModelSorting,x=t.openNewGame,G=t.gameOver},null,function(t){R=t.getStorageData,F=t.setStorageData},function(t){H=t.default},function(t){j=t.default}],execute:function(){var z,$,W,V,q,X,Z,J,K,Q,Y,tt,et,it,st;s._RF.push({},"a7d6dXfqilInpZcCfgaVlXs","Main",void 0);const{ccclass:at,property:nt}=l,{SkeletonData:ot}=h;var lt=function(t){return t[t.START=0]="START",t[t.MOVE=1]="MOVE",t[t.END=2]="END",t}(lt||{});t("Main",(z=at("Main"),$=nt(a),W=nt(n),V=nt(n),q=nt(o),X=nt(ot),Z=nt(ot),z((Q=e((K=class extends k{constructor(){super(...arguments),i(this,"material",Q,this),i(this,"tag",Y,this),i(this,"add",tt,this),i(this,"nft",et,this),i(this,"usdc",it,this),i(this,"coin",st,this),this.touchNode=null,this.allItem=[],this.collectPos=[],this.collectTiles=[],this.touchMaterial=null,this.temporaryItem=[],this.temporaryPos=[],this.currentLevel=1,this.gameStop=!1,this.clickPlay=!0,this.stage1=0,this.stage2=0,this.stage3=0,this.count=0,this.InitializedData=[],this.usdtCount=0,this.myCoinCount=0,this.gameDate=null,this.targetTime=null,this.tostTargetTime=null,this.timeStopMoment=null,this.timeStop=!1,this.continue=!0,this.percentage=0,this.lastTouchTime=Date.now(),this.startModes=new Map,this.touchType=lt.END}changeTag(){0==this.stage1||this.stage1<-1?(this.view["Canvas/ui/bottom/button/add"].getComponent(r).spriteFrame=this.add,this.view["Canvas/ui/bottom/button/add/Label"].getComponent(c).string=""):(this.view["Canvas/ui/bottom/button/add"].getComponent(r).spriteFrame=this.tag,this.view["Canvas/ui/bottom/button/add/Label"].getComponent(c).string=`${Math.abs(this.stage1)}`),0==this.stage2||this.stage2<-1?(this.view["Canvas/ui/bottom/button1/add"].getComponent(r).spriteFrame=this.add,this.view["Canvas/ui/bottom/button1/add/Label"].getComponent(c).string=""):(this.view["Canvas/ui/bottom/button1/add"].getComponent(r).spriteFrame=this.tag,this.view["Canvas/ui/bottom/button1/add/Label"].getComponent(c).string=`${Math.abs(this.stage2)}`),0==this.stage3||this.stage3<-1?(this.view["Canvas/ui/bottom/button2/add"].getComponent(r).spriteFrame=this.add,this.view["Canvas/ui/bottom/button2/add/Label"].getComponent(c).string=""):(this.view["Canvas/ui/bottom/button2/add"].getComponent(r).spriteFrame=this.tag,this.view["Canvas/ui/bottom/button2/add/Label"].getComponent(c).string=`${Math.abs(this.stage3)}`)}onLoad(){super.onLoad(),m.frameRate=120,p.preloadScene("gamePlay",(()=>{})),this.view["bottom/yuanzui/pCylinder1"].getComponent(u).useCCD=!0,this.dataInit()}start(){this.continue=!0,this.currentLevel=1,this.usdtCount=0,this.myCoinCount=0,this.changeTag(),this.collectPos=[],this.view.collectnox.children.map((t=>{this.collectPos.unshift(t.worldPosition),t.active=!1})),this.view.temporary.children.map((t=>{this.temporaryPos.push(t.worldPosition),t.active=!1})),this.view.temporary.active=!1,this.view["Canvas/ui/stop"].on(g.EventType.TOUCH_END,(t=>{if(t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),2==this.currentLevel){if(!this.targetTime)return void L("Please wait...");this.timeStopMoment||(this.timeStopMoment=H()),this.unschedule(this.updateTime)}this.view["Canvas/gameOver"].active=!0})),this.view["Canvas/gameOver/mask/close"].on(g.EventType.TOUCH_END,(t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/gameOver"].active=!1,2==this.currentLevel&&(this.timeStop=!0,this.schedule(this.updateTime,1)),this.gameStop=!1})),this.view["Canvas/gameOver/mask/continue"].on(g.EventType.TOUCH_END,(t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/gameOver"].active=!1,2==this.currentLevel&&(this.timeStop=!0,this.schedule(this.updateTime,1)),this.gameStop=!1})),this.view["Canvas/gameOver/mask/giveUp"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/gameOver"].active=!1,this.currentLevel=1,await this.submitGameOver("false"),p.loadScene("gamePlay")})),this.view["Canvas/Over/flied/timeOut/Layout/giveUp"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/Over"].active=!1,this.currentLevel=1,p.loadScene("gamePlay")})),this.view["Canvas/Over/flied/lose/Layout/giveUp"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/Over"].active=!1,this.currentLevel=1,p.loadScene("gamePlay")})),this.view["Canvas/Over/flied/lose/Layout/continue"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/Over"].active=!1,this.temporaryItem.forEach((t=>{t.getComponent(A).isBottom=!1})),this.view.temporary.active=!0,this.mvTemporary(),this.gameStop=!1})),this.view["Canvas/Over/win/continue"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["GameSpace/ItemSource"].removeAllChildren(),this.view["Canvas/Over"].active=!1,this.gameStop=!1,this.collectTiles=[],this.currentLevel=1,p.loadScene("gamePlay")})),this.view["Canvas/gameOver/mask/setting/sound/Toggle"].on("toggle",(t=>{_.Instance.play("djClick",{playOnAwake:!0}),t.isChecked?_.Instance.play("bg",{playOnAwake:!0,loop:!0,volume:.4}):_.Instance.stop("bg")})),this.view["Canvas/gameOver/mask/setting/music/Toggle"].on("toggle",(t=>{_.Instance.play("djClick",{playOnAwake:!0}),t.isChecked?this.clickPlay=!0:this.clickPlay=!1})),this.view["Canvas/ui/bottom/button"].on(g.EventType.TOUCH_END,(t=>{if(t.propagationStopped=!0,_.Instance.play("app",{playOnAwake:!0}),0==this.stage1)return this.view["Canvas/BulletFrame"].active=!0,this.view["Canvas/BulletFrame"].getComponent(U).setType(1),void(this.gameStop=!0);1==Math.abs(this.stage1)&&(this.gameStop=!1,0!=this.collectTiles.length?this.limitationSix(!1)&&(this.temporaryItem.forEach((t=>{t.getComponent(A).isBottom=!1})),this.view.temporary.active=!0,this.mvTemporary(),this.stage1--,this.changeTag()):L("No items were collected"))})),this.view["Canvas/BulletFrame/mask/close"].on(g.EventType.TOUCH_END,(t=>{t.propagationStopped=!0,_.Instance.play("app",{playOnAwake:!0}),this.view["Canvas/BulletFrame"].active=!1,this.gameStop=!1})),this.view["Canvas/ui/bottom/button1"].on(g.EventType.TOUCH_END,(t=>{if(t.propagationStopped=!0,_.Instance.play("app",{playOnAwake:!0}),0==this.stage2)return this.view["Canvas/BulletFrame"].active=!0,this.view["Canvas/BulletFrame"].getComponent(U).setType(2),void(this.gameStop=!0);if(1==Math.abs(this.stage2))if(0!=this.collectTiles.length){{let t=this.collectTiles.filter(((t,e)=>this.collectTiles.some(((i,s)=>t.name==i.name&&e!=s))));if(t.length>0){const i=t[0].name,s=[];for(var e=0;e<this.allItem.length;++e)if(this.allItem[e].name==i){s.push(...this.allItem.splice(e,1));break}s.forEach((t=>{let e=!1;for(var i=this.collectTiles.length-1;i>=0;--i)if(this.collectTiles[i].name==t.name){t.getComponent(A).destoryCollider(),t.getComponent(A).setUseGravity(!1),this.collectTiles.splice(i+1,0,t),e=!0;break}e||this.collectTiles.push(t)})),this.playAnimationStart(i)}else{if(!(this.collectTiles.length<=6))return void L("Insufficient vacancies");{const t=this.collectTiles[0].name,i=[];for(let s=0;s<2;s++)for(e=0;e<this.allItem.length;++e)if(this.allItem[e].name==t){i.push(...this.allItem.splice(e,1));break}i.forEach((t=>{let e=!1;for(var i=this.collectTiles.length-1;i>=0;--i)if(this.collectTiles[i].name==t.name){t.getComponent(A).destoryCollider(),t.getComponent(A).setUseGravity(!1),this.collectTiles.splice(i+1,0,t),e=!0;break}e||this.collectTiles.push(t)})),this.playAnimationStart(t)}}}this.stage2--,this.changeTag(),this.gameStop=!1}else L("No items were collected")})),this.view["Canvas/ui/bottom/button2"].on(g.EventType.TOUCH_END,(async t=>{if(t.propagationStopped=!0,_.Instance.play("app",{playOnAwake:!0}),0==this.stage3)return this.view["Canvas/BulletFrame"].active=!0,this.view["Canvas/BulletFrame"].getComponent(U).setType(3),void(this.gameStop=!0);1==Math.abs(this.stage3)&&(this.shuffle(),this.stage3--,this.changeTag()),this.gameStop=!1})),this.view["Canvas/BulletFrame/mask/Button"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0});const e=this.view["Canvas/BulletFrame"].getComponent(U);1==e.type?this.stage1--:2==e.type?this.stage2--:this.stage3--,this.gameStop=!1,await this.buyAndShareItem(),this.changeTag(),e.close()})),this.view["Canvas/Tost/yes"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/Tost"].active=!1,this.gameStop=!1,this.unschedule(this.updateTostTime),this.startGame(1)})),this.view["Canvas/Tost/no"].on(g.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,_.Instance.play("djClick",{playOnAwake:!0}),this.view["Canvas/Tost"].active=!1,this.unschedule(this.updateTostTime),this.gameStop=!1,this.startGame(0)}))}async dataInit(){const t=(await B()).result;if(t){const e=[];for(let i in t)e.push(i);e.forEach((e=>{if(t[e]){j.AES.decrypt(t[e],"bc1ptyc7v0hk0w48vqhxf86j7uetu42kf4c5z8nn6llv6f7l2g6cr3nszftf32").toString(j.enc.Utf8).split("").forEach((t=>{const i=E.GUI.urls.find((e=>e.tooTip==t));this.InitializedData.push({...i,level:e}),this.count++}))}}))}this.InitializedData.forEach((t=>{"usdc"!=t.path&&"eggcoin"!=t.path&&(this.startModes.has(t.path)||this.startModes.set(t.path,t))})),this.count=this.count+this.startModes.size;const e=R("user_info");e.buy_bag>0?(this.view["Canvas/Tost"].active=!0,this.view["Canvas/Tost/prop/Label"].getComponent(c).string=e.buy_bag,this.gameStop=!0,this.initTostTime()):this.startGame(0)}async initLevel1(){const t=this.view["GameSpace/ItemSource"];t.setPosition(0,20,0);const e=E.GUI.urls.slice(2,5);for(let i of e){const e=P.Instance.getAsset("GUI",i.path);for(let i=0;i<3;i++){const i=v(e);i.setPosition(1*Math.cos(N(0,360)*(Math.PI/180)),i.position.y,1*Math.cos(N(0,360)*(Math.PI/180))),i.eulerAngles=new d(N(0,360),N(0,360),N(0,360)),i.level=0,this.allItem.push(i),i.getComponent(u).linearDamping=.5,i.getComponent(u).angularDamping=1,i.getComponent(u).mass=6e6,i.getComponent(u).useCCD=!0,i.getComponent(C).isTrigger=!0,t.addChild(i),await new Promise((t=>{const e=setTimeout((()=>{clearTimeout(e),t(1),i.getComponent(C).isTrigger=!1}),1)}))}}}async initGameId(t){const e=R("user_info"),i=await x({ton_user_id:e.ton_user_id,game_user_id:e.game_user_id,bag:t});200==i.code&&(this.gameDate=i.result)}onEnable(){y.on(T.EventType.TOUCH_START,this.onTouchStart,this),y.on(T.EventType.TOUCH_END,this.onTouchEnd,this),y.on(T.EventType.TOUCH_MOVE,this.onTouchMove,this),y.on(T.EventType.TOUCH_CANCEL,this.onTouchCancel,this)}onDisable(){y.off(T.EventType.TOUCH_START,this.onTouchStart,this),y.off(T.EventType.TOUCH_END,this.onTouchEnd,this),y.off(T.EventType.TOUCH_MOVE,this.onTouchMove,this),y.on(T.EventType.TOUCH_CANCEL,this.onTouchCancel,this),this.unscheduleAllCallbacks()}checkItem(t){return E.GUI.urls.some((e=>e.path==t.name))}onTouchCancel(t){this.setNodeMaterial(this.touchNode,null,!1)}findMyModule(t){if(0==t.length)return null;let e=t[0].distance,i=0;return t.forEach(((t,s)=>{t.distance<e&&(e=t.distance,i=s)})),this.checkItem(t[i].collider.node)?t[i].collider:(t.splice(i,1),this.findMyModule(t))}onTouchStart(t){if(this.touchType!=lt.END)return;if(this.touchType=lt.START,window?.Telegram?.WebApp.HapticFeedback.selectionChanged(),this.lastTouchTime&&Date.now()-this.lastTouchTime<100)return;if(this.lastTouchTime=Date.now(),this.gameStop)return;const e=t.getLocation(),i=this.node.parent.getChildByName("Main Camera").getComponent(w),s=new f.Ray;i?.screenPointToRay(e.x,e.y,s);if(O.instance.raycast(s,4294967295,1e7,!0)){const t=O.instance.raycastResults,e=this.findMyModule(t);e&&(this.setNodeMaterial(e.node,this.material,!0),e.node.getComponent(A).isTemp||(e.node.getComponent(A).setUseGravity(!1),e.node.getComponent(A).setWorldPosition(.8*this.percentage)),this.touchNode=e.node,this.clickPlay&&("Chip_Bag"==e.node.name||"ToGo_Bag_W"==e.node.name?_.Instance.play("mdl",{playOnAwake:!0}):"Wreath_Light"==e.node.name||"Loaf_Cinnamon"==e.node.name||"Loaf_White"==e.node.name||"Breakfast_Sandwich"==e.node.name?_.Instance.play("mianbao",{playOnAwake:!0}):"usdc"==e.node.name||"eggcoin"==e.node.name?_.Instance.play("token",{playOnAwake:!0}):_.Instance.play("other",{playOnAwake:!0})))}}onTouchEnd(t){if(this.touchType!=lt.START&&this.touchType!=lt.MOVE)return;if(this.touchType=lt.END,this.gameStop)return;const e=t.getLocation(),i=this.node.parent.getChildByName("Main Camera").getComponent(w),s=new f.Ray;i?.screenPointToRay(e.x,e.y,s);if(O.instance.raycast(s,4294967295,1e7,!0)){const t=O.instance.raycastResults,e=this.findMyModule(t);if(e)if(this.touchNode==e.node){if(e.node.getComponent(A).isTemp||this.touchNode.getComponent(A).setUseGravity(!0),this.setNodeMaterial(this.touchNode,null,!1),2==this.currentLevel&&this.initGravity(),e.node.getComponent(A).isBottom)return;this.chooseItem(this.touchNode)}else this.setNodeMaterial(this.touchNode,null,!1);else this.setNodeMaterial(this.touchNode,null,!1)}this.touchType=lt.END}onTouchMove(t){if(this.touchType!=lt.START&&this.touchType!=lt.MOVE)return;if(this.touchType=lt.MOVE,this.gameStop)return;const e=t.getLocation(),i=this.node.parent.getChildByName("Main Camera").getComponent(w),s=new f.Ray;i?.screenPointToRay(e.x,e.y,s);if(O.instance.raycast(s,4294967295,1e7,!0)){const t=O.instance.raycastResults,e=this.findMyModule(t);if(e){if(this.touchNode&&this.touchNode==e.node)return;this.touchNode?.getComponent(A)?.setUseGravity(!0),this.setNodeMaterial(this.touchNode,null,!1),this.setNodeMaterial(e.node,this.material,!0),e.node.getComponent(A).setUseGravity(!1),e.node.getComponent(A).setWorldPosition(.8*this.percentage),this.touchNode=e.node}else if(this.touchNode)return void(this.touchNode.active&&(this.touchNode?.getComponent(A)?.setUseGravity(!0),this.setNodeMaterial(this.touchNode,null,!1)))}}setNodeMaterial(t,e,i){void 0===i&&(i=!0),t&&"usdc"!=t.name&&"eggcoin"!=t.name&&0!=t?.children?.length&&t.children?.forEach((t=>{if(i)t.getComponent(b)&&(this.touchMaterial=t.getComponent(b).materials[0],t.getComponent(b).setMaterial(e,0)),this.setNodeMaterial(t,e,i);else{if(t.getComponent(b)){const e=new a;e.copy(this.touchMaterial),t.getComponent(b).setMaterial(e,0)}this.setNodeMaterial(t,e,i)}}))}chooseItem(t){let e=t.name;if(t.getComponent(A).destoryCollider(),t.getComponent(A).isTemp){for(var i=0;i<this.temporaryItem.length;++i)if(this.temporaryItem[i].uuid==t.uuid){this.temporaryItem.splice(i,1);break}}else for(i=0;i<this.allItem.length;++i)if(this.allItem[i].uuid==t.uuid){this.allItem.splice(i,1);break}let s=!1;for(i=this.collectTiles.length-1;i>=0;--i)if(this.collectTiles[i].name==e){this.collectTiles.splice(i+1,0,t),s=!0;break}s||this.collectTiles.push(t),this.playAnimationStart(e)}playAnimation(){this.view.temporary.getComponent(I).play("shake")}limitationSix(t){if(this.temporaryItem.length>6)return t?this.view["Canvas/Over/flied/lose/Layout/continue"].active=!1:this.playAnimation(),!1;if(this.collectTiles.length>3){const e=this.collectTiles.slice(0,3);if(this.temporaryItem.length+e.length>6)return t?this.view["Canvas/Over/flied/lose/Layout/continue"].active=!1:this.playAnimation(),!1;this.temporaryItem.push(...e),this.collectTiles=this.collectTiles.slice(3)}else{const e=this.collectTiles.slice(0,this.collectTiles.length);if(this.temporaryItem.length+e.length>6)return t?this.view["Canvas/Over/flied/lose/Layout/continue"].active=!1:this.playAnimation(),!1;this.temporaryItem.push(...e),this.collectTiles=this.collectTiles.slice(this.collectTiles.length)}return!0}checkResult(){if(this.collectTiles.length>=7)this.gameStop=!0,this.view["Canvas/Over"].active=!0,this.view["Canvas/Over/flied"].active=!0,this.view["Canvas/Over/win"].active=!1,this.continue?(this.renderFiled(),this.limitationSix(!0),this.continue=!1):(this.unscheduleAllCallbacks(),this.submitGameOver("false"),this.renderFiled(),this.view["Canvas/Over/flied/lose/Layout/continue"].active=!1);else if(0==this.collectTiles.length&&0==this.allItem.length)if(1==this.currentLevel){this.init2(this.InitializedData);const t=setTimeout((()=>{this.currentLevel=2,clearTimeout(t)}),1e3)}else this.gameStop=!0,this.view["Canvas/Over"].active=!0,this.view["Canvas/Over/flied"].active=!1,this.view["Canvas/Over/win"].active=!0,this.renderWin(),_.Instance.play("win",{playOnAwake:!0});console.log(this.allItem.length,this.count)}renderFiled(){this.view["Canvas/Over/flied/timeOut"].active=!1,this.view["Canvas/Over/flied/lose"].active=!0,this.view["Canvas/Over/flied/lose/detail/usdc/Label1"].getComponent(c).string=`${(this.usdtCount/30).toFixed(1)}`,this.view["Canvas/Over/flied/lose/detail/myToken/Label1"].getComponent(c).string=`${Math.floor(this.myCoinCount)}`;const t=R("user_info");this.view["Canvas/Over/flied/lose/coinBox/coin/Label"].getComponent(c).string=t.points,this.view["Canvas/Over/flied/lose/coinBox/usdt/Label"].getComponent(c).string=t.usdt_coin;const e=this.view["Canvas/Over/flied/lose/ProgressBar"].getComponent(S);e.progress=0;const i=1-this.allItem.length/this.count,s=this.view["Canvas/Over/flied/lose/ProgressBar/Bar/USDT/Label"].getComponent(c);M(e).to(.5,{progress:i},{onUpdate:(t,e)=>{s.string=`${Math.floor(100*t.progress)}%`}}).start()}async renderWin(){await this.submitGameOver("true"),this.view["Canvas/Over/win/detail/usdc/Label"].getComponent(c).string=`${(this.usdtCount/30).toFixed(1)}`,this.view["Canvas/Over/win/detail/myToken/Label"].getComponent(c).string=`${this.myCoinCount}`;const t=R("user_info");this.view["Canvas/Over/win/coinBox/coin/Label"].getComponent(c).string=t.points,this.view["Canvas/Over/win/coinBox/usdt/Label"].getComponent(c).string=t.usdt_coin,this.unscheduleAllCallbacks()}moveToRightPos(){if(0==this.temporaryItem.length&&this.view.temporary.active&&(this.view.temporary.active=!1),this.collectTiles.map(((t,e)=>{if(!t.active)return;let i=t.getComponent(A);const s=t.worldPosition,a=this.collectPos[e].clone();let n=new d((s.x+a.x)/2,2*(s.y+a.y),(s.z+a.z)/2);M(t).to(.2,{worldPosition:n}).to(.2,{worldPosition:a}).start(),M(t).to(.4,{eulerAngles:i.rotation,scale:i.scale}).call((()=>{i.isBottom=!0,i.removed&&M(t).to(.25,{worldPosition:i.removedPos},{easing:"backIn"}).call((()=>{if(i.playRmovedEff){const e=this.node.parent.getChildByName("Main Camera").getComponent(w).convertToUINode(t.worldPosition,this.view.Canvas);if("usdc"==t.name||"eggcoin"==t.name){this.view["Canvas/ui/tokenani"].active=!0,this.view["Canvas/ui/tokenani"].setPosition(e.x,e.y);const i=this.view["Canvas/ui/tokenani"].getComponent(h.Skeleton),s=t.name;if("usdc"==t.name?i.skeletonData=this.usdc:i.skeletonData=this.coin,i.setAnimation(0,"baozha",!1),i.addAnimation(0,"feichu",!1),"usdc"==s){const t=this.view["Canvas/ui/tokenani"],e=t.getWorldPosition(),i=this.view["Canvas/ui/coinBox/usdcCion"].getWorldPosition();M(t).delay(1.5).to(1,{worldPosition:new d(i.x-350,i.y-e.y,0)}).call((()=>{_.Instance.play("qian",{playOnAwake:!0})})).start()}else{const t=this.view["Canvas/ui/tokenani"],e=t.getWorldPosition(),i=this.view["Canvas/ui/coinBox/eggCion"].getWorldPosition();M(t).delay(1.5).to(1,{worldPosition:new d(i.x-350,i.y-e.y,0)}).call((()=>{_.Instance.play("qian",{playOnAwake:!0})})).start()}}else{this.view["Canvas/ui/animation"].active=!0,this.view["Canvas/ui/animation"].setPosition(e.x,e.y);this.view["Canvas/ui/animation"].getComponent(h.Skeleton).setAnimation(0,"effect",!1)}_.Instance.play("xiaoshi",{playOnAwake:!0})}"usdc"==t.name&&2==this.currentLevel&&(this.usdtCount+=1,this.updateCoinCount()),"eggcoin"==t.name&&(this.myCoinCount+=1,this.updateCoinCount()),t.destroy(),this.moveToRightPos()})).start()})).start()})),2==this.currentLevel){const t=this.allItem.length/this.count;this.percentage=t}}updateCoinCount(){this.view["Canvas/ui/coinBox/eggCion/Label"].getComponent(c).string=`${this.myCoinCount}`,this.view["Canvas/ui/coinBox/usdcCion/Label"].getComponent(c).string=`${(this.usdtCount/30).toFixed(1)}`}async init2(t){this.gameStop=!0,this.view["bottom/yuanzui/pCylinder1"].getComponent(u).useCCD=!0,this.allItem=[];const e=this.view["GameSpace/ItemSource"];e.setPosition(0,40,0),this.startModes.forEach(((t,i)=>{const s=P.Instance.getAsset("GUI",t.path),a=v(s);a.eulerAngles=new d(N(0,360),N(0,360),N(0,360)),a.level=0,a.custom=!0,this.allItem.push(a),a.setPosition(1.5*Math.cos(N(0,360)*(Math.PI/180)),a.position.y,1.5*Math.cos(N(0,360)*(Math.PI/180))),a.getComponent(u).linearDamping=.1,a.getComponent(u).angularDamping=1,a.getComponent(u).mass=6e6,a.getComponent(u).useCCD=!0,a.getComponent(C).isTrigger=!0,e.addChild(a)})),await new Promise((t=>{const e=setTimeout((()=>{clearTimeout(e),t(1)}),5)})),this.allItem.forEach(((t,e)=>{t.getComponent(C).isTrigger=!1}));let i=0;for(let s of t){const t=P.Instance.getAsset("GUI",s.path),a=v(t);i+=1,a.setPosition(3*Math.cos(N(0,360)*(Math.PI/180)),a.position.y+.1*i,3*Math.cos(N(0,360)*(Math.PI/180))),a.eulerAngles=new d(N(0,360),N(0,360),N(0,360)),a.level=s.level,a.custom=!1,this.allItem.push(a),a.getComponent(u).linearDamping=.1,a.getComponent(u).angularDamping=1,a.getComponent(u).mass=6e6,a.getComponent(u).useCCD=!0,a.getComponent(C).isTrigger=!0,await new Promise((t=>{const e=setTimeout((()=>{clearTimeout(e),t(1),a.getComponent(C).isTrigger=!1}),0)})),e.addChild(a)}this.initTime()}initTostTime(){const t=H().add(31,"second");this.tostTargetTime=t,this.schedule(this.updateTostTime,1)}initTime(){this.view["Canvas/ui/time"].active=!0;const t=H().add(481,"second");this.targetTime=t,this.timeStop=!1,this.schedule(this.updateTime,1),this.gameStop=!1;const e=setTimeout((()=>{clearTimeout(e),this.allItem?.forEach(((t,e)=>{t.getComponent(u).linearDamping=.5,t.getComponent(u).angularDamping=.6}))}),3e3)}async startGame(t){this.view["Canvas/Tost"].active=!1,this.gameStop=!1,0==t?(this.stage1=0,this.stage2=0,this.stage3=0):(this.stage1=1,this.stage2=1,this.stage3=1),this.changeTag(),1==this.currentLevel&&this.initLevel1(),await this.initGameId(t)}updateTostTime(){const t=D(H(),this.tostTargetTime);t&&(t?.end?(this.unschedule(this.updateTostTime),this.startGame(0)):this.view["Canvas/Tost/time"].getComponent(c).string=`${t?.minutes}:${t?.seconds}`)}updateTime(){let t;if(this.timeStop)this.timeStopMoment.add(1,"second"),this.targetTime&&(t=D(this.timeStopMoment,this.targetTime));else{const e=H();this.targetTime&&(t=D(e,this.targetTime))}t&&(t?.end?(this.gameStop=!0,this.view["Canvas/Over"].active=!0,this.view["Canvas/Over/flied"].active=!0,this.view["Canvas/Over/win"].active=!1,this.renderTimeOutFiled()):this.view["Canvas/ui/time/Label"].getComponent(c).string=`${t?.minutes}:${t?.seconds}`)}async renderTimeOutFiled(){this.unscheduleAllCallbacks(),this.view["Canvas/Over/flied/timeOut"].active=!0,this.view["Canvas/Over/flied/lose"].active=!1,this.view["Canvas/Over/flied/timeOut/detail/usdc/Label1"].getComponent(c).string=`${(this.usdtCount/30).toFixed(1)}`,this.view["Canvas/Over/flied/timeOut/detail/myToken/Label1"].getComponent(c).string=`${Math.floor(this.myCoinCount)}`;const t=this.view["Canvas/Over/flied/timeOut/ProgressBar"].getComponent(S);t.progress=0;const e=1-this.allItem.length/this.count,i=this.view["Canvas/Over/flied/timeOut/ProgressBar/Bar/USDT/Label"].getComponent(c);M(t).to(.5,{progress:e},{onUpdate:(t,e)=>{i.string=`${Math.floor(100*t.progress)}%`}}).start(),await this.submitGameOver("false")}initGravity(){let t=this.view.targetNode.worldPosition;this.allItem.forEach(((e,i)=>{let s=e.getComponent(u),a=t.subtract(e.worldPosition),n=a.length();a=a.normalize();let o=6e3/Math.max(n,1),l=a.multiplyScalar(o);s.applyForce(l,e.worldPosition)}))}isExist(t,e,i){let s=!1;return[...e,...i].forEach((e=>{t.uuid==e.uuid&&(s=!0)})),s}async shuffle(){this.gameStop=!0;const t=this.view["GameSpace/ItemSource"];this.allItem=[],t.children.forEach((t=>{if(!this.isExist(t,this.collectTiles,this.temporaryItem)){const e=v(t);t.destroy(),this.allItem.push(e)}}));for(let e of this.allItem)e?.custom||(e.eulerAngles=new d(N(0,360),N(0,360),N(0,360)),e.setPosition(2*Math.cos(N(0,360)*(Math.PI/180)),0,2*Math.cos(N(0,360)*(Math.PI/180))),e.getComponent(u).linearDamping=.1,e.getComponent(u).angularDamping=1,e.getComponent(u).mass=6e6,e.getComponent(C).isTrigger=!0,await new Promise((t=>{const i=setTimeout((()=>{clearTimeout(i),e.getComponent(C).isTrigger=!1,t(1)}),1)})),t.addChild(e));const e=setTimeout((()=>{clearTimeout(e),this.allItem.forEach(((t,e)=>{t.getComponent(u).linearDamping=.6,t.getComponent(u).angularDamping=.6})),this.gameStop=!1}),2e3)}async submitGameOver(t){const e=await G({game_user_id:this.gameDate.game_user_id,game_id:this.gameDate.game_id,result:t,inside_point:this.myCoinCount,inside_usdt:this.usdtCount,prop_one:this.gameDate.prop_one});200==e.code&&F("user_info",e.result)}async buyAndShareItem(){{const t=`https://t.me/catchItGame_bot/catch_it?startapp=ref_${R("user_info").telegram_id}`;window?.Telegram?.WebApp?.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(t)}`)}}playAnimationStart(t){this.moveToRightPos();let e=this.collectTiles.filter((e=>e.name==t));if(3==e.length)for(var i=this.collectTiles.length-1;i>=0;--i)if(this.collectTiles[i].name==t){let t=this.collectTiles[i];t.getComponent(A).removed=!0,this.collectTiles.splice(i,1);const s=this.allItem.indexOf(t);-1!==s&&this.allItem.splice(s,1),t.getComponent(A).removedPos=e[1].worldPosition,t==e[1]&&(t.getComponent(A).playRmovedEff=!0)}this.checkResult()}mvTemporary(){const t=this.temporaryPos.map((t=>t.clone()));this.temporaryItem.map(((e,i)=>{e.getComponent(A).isTemp=!0;const s=i%3,a=Math.floor(i/3);t[s].y=1==a?6*t[s].y:1*t[s].y,M(e).to(.4,{worldPosition:t[s]}).call((()=>{this.moveToRightPos()})).start()}))}}).prototype,"material",[$],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),Y=e(K.prototype,"tag",[W],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),tt=e(K.prototype,"add",[V],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),et=e(K.prototype,"nft",[q],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),it=e(K.prototype,"usdc",[X],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),st=e(K.prototype,"coin",[Z],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),J=K))||J));s._RF.pop()}}}));

System.register("chunks:///_virtual/Message.ts",["cc","./UiMgr.ts"],(function(e){var t,s,o,n,c,a;return{setters:[function(e){t=e.cclegacy,s=e.Label,o=e.UIOpacity,n=e.tween,c=e._decorator},function(e){a=e.UICtrl}],execute:function(){var i;t._RF.push({},"51bc7fU8Y9MSYWWLBh/fEe+","Message",void 0);const{ccclass:r,property:u}=c;e("Message",r("Message")(i=class extends a{onLoad(){super.onLoad()}setValue(e,t){this.node.getChildByName("Label").getComponent(s).string=e;const c=this.node.getComponent(o);n(c).to(.6,{opacity:255}).start();const a=setTimeout((()=>{this.node&&(this.node.active=!1,this.node.destroy()),clearTimeout(a)}),t||2e3)}})||i);t._RF.pop()}}}));

System.register("chunks:///_virtual/Play.ts",["./rollupPluginModLoBabelHelpers.js","cc","./UiMgr.ts","./GameFiMgr.ts","./index4.ts","./storage.ts","./AudioMgr.ts","./app.ts","./EventMgr.ts","./Shopping.ts","./moment.mjs_cjs=&original=.js","./moment.js"],(function(t){var e,i,n,o,a,s,r,l,p,c,h,d,u,g,m,w,y,v,C,b,f,_,I,T,B;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.initializerDefineProperty},function(t){n=t.cclegacy,o=t.SpriteFrame,a=t._decorator,s=t.Sprite,r=t.Label,l=t.director,p=t.Node,c=t.instantiate,h=t.tween},function(t){d=t.UICtrl},function(t){u=t.GameFiMgr},function(t){g=t.getReferenceNumber,m=t.insertWithdrawRecord,w=t.getMyWithdrawRecord,y=t.connectWalet,v=t.getGameUserInfo,C=t.getLatestRecord},function(t){b=t.setStorageData},function(t){f=t.AudioMgr},function(t){_=t.Tost},function(t){I=t.EventMgr},function(t){T=t.Shopping},null,function(t){B=t.default}],execute:function(){var L,D,E,N,S,O,k,A,U,M,W;n._RF.push({},"b4e20UqJq5OtI2vxMRVXJyR","Play",void 0);const{ccclass:x,property:j}=a;t("Play",(L=x("Play"),D=j(o),E=j(o),N=j(o),S=j(o),L((A=e((k=class extends d{constructor(){super(...arguments),this.address="",this.loginInfo=null,this.isLogin=!1,i(this,"active",A,this),i(this,"noActive",U,this),i(this,"dot1",M,this),i(this,"dot2",W,this),this.userId="5911753188",this.username="Aaron",this.reference="",this.historyList={},this.status=1,this.pool={day:0}}onLoad(){super.onLoad(),I.Instance.on("wallet",(t=>{t?(t.account.address!=this.address&&(this.address=t.account.address,this.connectWallet()),this.view["butBox/Button4/tg"].getComponent(s).spriteFrame=this.active,this.view["butBox/Button4/Label"].getComponent(r).string="DISCONNECT"):(this.view["butBox/Button4/tg"].getComponent(s).spriteFrame=this.noActive,this.view["butBox/Button4/Label"].getComponent(r).string="CONNECT",_("Wallet disconnected"))})),I.Instance.on("buy_product_bag",(t=>{this.loginWeb()})),this.initGame(),this.gitDayPool(),l.preloadScene("main",(()=>{})),this.view["Tost/yes"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0});try{await u.Instance.sendTransaction(19.9/1e3);this.view["Button/Label"].getComponent(r).string="(1/3)",this.isLogin=!0,this.view.Tost.active=!1}catch(t){}})),this.view["Tost/no"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.Tost.active=!1})),this.view.Button.on(p.EventType.TOUCH_END,(async t=>{if(t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.loginInfo)if(this.isLogin)l.loadScene("main");else if(3-this.loginInfo.play_number==0){{const t=`https://t.me/catchItGame_bot/catch_it?startapp=ref_${this.userId}`;window?.Telegram?.WebApp?.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(t)}`)}this.view["Button/Label"].getComponent(r).string="(1/3)",this.isLogin=!0}else this.view.Tost.active=!0;else _("Please wait...")})),this.view["butBox/Button1"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0});const e=await g({game_user_id:this.loginInfo.game_user_id});200==e.code&&(this.view.Share.active=!0,this.view["Share/bg3/frens/Label"].getComponent(r).string=e.result)})),this.view["Share/close"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.Share.active=!1})),this.view["Share/Button"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0});const e=`https://t.me/catchItGame_bot/catch_it?startapp=ref_${this.userId}`;window?.Telegram?.WebApp?.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(e)}`)})),this.view["Share/Copy"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0});const e=`https://t.me/catchItGame_bot/catch_it?startapp=ref_${this.userId}`;navigator.clipboard.writeText(e).then((()=>{_("Copied successfully")})).catch((t=>{console.error("拷贝失败:",t)}))})),this.view["bitcone/usdcCoinGroup"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.Withdrawal.active=!0,this.view["Withdrawal/Frame/Label"].getComponent(r).string=`${this.loginInfo.usdt_coin}`;this.view["Withdrawal/Frame/Button/Label"].getComponent(r);this.renderList()})),this.view["Withdrawal/Frame/Button"].on(p.EventType.TOUCH_END,(async t=>{if(t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),0!=this.status){if(Number(this.loginInfo.usdt_coin)<20)return void _("Extractable over 20 USDT");const t=await m({game_user_id:this.loginInfo.game_user_id});200==t.code&&(t.result&&(this.saveResult(t.result),this.loginInfo=t.result),await this.getMyWithdrawRecord(),this.view["Withdrawal/Frame/Label"].getComponent(r).string=`${this.loginInfo.usdt_coin}`,this.renderList())}})),this.view["Withdrawal/close"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.Withdrawal.active=!1})),this.view["butBox/Button2"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.RankingList.active=!0})),this.view["butBox/Button3"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.prompt.active=!0})),this.view["butBox/Button4"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),u.Instance.openModal()})),this.view["butBox/Button5"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.Shopping.active=!0,this.view.Shopping.getComponent(T).init(this.loginInfo)})),this.view["prompt/close"].on(p.EventType.TOUCH_END,(async t=>{t.propagationStopped=!0,f.Instance.play("djClick",{playOnAwake:!0}),this.view.prompt.active=!1}))}start(){}initGame(){this.address=u.Instance.address,u.Instance.isConnected()?(this.view["butBox/Button4/tg"].getComponent(s).spriteFrame=this.active,this.view["butBox/Button4/Label"].getComponent(r).string="DISCONNECT"):(this.view["butBox/Button4/tg"].getComponent(s).spriteFrame=this.noActive,this.view["butBox/Button4/Label"].getComponent(r).string="CONNECT");decodeURIComponent(window?.Telegram?.WebApp?.initData).split("&").forEach((t=>{t.includes("start_param")&&(this.reference=t.split("=")[1])})),this.userId=window?.Telegram?.WebApp.initDataUnsafe.user.id,this.username=window?.Telegram?.WebApp.initDataUnsafe.user.username,this.loginWeb()}async getMyWithdrawRecord(){const t=await w({game_user_id:this.loginInfo.game_user_id});if(200==t.code){const e=t.result.map,i={};e.forEach((t=>{i[B(new Date(1e3*Number(t.create_time))).format("D MMMM")]?i[B(new Date(1e3*Number(t.create_time))).format("D MMMM")].push(t):i[B(new Date(1e3*Number(t.create_time))).format("D MMMM")]=[t]})),this.historyList=i,this.status=t.result.status}}renderList(){const t=this.view["Withdrawal/bg/ScrollView/view/content"],e=this.view["Withdrawal/bg/ScrollView/view/content/item"];t.removeAllChildren();for(const i in this.historyList){const n=c(e);n.active=!0,n.getChildByName("Label").getComponent(r).string=i;const o=n.getChildByName("List"),a=n.getChildByPath("List/item");o.removeAllChildren(),this.historyList[i].forEach((t=>{const e=c(a);e.active=!0,0==t.status?(e.getChildByName("tag").getComponent(s).spriteFrame=this.dot1,e.getChildByName("status").getComponent(r).string="Processing"):(e.getChildByName("tag").getComponent(s).spriteFrame=this.dot2,e.getChildByName("status").getComponent(r).string="Processed"),e.getChildByName("Label").getComponent(r).string=`+${t.amount} USDT`,e.getChildByName("time").getComponent(r).string=`${B(new Date(1e3*Number(t.create_time))).format("HH: mm")}`,o.addChild(e)})),t.addChild(n)}}async connectWallet(){const t=await y({telegram_id:this.userId,user_id_wallet:this.address});200==t.code&&(this.saveResult(t.result),this.loginInfo=t.result)}async loginWeb(){const t=await v({telegram_id:this.userId,game_user_name:this.username,reference:this.reference});200==t.code&&(this.saveResult(t.result),this.loginInfo=t.result,this.getMyWithdrawRecord(),3-this.loginInfo.play_number>0?(this.isLogin=!0,this.view["Button/Label"].getComponent(r).string=`(${3-this.loginInfo.play_number}/3)`):(this.isLogin=!1,3-this.loginInfo.play_number==0?this.view["Button/Vector"].active=!0:this.view["Button/Vector"].active=!1,this.view["Button/Label"].getComponent(r).string="(0/3)"),this.loginInfo.user_id_wallet||this.connectWallet())}async gitDayPool(){const t=await C();if(200==t.code&&this.view&&this.view["day/mount/Label"]){this.pool.day=Number((t.result.dayPool/10**6).toFixed(2));const e=20/3600,i=(new Date).getTime(),n=60*new Date(i).getMinutes()+new Date(i).getSeconds(),o=this.pool.day+e*n;h(this.pool).to(1,{day:o},{onUpdate:(t,e)=>{this.view["day/mount/Label"].getComponent(r).string=t.day.toFixed(2)}}).start(),this.schedule(this.updateTime,10)}}onDestroy(){console.log("onDestroy"),this.unschedule(this.updateTime)}updateTime(){const t=20/3600*10+this.pool.day;h(this.pool).to(1,{day:t},{onUpdate:(t,e)=>{this.view["day/mount/Label"].getComponent(r).string=t.day.toFixed(2)}}).start()}saveResult(t){b("user_info",t),this.view["bitcone/eggCoinGroup/Label"].getComponent(r).string=t.points,this.view["bitcone/usdcCoinGroup/Label"].getComponent(r).string=t.usdt_coin}}).prototype,"active",[D],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),U=e(k.prototype,"noActive",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),M=e(k.prototype,"dot1",[N],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),W=e(k.prototype,"dot2",[S],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),O=k))||O));n._RF.pop()}}}));

System.register("chunks:///_virtual/RankingList.ts",["./rollupPluginModLoBabelHelpers.js","cc","./UiMgr.ts","./AudioMgr.ts","./index4.ts","./storage.ts"],(function(e){var t,n,i,r,s,o,a,c,l,g,u,m,p,d,h;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.initializerDefineProperty},function(e){i=e.cclegacy,r=e.SpriteFrame,s=e._decorator,o=e.Node,a=e.Sprite,c=e.Label,l=e.Color,g=e.instantiate},function(e){u=e.UICtrl},function(e){m=e.AudioMgr},function(e){p=e.getFriendPassNumber,d=e.getPassNumber},function(e){h=e.getStorageData}],execute:function(){var _,v,y,C,f,w,b;i._RF.push({},"901e7Mrb4JON7IHU7slFhlB","RankingList",void 0);const{ccclass:L,property:k}=s;e("RankingList",(_=L("RankingList"),v=k(r),y=k(r),_((w=t((f=class extends u{constructor(){super(...arguments),n(this,"active",w,this),n(this,"current",b,this),this.currentItem=0}onLoad(){super.onLoad(),this.initEvent(!0),this.view.close.on(o.EventType.TOUCH_END,(e=>{e.propagationStopped=!0,m.Instance.play("djClick",{playOnAwake:!0}),this.node.active=!1}))}start(){this.getRankingList()}initEvent(e){this.view.table.children.forEach(((t,n)=>{t.getComponent(a).spriteFrame=this.current,t.getChildByName("Label").getComponent(c).color=new l(70,70,70),this.currentItem==n&&(t.getComponent(a).spriteFrame=this.active,t.getChildByName("Label").getComponent(c).color=new l(255,235,165)),e&&t.on(o.EventType.TOUCH_END,(e=>{e.propagationStopped=!0,this.currentItem=n,this.getRankingList(),m.Instance.play("djClick",{playOnAwake:!0}),this.initEvent(!1)}),this)}))}async getRankingList(){if(0==this.currentItem){const e=h("user_info"),t=await p({game_user_id:e.game_user_id});200==t.code&&this.renderList(t.result,!1)}else{const e=h("user_info"),t=await d({game_user_id:e.game_user_id});200==t.code&&this.renderList(t.result,!0)}}renderList(e,t){const n=this.view["content/ScrollView/view/content"],i=this.view["content/ScrollView/view/content/item"];n.removeAllChildren(),e.forEach(((e,r)=>{const s=g(i);s.active=!0,r>2&&(s.getComponent(a).spriteFrame=null),s.getChildByName("index").getComponent(c).string=`${(r+1).toString()}.`,s.getChildByName("address").getComponent(c).string=t?e.play_name:"undefined"!=e.game_user_name?e.game_user_name:e.telegram_id,s.getChildByName("count").getComponent(c).string=e.pass_number,n.addChild(s)}));const r=h("user_info"),s=e.filter(((e,t)=>e.telegram_id==r.telegram_id&&(e.index=t,!0)));s.length>0&&(this.view["my/item/index"].getComponent(c).string=(s[0].index+1).toString(),this.view["my/item/address"].getComponent(c).string=t?s[0].play_name:s[0].game_user_name||s[0].telegram_id,this.view["my/item/count"].getComponent(c).string=s[0].pass_number)}}).prototype,"active",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=t(f.prototype,"current",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=f))||C));i._RF.pop()}}}));

System.register("chunks:///_virtual/request.ts",["cc","./config.ts","./ResMgr.ts","./index2.ts","./storage.ts"],(function(t){var e,s,n,a,o,r,i,h;return{setters:[function(t){e=t.cclegacy,s=t.find,n=t.instantiate},function(t){a=t.baseUrl,o=t.baseUrl1},function(t){r=t.ResMgr},function(t){i=t.keyObject},function(t){h=t.getStorageData}],execute:function(){t("default",(function(t){return new Promise(((e,o)=>{let c=s("Canvas");c||(c=s("Mian/Canvas"));const d=r.Instance.getAsset("Sounds","Loading");let u;d&&(u=n(d),c.getChildByName("Loading")||c.addChild(u));const p=new XMLHttpRequest;p.onreadystatechange=function(){if(4==p.readyState&&(200==p.status||201==p.status)){const t=JSON.parse(p.responseText);d&&u.destroy(),e(t)}},p.timeout=t.timeout||5e4;const x=t.method||"GET";let g=a+t.url;if(t.data=t.data,"get"==x||"GET"==x){t.data&&(g=g+"?"+i(t.data)),p.open(x,g,!0);const e=h("token");e&&p.setRequestHeader("token",e),p.setRequestHeader("Content-type","application/json;charset=utf-8"),p.send()}else{p.open(x,g,!0);const e=h("token");e&&p.setRequestHeader("token",e),p.setRequestHeader("Content-type","application/json;charset=utf-8");try{p.send(JSON.stringify(t.data))}catch(t){console.log(t)}}}))})),e._RF.push({},"0b092YOWnRMHZj9czjoyStZ","request",void 0);t("ajax",new class{constructor(){this.xhr=void 0,this.xhr=new XMLHttpRequest,this.xhr.timeout=5e4}get(t,e){return new Promise(((a,c)=>{const d=s("Canvas"),u=r.Instance.getAsset("GUI","component/Loading"),p=n(u);d.getChildByName("Loading")||d.addChild(p),this.xhr.onreadystatechange=()=>{if(4==this.xhr.readyState&&200==this.xhr.status){const t=JSON.parse(this.xhr.responseText);p.destroy(),a(t)}};let x=o+t;e&&e&&(x=x+"?"+i(e)),this.xhr.open("GET",x,!0);const g=h("token");g&&this.xhr.setRequestHeader("token",g),this.xhr.setRequestHeader("Content-type","application/json;charset=utf-8"),this.xhr.send()}))}post(t,e){return new Promise(((s,n)=>{this.xhr.onreadystatechange=()=>{if(4==this.xhr.readyState&&201==this.xhr.status){const t=JSON.parse(this.xhr.responseText);s(t)}};let a=o+t;this.xhr.open("POST",a,!0);const r=h("token");r&&this.xhr.setRequestHeader("token",r),this.xhr.setRequestHeader("Content-type","application/json;charset=utf-8"),this.xhr.send(JSON.stringify(e))}))}});e._RF.pop()}}}));

System.register("chunks:///_virtual/ResMgr.ts",["cc"],(function(s){var t,e,o,n,r;return{setters:[function(s){t=s.cclegacy,e=s.Component,o=s.assetManager,n=s.SpriteFrame,r=s.SpriteAtlas}],execute:function(){t._RF.push({},"87881hT1qdLp79gFpPIDHKe","ResMgr",void 0);class l extends e{constructor(){super(...arguments),this.totalAb=0,this.nowAb=0,this.total=0,this.now=0,this.abBUnds={},this.progressFun=null,this.endFun=null}onLoad(){l.Instance?this.destroy():l.Instance=this}preloadResourcePkg(s,t,e){this.totalAb=0,this.nowAb=0,this.total=0,this.now=0,this.progressFun=t,this.endFun=e;for(let t in s)this.totalAb++,this.total+=s[t].urls.length;for(let t in s)this.loadAssetBundle(t,(()=>{this.nowAb++,this.nowAb==this.totalAb&&this.loadAssetsInAssetBundle(s)}))}preloadResourcePkgAny(s,t,e){this.totalAb=0,this.nowAb=0,this.total=0,this.now=0,this.progressFun=t,this.endFun=e;for(let t in s)this.totalAb++,this.total+=s[t].urls.length;for(let t in s)o.preloadAny(s[t].urls,((s,t,e)=>{this.nowAb++,this.now+=s,this.progressFun&&this.progressFun(this.now,this.total)}),((s,t)=>{s&&console.error("预加载失败"),this.endFun&&this.endFun()}))}loadAssetsInAssetBundle(s){for(let t in s){s[t].urls.forEach((s=>{this.loadRes(this.abBUnds[t],s.path,s.assetType)}))}}loadRes(s,t,e){s.load(t,e,((s,o)=>{this.now++,e.name,s&&(console.error(s),console.error("load res err "+t)),this.progressFun&&this.progressFun(this.now,this.total),this.now>=this.total&&this.endFun&&this.endFun()}))}loadAssetBundle(s,t){o.loadBundle(s,((e,o)=>{e?console.error("load loadAssetBundle error"+s):this.abBUnds[s]=o,t&&t()}))}unloadResourcePkg(s){for(let t in s)o.removeBundle(this.abBUnds[t])}getAsset(s,t,e){const r=o.getBundle(s);r||console.error("getBundle err !!!"),r.load(t,n,((s,t)=>{}));const l=r.get(t);return l||r.load(t,n,((s,t)=>{e&&e(t)})),l}getPlistAsset(s,t,e){const n=o.getBundle(s);n||console.error("getBundle err !!!"),n.load(t,r,((s,o)=>{s&&console.error("load res err "+t),e&&e(o)}))}}s("ResMgr",l),l.Instance=void 0,t._RF.pop()}}}));

System.register("chunks:///_virtual/Shopping.ts",["./rollupPluginModLoBabelHelpers.js","cc","./UiMgr.ts","./AudioMgr.ts","./index4.ts","./GameFiMgr.ts","./env","./app.ts","./storage.ts","./EventMgr.ts"],(function(t){var e,i,n,o,r,s,a,l,c,g,u,p,h,d,m,b,y,f;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.initializerDefineProperty},function(t){n=t.cclegacy,o=t.SpriteFrame,r=t._decorator,s=t.Node,a=t.Label,l=t.instantiate,c=t.Sprite},function(t){g=t.UICtrl},function(t){u=t.AudioMgr},function(t){p=t.getAllShop,h=t.buyProductBag},function(t){d=t.GameFiMgr},function(t){m=t.BUILD},function(t){b=t.Tost},function(t){y=t.setStorageData},function(t){f=t.EventMgr}],execute:function(){var C,v,_,w,L,I,P,x,B,S,M;n._RF.push({},"196e1RvGwxL9odaTVTav249","Shopping",void 0);const{ccclass:T,property:D}=r;t("Shopping",(C=T("Shopping"),v=D(o),_=D(o),w=D(o),L=D(o),C((x=e((P=class extends g{constructor(){super(...arguments),i(this,"img1",x,this),i(this,"img2",B,this),i(this,"img3",S,this),i(this,"img4",M,this),this.list=[],this.userInfo=null}onLoad(){super.onLoad(),this.list.push(this.img1),this.list.push(this.img2),this.list.push(this.img3),this.list.push(this.img4),this.view.close.on(s.EventType.TOUCH_END,(t=>{t.propagationStopped=!0,u.Instance.play("djClick",{playOnAwake:!0}),this.node.active=!1}))}async init(t){this.userInfo=t;const e=await p();200==e.code&&(this.view["core/Label"].getComponent(a).string=t.recharge_all_point,this.view["prop/Label"].getComponent(a).string=t.buy_bag,this.renderList(e.result))}renderList(t){const e=this.view.Layout,i=this.view["Layout/item"];e.removeAllChildren(),t.forEach(((t,n)=>{const o=l(i);o.active=!0,o.getChildByPath("box/Label").getComponent(a).string=`x${t.bag_number}`,o.getChildByPath("box/core").getComponent(a).string=`x${t.recharge_point}`,o.getChildByPath("btn/Label").getComponent(a).string=`$${t.price}`,t.discount>0?(o.getChildByPath("box/tag").active=!0,o.getChildByPath("box/tag/Label").getComponent(a).string=`-${t.discount}%`):o.getChildByPath("box/tag").active=!1,o.getChildByPath("img").getComponent(c).spriteFrame=this.list[n],o.getChildByPath("btn").on(s.EventType.TOUCH_END,(async e=>{if(e.propagationStopped=!0,u.Instance.play("djClick",{playOnAwake:!0}),d.Instance.isConnected())try{if(m){const e=Number(t.price)/1e3;await d.Instance.sendTransaction(e)}const e=await h({id:t.id,num:1,telegram_id:this.userInfo.telegram_id});200==e.code&&(y("user_info",e.result),this.userInfo=e.result,this.view["core/Label"].getComponent(a).string=this.userInfo.recharge_all_point,this.view["prop/Label"].getComponent(a).string=`${this.userInfo.buy_bag}`,this.node.active=!1,f.Instance.emit("buy_product_bag",e.result))}catch(t){console.error(t)}else b("Please connect the wallet")})),e.addChild(o)}))}update(t){}}).prototype,"img1",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),B=e(P.prototype,"img2",[_],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=e(P.prototype,"img3",[w],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),M=e(P.prototype,"img4",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),I=P))||I));n._RF.pop()}}}));

System.register("chunks:///_virtual/Start.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResMgr.ts","./index.ts","./UiMgr.ts","./AudioMgr.ts"],(function(e){var t,r,a,o,n,s,i,c,l,u,p;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.initializerDefineProperty},function(e){a=e.cclegacy,o=e.Node,n=e._decorator,s=e.director,i=e.ProgressBar},function(e){c=e.ResMgr},function(e){l=e.resPkg},function(e){u=e.UICtrl},function(e){p=e.AudioMgr}],execute:function(){var g,d,f,y,m;a._RF.push({},"56e26DaluZGB6fS6NaTOueI","Start",void 0);const{ccclass:P,property:h}=n;e("Start",(g=P("Start"),d=h(o),g((m=t((y=class extends u{constructor(){super(...arguments),r(this,"GameData",m,this)}onLoad(){super.onLoad(),s.preloadScene("gamePlay",(()=>{})),s.addPersistRootNode(this.GameData)}start(){c.Instance.preloadResourcePkg(l,((e,t)=>{this.view["pbar/ProgressBar"].getComponent(i).progress=e/t}),(async()=>{try{this.view.pbar.active=!1,p.Instance.play("bg",{playOnAwake:!0,loop:!0,volume:.2}),s.loadScene("gamePlay")}catch(e){console.log(e)}}))}}).prototype,"GameData",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),f=y))||f));a._RF.pop()}}}));

System.register("chunks:///_virtual/storage.ts",["cc"],(function(e){var t,a;return{setters:[function(e){t=e.cclegacy,a=e.sys}],execute:function(){t._RF.push({},"28fccWncOFOiruMdj4PtvaN","storage",void 0);e("setStorageData",((e,t)=>{a.localStorage.setItem(e,JSON.stringify(t))})),e("getStorageData",(e=>a.localStorage.getItem(e)?JSON.parse(a.localStorage.getItem(e)):null)),e("removeStorageData",(e=>{a.localStorage.removeItem(e)})),e("clearStorageData",(()=>{a.localStorage.clear()}));t._RF.pop()}}}));

System.register("chunks:///_virtual/Toggle.ts",["cc","./index.mjs_cjs=&original=.js","./index.js"],(function(e){var t,n;return{setters:[function(e){t=e.cclegacy},null,function(e){n=e.default}],execute:function(){t._RF.push({},"8b5e0WxdvNFy4MYWx4v/Hub","Toggle",void 0);const{useState:o}=n;e("Toggle",(e=>{const[t,c]=o(e.defaultValue),s=t=>{const n=!t;return e.onToggleChange(n),n};return n.createElement("button",{className:"test-toggle",onClick:()=>c(s)},t?e.onText:e.offText)}));t._RF.pop()}}}));

System.register("chunks:///_virtual/type.ts",["cc"],(function(){var t;return{setters:[function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"c05a00xUqVKorvfx9AXhENp","type",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/UiMgr.ts",["cc"],(function(e){var n,o,t;return{setters:[function(e){n=e.cclegacy,o=e.Component,t=e.Button}],execute:function(){n._RF.push({},"0347bkkmf9Lwpk/Cdl/7Fvq","UiMgr",void 0);e("UICtrl",class extends o{constructor(){super(...arguments),this.view={}}onLoad(){this.load_all_node(this.node,"")}load_all_node(e,n){for(let o=0;o<e.children.length;o++)this.view[n+e.children[o].name]=e.children[o],this.load_all_node(e.children[o],n+e.children[o].name+"/")}addButtonListener(e,n,o){const r=this.view[e];if(r){r.getComponent(t)?r.on(t.EventType.CLICK,o,n):console.error(e+"Component not found")}else console.error(e+"node not found")}}),n._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,