System.register(["./_virtual_cc-4a6ad433.js"],(function(t){"use strict";var e;return{setters:[function(t){e=t.c}],execute:function(){var r=e((function(t){var e,r=(e="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(t){void 0===t&&(t={});var r,n,i=void 0!==t?t:{};i.ready=new Promise(((t,e)=>{r=t,n=e}));var o=Object.assign({},i),a=(t,e)=>{throw e},s="";"undefined"!=typeof document&&document.currentScript&&(s=document.currentScript.src),e&&(s=e),s=0!==s.indexOf("blob:")?s.substr(0,s.replace(/[?#].*/,"").lastIndexOf("/")+1):"";var u,c=i.print||console.log.bind(console),l=i.printErr||console.error.bind(console);Object.assign(i,o),o=null,i.arguments&&i.arguments,i.thisProgram&&i.thisProgram,i.quit&&(a=i.quit),i.wasmBinary&&(u=i.wasmBinary);var f,p=i.noExitRuntime||!0;"object"!=typeof WebAssembly&&j("no native wasm support detected");var d,h,v,y,m,g,$,b,C,w=!1;function T(){var t=f.buffer;i.HEAP8=d=new Int8Array(t),i.HEAP16=v=new Int16Array(t),i.HEAP32=m=new Int32Array(t),i.HEAPU8=h=new Uint8Array(t),i.HEAPU16=y=new Uint16Array(t),i.HEAPU32=g=new Uint32Array(t),i.HEAPF32=$=new Float32Array(t),i.HEAPF64=b=new Float64Array(t)}var P,A,_=[],O=[],W=[],S=0,E=null;function j(t){i.onAbort&&i.onAbort(t),l(t="Aborted("+t+")"),w=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw n(e),e}function k(t){return t.startsWith("data:application/octet-stream;base64,")}function F(t){try{if(t==P&&u)return new Uint8Array(u);throw"both async and sync fetching of the wasm failed"}catch(t){j(t)}}function R(t,e,r){return function(t){return u||"function"!=typeof fetch?Promise.resolve().then((()=>F(t))):fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>F(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(r,(t=>{l("failed to asynchronously prepare wasm: "+t),j(t)}))}function D(t){this.name="ExitStatus",this.message=`Program terminated with exit(${t})`,this.status=t}function x(t){for(;t.length>0;)t.shift()(i)}function I(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=48&&e<=57?`_${t}`:t}function U(t,e){return{[t=I(t)]:function(){return e.apply(this,arguments)}}[t]}k(P="physx.release.wasm.wasm")||(A=P,P=i.locateFile?i.locateFile(A,s):s+A);var V=new function(){this.allocated=[void 0],this.freelist=[],this.get=function(t){return this.allocated[t]},this.has=function(t){return void 0!==this.allocated[t]},this.allocate=function(t){var e=this.freelist.pop()||this.allocated.length;return this.allocated[e]=t,e},this.free=function(t){this.allocated[t]=void 0,this.freelist.push(t)}};function z(t,e){var r=U(e,(function(t){this.name=e,this.message=t;var r=new Error(t).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},r}var B=void 0;function H(t){throw new B(t)}var M=t=>(t||H("Cannot use deleted val. handle = "+t),V.get(t).value),N=t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return V.allocate({refcount:1,value:t})}},q=void 0,G=void 0;function L(t){for(var e="",r=t;h[r];)e+=G[h[r++]];return e}var J=[];function K(){for(;J.length;){var t=J.pop();t.$$.deleteScheduled=!1,t.delete()}}var Q=void 0;var Z={};function X(t,e){for(void 0===e&&H("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}function Y(t,e,r){e=X(t,e),Z.hasOwnProperty(e)?H(`Tried to register registered instance: ${e}`):Z[e]=r}var tt={};function et(t){var e=ce(t),r=L(e);return ue(e),r}function rt(t,e){var r=tt[t];return void 0===r&&H(e+" has unknown type "+et(t)),r}function nt(){}var it=!1;function ot(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function at(t,e,r){if(e===r)return t;if(void 0===r.baseClass)return null;var n=at(t,e,r.baseClass);return null===n?null:r.downcast(n)}var st={},ut=void 0;function ct(t){throw new ut(t)}function lt(t,e){return e.ptrType&&e.ptr||ct("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&ct("Both smartPtrType and smartPtr must be specified"),e.count={value:1},ft(Object.create(t,{$$:{value:e}}))}function ft(t){return"undefined"==typeof FinalizationRegistry?(ft=t=>t,t):(it=new FinalizationRegistry((t=>{ot(t.$$)})),nt=t=>it.unregister(t),(ft=t=>{var e=t.$$;if(e.smartPtr){var r={$$:e};it.register(t,r,t)}return t})(t))}var pt={};function dt(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function ht(t){return this.fromWireType(m[t>>2])}var vt={},yt={};function mt(t,e,r){function n(e){var n=r(e);n.length!==t.length&&ct("Mismatched type converter count");for(var i=0;i<t.length;++i)$t(t[i],n[i])}t.forEach((function(t){yt[t]=e}));var i=new Array(e.length),o=[],a=0;e.forEach(((t,e)=>{tt.hasOwnProperty(t)?i[e]=tt[t]:(o.push(t),vt.hasOwnProperty(t)||(vt[t]=[]),vt[t].push((()=>{i[e]=tt[t],++a===o.length&&n(i)})))})),0===o.length&&n(i)}function gt(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${t}`)}}function $t(t,e,r){if(void 0===r&&(r={}),!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=e.name;if(t||H(`type "${n}" must have a positive integer typeid pointer`),tt.hasOwnProperty(t)){if(r.ignoreDuplicateRegistrations)return;H(`Cannot register type '${n}' twice`)}if(tt[t]=e,delete yt[t],vt.hasOwnProperty(t)){var i=vt[t];delete vt[t],i.forEach((t=>t()))}}function bt(t){H(t.$$.ptrType.registeredClass.name+" instance already deleted")}function Ct(){}function wt(t,e,r){if(void 0===t[e].overloadTable){var n=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||H(`Function '${r}' called with an invalid number of arguments (${arguments.length}) - expects one of (${t[e].overloadTable})!`),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[n.argCount]=n}}function Tt(t,e,r){i.hasOwnProperty(t)?((void 0===r||void 0!==i[t].overloadTable&&void 0!==i[t].overloadTable[r])&&H(`Cannot register public name '${t}' twice`),wt(i,t,t),i.hasOwnProperty(r)&&H(`Cannot register multiple overloads of a function with the same number of arguments (${r})!`),i[t].overloadTable[r]=e):(i[t]=e,void 0!==r&&(i[t].numArguments=r))}function Pt(t,e,r,n,i,o,a,s){this.name=t,this.constructor=e,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=i,this.getActualType=o,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function At(t,e,r){for(;e!==r;)e.upcast||H(`Expected null or instance of ${r.name}, got an instance of ${e.name}`),t=e.upcast(t),e=e.baseClass;return t}function _t(t,e){if(null===e)return this.isReference&&H(`null is not a valid ${this.name}`),0;e.$$||H(`Cannot pass "${Ht(e)}" as a ${this.name}`),e.$$.ptr||H(`Cannot pass deleted object as a pointer of type ${this.name}`);var r=e.$$.ptrType.registeredClass;return At(e.$$.ptr,r,this.registeredClass)}function Ot(t,e){var r;if(null===e)return this.isReference&&H(`null is not a valid ${this.name}`),this.isSmartPointer?(r=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,r),r):0;e.$$||H(`Cannot pass "${Ht(e)}" as a ${this.name}`),e.$$.ptr||H(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&e.$$.ptrType.isConst&&H(`Cannot convert argument of type ${e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name} to parameter type ${this.name}`);var n=e.$$.ptrType.registeredClass;if(r=At(e.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&H("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?r=e.$$.smartPtr:H(`Cannot convert argument of type ${e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:r=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)r=e.$$.smartPtr;else{var i=e.clone();r=this.rawShare(r,N((function(){i.delete()}))),null!==t&&t.push(this.rawDestructor,r)}break;default:H("Unsupporting sharing policy")}return r}function Wt(t,e){if(null===e)return this.isReference&&H(`null is not a valid ${this.name}`),0;e.$$||H(`Cannot pass "${Ht(e)}" as a ${this.name}`),e.$$.ptr||H(`Cannot pass deleted object as a pointer of type ${this.name}`),e.$$.ptrType.isConst&&H(`Cannot convert argument of type ${e.$$.ptrType.name} to parameter type ${this.name}`);var r=e.$$.ptrType.registeredClass;return At(e.$$.ptr,r,this.registeredClass)}function St(t,e,r,n,i,o,a,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=r,this.isConst=n,this.isSmartPointer=i,this.pointeeType=o,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,i||void 0!==e.baseClass?this.toWireType=Ot:n?(this.toWireType=_t,this.destructorFunction=null):(this.toWireType=Wt,this.destructorFunction=null)}function Et(t,e,r){i.hasOwnProperty(t)||ct("Replacing nonexistant public symbol"),void 0!==i[t].overloadTable&&void 0!==r?i[t].overloadTable[r]=e:(i[t]=e,i[t].argCount=r)}var jt=[];function kt(t){var e=jt[t];return e||(t>=jt.length&&(jt.length=t+1),jt[t]=e=C.get(t)),e}function Ft(t,e,r){return t.includes("j")?function(t,e,r){var n=i["dynCall_"+t];return r&&r.length?n.apply(null,[e].concat(r)):n.call(null,e)}(t,e,r):kt(e).apply(null,r)}function Rt(t,e){var r,n,i,o=(t=L(t)).includes("j")?(r=t,n=e,i=[],function(){return i.length=0,Object.assign(i,arguments),Ft(r,n,i)}):kt(e);return"function"!=typeof o&&H(`unknown function pointer with signature ${t}: ${e}`),o}var Dt=void 0;function xt(t,e){var r=[],n={};throw e.forEach((function t(e){n[e]||tt[e]||(yt[e]?yt[e].forEach(t):(r.push(e),n[e]=!0))})),new Dt(`${t}: `+r.map(et).join([", "]))}function It(t,e,r,n,i){var o=e.length;o<2&&H("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==e[1]&&null!==r,s=!1,u=1;u<e.length;++u)if(null!==e[u]&&void 0===e[u].destructorFunction){s=!0;break}var c="void"!==e[0].name,l=o-2,f=new Array(l),p=[],d=[];return function(){var r;arguments.length!==l&&H(`function ${t} called with ${arguments.length} arguments, expected ${l} args!`),d.length=0,p.length=a?2:1,p[0]=i,a&&(r=e[1].toWireType(d,this),p[1]=r);for(var o=0;o<l;++o)f[o]=e[o+2].toWireType(d,arguments[o]),p.push(f[o]);var u=n.apply(null,p);function h(t){if(s)dt(d);else for(var n=a?1:2;n<e.length;n++){var i=1===n?r:f[n-2];null!==e[n].destructorFunction&&e[n].destructorFunction(i)}if(c)return e[0].fromWireType(t)}return h(u)}}function Ut(t,e){for(var r=[],n=0;n<t;n++)r.push(g[e+4*n>>2]);return r}function Vt(t,e,r){return t instanceof Object||H(`${r} with invalid "this": ${t}`),t instanceof e.registeredClass.constructor||H(`${r} incompatible with "this" of type ${t.constructor.name}`),t.$$.ptr||H(`cannot call emscripten binding method ${r} on deleted object`),At(t.$$.ptr,t.$$.ptrType.registeredClass,e.registeredClass)}function zt(t){t>=V.reserved&&0==--V.get(t).refcount&&V.free(t)}function Bt(t,e,r){switch(e){case 0:return function(t){var e=r?d:h;return this.fromWireType(e[t])};case 1:return function(t){var e=r?v:y;return this.fromWireType(e[t>>1])};case 2:return function(t){var e=r?m:g;return this.fromWireType(e[t>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function Ht(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function Mt(t,e){switch(e){case 2:return function(t){return this.fromWireType($[t>>2])};case 3:return function(t){return this.fromWireType(b[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function Nt(t,e,r){switch(e){case 0:return r?function(t){return d[t]}:function(t){return h[t]};case 1:return r?function(t){return v[t>>1]}:function(t){return y[t>>1]};case 2:return r?function(t){return m[t>>2]}:function(t){return g[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var qt="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function Gt(t,e,r){for(var n=e+r,i=e;t[i]&&!(i>=n);)++i;if(i-e>16&&t.buffer&&qt)return qt.decode(t.subarray(e,i));for(var o="";e<i;){var a=t[e++];if(128&a){var s=63&t[e++];if(192!=(224&a)){var u=63&t[e++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&t[e++])<65536)o+=String.fromCharCode(a);else{var c=a-65536;o+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else o+=String.fromCharCode((31&a)<<6|s)}else o+=String.fromCharCode(a)}return o}var Lt="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function Jt(t,e){for(var r=t,n=r>>1,i=n+e/2;!(n>=i)&&y[n];)++n;if((r=n<<1)-t>32&&Lt)return Lt.decode(h.subarray(t,r));for(var o="",a=0;!(a>=e/2);++a){var s=v[t+2*a>>1];if(0==s)break;o+=String.fromCharCode(s)}return o}function Kt(t,e,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=e,i=(r-=2)<2*t.length?r/2:t.length,o=0;o<i;++o){var a=t.charCodeAt(o);v[e>>1]=a,e+=2}return v[e>>1]=0,e-n}function Qt(t){return 2*t.length}function Zt(t,e){for(var r=0,n="";!(r>=e/4);){var i=m[t+4*r>>2];if(0==i)break;if(++r,i>=65536){var o=i-65536;n+=String.fromCharCode(55296|o>>10,56320|1023&o)}else n+=String.fromCharCode(i)}return n}function Xt(t,e,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=e,i=n+r-4,o=0;o<t.length;++o){var a=t.charCodeAt(o);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),m[e>>2]=a,(e+=4)+4>i)break}return m[e>>2]=0,e-n}function Yt(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n>=55296&&n<=57343&&++r,e+=4}return e}var te={};function ee(t){var e=te[t];return void 0===e?L(t):e}var re,ne=[],ie=[];function oe(t){var e=t-f.buffer.byteLength+65535>>>16;try{return f.grow(e),T(),1}catch(t){}}re=()=>performance.now();var ae=[null,[],[]];B=i.BindingError=z(Error,"BindingError"),V.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),V.reserved=V.allocated.length,i.count_emval_handles=function(){for(var t=0,e=V.reserved;e<V.allocated.length;++e)void 0!==V.allocated[e]&&++t;return t},q=i.PureVirtualError=z(Error,"PureVirtualError"),function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);G=t}(),i.getInheritedInstanceCount=function(){return Object.keys(Z).length},i.getLiveInheritedInstances=function(){var t=[];for(var e in Z)Z.hasOwnProperty(e)&&t.push(Z[e]);return t},i.flushPendingDeletes=K,i.setDelayFunction=function(t){Q=t,J.length&&Q&&Q(K)},ut=i.InternalError=z(Error,"InternalError"),Ct.prototype.isAliasOf=function(t){if(!(this instanceof Ct))return!1;if(!(t instanceof Ct))return!1;for(var e=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=t.$$.ptrType.registeredClass,i=t.$$.ptr;e.baseClass;)r=e.upcast(r),e=e.baseClass;for(;n.baseClass;)i=n.upcast(i),n=n.baseClass;return e===n&&r===i},Ct.prototype.clone=function(){if(this.$$.ptr||bt(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=ft(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},Ct.prototype.delete=function(){this.$$.ptr||bt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&H("Object already scheduled for deletion"),nt(this),ot(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},Ct.prototype.isDeleted=function(){return!this.$$.ptr},Ct.prototype.deleteLater=function(){return this.$$.ptr||bt(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&H("Object already scheduled for deletion"),J.push(this),1===J.length&&Q&&Q(K),this.$$.deleteScheduled=!0,this},St.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},St.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},St.prototype.argPackAdvance=8,St.prototype.readValueFromPointer=ht,St.prototype.deleteObject=function(t){null!==t&&t.delete()},St.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var r=function(t,e){return e=X(t,e),Z[e]}(this.registeredClass,e);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=e,r.$$.smartPtr=t,r.clone();var n=r.clone();return this.destructor(t),n}function i(){return this.isSmartPointer?lt(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):lt(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var o,a=this.registeredClass.getActualType(e),s=st[a];if(!s)return i.call(this);o=this.isConst?s.constPointerType:s.pointerType;var u=at(e,this.registeredClass,o.registeredClass);return null===u?i.call(this):this.isSmartPointer?lt(o.registeredClass.instancePrototype,{ptrType:o,ptr:u,smartPtrType:this,smartPtr:t}):lt(o.registeredClass.instancePrototype,{ptrType:o,ptr:u})},Dt=i.UnboundTypeError=z(Error,"UnboundTypeError");var se={t:function(t,e,r){t=L(t),e=rt(e,"wrapper"),r=M(r);var n=[].slice,i=e.registeredClass,o=i.instancePrototype,a=i.baseClass.instancePrototype,s=i.baseClass.constructor,u=U(t,(function(){i.baseClass.pureVirtualFunctions.forEach(function(t){if(this[t]===a[t])throw new q(`Pure virtual function ${t} must be implemented in JavaScript`)}.bind(this)),Object.defineProperty(this,"__parent",{value:o}),this.__construct.apply(this,n.call(arguments))}));for(var c in o.__construct=function(){this===o&&H("Pass correct 'this' to __construct");var t=s.implement.apply(void 0,[this].concat(n.call(arguments)));nt(t);var e=t.$$;t.notifyOnDestruction(),e.preservePointerOnDelete=!0,Object.defineProperties(this,{$$:{value:e}}),ft(this),Y(i,e.ptr,this)},o.__destruct=function(){var t;this===o&&H("Pass correct 'this' to __destruct"),nt(this),t=X(i,t=this.$$.ptr),Z.hasOwnProperty(t)?delete Z[t]:H(`Tried to unregister unregistered instance: ${t}`)},u.prototype=Object.create(o),r)u.prototype[c]=r[c];return N(u)},r:function(t){var e=pt[t];delete pt[t];var r=e.rawConstructor,n=e.rawDestructor,i=e.fields;mt([t],i.map((t=>t.getterReturnType)).concat(i.map((t=>t.setterArgumentType))),(t=>{var o={};return i.forEach(((e,r)=>{var n=e.fieldName,a=t[r],s=e.getter,u=e.getterContext,c=t[r+i.length],l=e.setter,f=e.setterContext;o[n]={read:t=>a.fromWireType(s(u,t)),write:(t,e)=>{var r=[];l(f,t,c.toWireType(r,e)),dt(r)}}})),[{name:e.name,fromWireType:function(t){var e={};for(var r in o)e[r]=o[r].read(t);return n(t),e},toWireType:function(t,e){for(var i in o)if(!(i in e))throw new TypeError(`Missing field: "${i}"`);var a=r();for(i in o)o[i].write(a,e[i]);return null!==t&&t.push(n,a),a},argPackAdvance:8,readValueFromPointer:ht,destructorFunction:n}]}))},C:function(){},I:function(t,e,r,n,i){var o=gt(r);$t(t,{name:e=L(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:i},argPackAdvance:8,readValueFromPointer:function(t){var n;if(1===r)n=d;else if(2===r)n=v;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+e);n=m}return this.fromWireType(n[t>>o])},destructorFunction:null})},c:function(t,e,r,n,i,o,a,s,u,c,l,f,p){l=L(l),o=Rt(i,o),s&&(s=Rt(a,s)),c&&(c=Rt(u,c)),p=Rt(f,p);var d=I(l);Tt(d,(function(){xt(`Cannot construct ${l} due to unbound types`,[n])})),mt([t,e,r],n?[n]:[],(function(e){var r,i;e=e[0],i=n?(r=e.registeredClass).instancePrototype:Ct.prototype;var a=U(d,(function(){if(Object.getPrototypeOf(this)!==u)throw new B("Use 'new' to construct "+l);if(void 0===f.constructor_body)throw new B(l+" has no accessible constructor");var t=f.constructor_body[arguments.length];if(void 0===t)throw new B(`Tried to invoke ctor of ${l} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(f.constructor_body).toString()}) parameters instead!`);return t.apply(this,arguments)})),u=Object.create(i,{constructor:{value:a}});a.prototype=u;var f=new Pt(l,a,u,p,r,o,s,c);f.baseClass&&(void 0===f.baseClass.__derivedClasses&&(f.baseClass.__derivedClasses=[]),f.baseClass.__derivedClasses.push(f));var h=new St(l,f,!0,!1,!1),v=new St(l+"*",f,!1,!1,!1),y=new St(l+" const*",f,!1,!0,!1);return st[t]={pointerType:v,constPointerType:y},Et(d,a),[h,v,y]}))},o:function(t,e,r,n,i,o,a){var s=Ut(r,n);e=L(e),o=Rt(i,o),mt([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`;function i(){xt(`Cannot call ${n} due to unbound types`,s)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]);var u=t.registeredClass.constructor;return void 0===u[e]?(i.argCount=r-1,u[e]=i):(wt(u,e,n),u[e].overloadTable[r-1]=i),mt([],s,(function(i){var s=[i[0],null].concat(i.slice(1)),c=It(n,s,null,o,a);if(void 0===u[e].overloadTable?(c.argCount=r-1,u[e]=c):u[e].overloadTable[r-1]=c,t.registeredClass.__derivedClasses)for(const r of t.registeredClass.__derivedClasses)r.constructor.hasOwnProperty(e)||(r.constructor[e]=c);return[]})),[]}))},e:function(t,e,r,n,i,o){e>0||j(undefined);var a=Ut(e,r);i=Rt(n,i),mt([],[t],(function(t){var r=`constructor ${(t=t[0]).name}`;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new B(`Cannot register multiple constructors with identical number of parameters (${e-1}) for class '${t.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return t.registeredClass.constructor_body[e-1]=()=>{xt(`Cannot construct ${t.name} due to unbound types`,a)},mt([],a,(function(n){return n.splice(1,0,null),t.registeredClass.constructor_body[e-1]=It(r,n,null,i,o),[]})),[]}))},a:function(t,e,r,n,i,o,a,s){var u=Ut(r,n);e=L(e),o=Rt(i,o),mt([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`;function i(){xt(`Cannot call ${n} due to unbound types`,u)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var c=t.registeredClass.instancePrototype,l=c[e];return void 0===l||void 0===l.overloadTable&&l.className!==t.name&&l.argCount===r-2?(i.argCount=r-2,i.className=t.name,c[e]=i):(wt(c,e,n),c[e].overloadTable[r-2]=i),mt([],u,(function(i){var s=It(n,i,t,o,a);return void 0===c[e].overloadTable?(s.argCount=r-2,c[e]=s):c[e].overloadTable[r-2]=s,[]})),[]}))},d:function(t,e,r,n,i,o,a,s,u,c){e=L(e),i=Rt(n,i),mt([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`,l={get:function(){xt(`Cannot access ${n} due to unbound types`,[r,a])},enumerable:!0,configurable:!0};return l.set=u?()=>{xt(`Cannot access ${n} due to unbound types`,[r,a])}:()=>{H(n+" is a read-only property")},Object.defineProperty(t.registeredClass.instancePrototype,e,l),mt([],u?[r,a]:[r],(function(r){var a=r[0],l={get:function(){var e=Vt(this,t,n+" getter");return a.fromWireType(i(o,e))},enumerable:!0};if(u){u=Rt(s,u);var f=r[1];l.set=function(e){var r=Vt(this,t,n+" setter"),i=[];u(c,r,f.toWireType(i,e)),dt(i)}}return Object.defineProperty(t.registeredClass.instancePrototype,e,l),[]})),[]}))},x:function(t,e,r){t=L(t),mt([],[e],(function(e){return e=e[0],i[t]=e.fromWireType(r),[]}))},H:function(t,e){$t(t,{name:e=L(e),fromWireType:function(t){var e=M(t);return zt(t),e},toWireType:function(t,e){return N(e)},argPackAdvance:8,readValueFromPointer:ht,destructorFunction:null})},h:function(t,e,r,n){var i=gt(r);function o(){}e=L(e),o.values={},$t(t,{name:e,constructor:o,fromWireType:function(t){return this.constructor.values[t]},toWireType:function(t,e){return e.value},argPackAdvance:8,readValueFromPointer:Bt(e,i,n),destructorFunction:null}),Tt(e,o)},b:function(t,e,r){var n=rt(t,"enum");e=L(e);var i=n.constructor,o=Object.create(n.constructor.prototype,{value:{value:r},constructor:{value:U(`${n.name}_${e}`,(function(){}))}});i.values[r]=o,i[e]=o},A:function(t,e,r){var n=gt(r);$t(t,{name:e=L(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:Mt(e,n),destructorFunction:null})},g:function(t,e,r,n,i,o){var a=Ut(e,r);t=L(t),i=Rt(n,i),Tt(t,(function(){xt(`Cannot call ${t} due to unbound types`,a)}),e-1),mt([],a,(function(r){var n=[r[0],null].concat(r.slice(1));return Et(t,It(t,n,null,i,o),e-1),[]}))},p:function(t,e,r,n){e=L(e);var i=gt(r),o=t=>t;if(0===n){var a=32-8*r;o=t=>t<<a>>>a}var s=e.includes("unsigned");$t(t,{name:e,fromWireType:o,toWireType:s?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:Nt(e,i,0!==n),destructorFunction:null})},k:function(t,e,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function i(t){var e=g,r=e[t>>=2],i=e[t+1];return new n(e.buffer,i,r)}$t(t,{name:r=L(r),fromWireType:i,argPackAdvance:8,readValueFromPointer:i},{ignoreDuplicateRegistrations:!0})},z:function(t,e){var r="std::string"===(e=L(e));$t(t,{name:e,fromWireType:function(t){var e,n,i=g[t>>2],o=t+4;if(r)for(var a=o,s=0;s<=i;++s){var u=o+s;if(s==i||0==h[u]){var c=(n=a)?Gt(h,n,u-a):"";void 0===e?e=c:(e+=String.fromCharCode(0),e+=c),a=u+1}}else{var l=new Array(i);for(s=0;s<i;++s)l[s]=String.fromCharCode(h[o+s]);e=l.join("")}return ue(t),e},toWireType:function(t,e){var n;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var i="string"==typeof e;i||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||H("Cannot pass non-string to std::string"),n=r&&i?function(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n<=127?e++:n<=2047?e+=2:n>=55296&&n<=57343?(e+=4,++r):e+=3}return e}(e):e.length;var o=fe(4+n+1),a=o+4;if(g[o>>2]=n,r&&i)!function(t,e,r,n){if(!(n>0))return 0;for(var i=r+n-1,o=0;o<t.length;++o){var a=t.charCodeAt(o);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),a<=127){if(r>=i)break;e[r++]=a}else if(a<=2047){if(r+1>=i)break;e[r++]=192|a>>6,e[r++]=128|63&a}else if(a<=65535){if(r+2>=i)break;e[r++]=224|a>>12,e[r++]=128|a>>6&63,e[r++]=128|63&a}else{if(r+3>=i)break;e[r++]=240|a>>18,e[r++]=128|a>>12&63,e[r++]=128|a>>6&63,e[r++]=128|63&a}}e[r]=0}(e,h,a,n+1);else if(i)for(var s=0;s<n;++s){var u=e.charCodeAt(s);u>255&&(ue(a),H("String has UTF-16 code units that do not fit in 8 bits")),h[a+s]=u}else for(s=0;s<n;++s)h[a+s]=e[s];return null!==t&&t.push(ue,o),o},argPackAdvance:8,readValueFromPointer:ht,destructorFunction:function(t){ue(t)}})},w:function(t,e,r){var n,i,o,a,s;r=L(r),2===e?(n=Jt,i=Kt,a=Qt,o=()=>y,s=1):4===e&&(n=Zt,i=Xt,a=Yt,o=()=>g,s=2),$t(t,{name:r,fromWireType:function(t){for(var r,i=g[t>>2],a=o(),u=t+4,c=0;c<=i;++c){var l=t+4+c*e;if(c==i||0==a[l>>s]){var f=n(u,l-u);void 0===r?r=f:(r+=String.fromCharCode(0),r+=f),u=l+e}}return ue(t),r},toWireType:function(t,n){"string"!=typeof n&&H(`Cannot pass non-string to C++ string type ${r}`);var o=a(n),u=fe(4+o+e);return g[u>>2]=o>>s,i(n,u+4,o+e),null!==t&&t.push(ue,u),u},argPackAdvance:8,readValueFromPointer:ht,destructorFunction:function(t){ue(t)}})},s:function(t,e,r,n,i,o){pt[t]={name:L(e),rawConstructor:Rt(r,n),rawDestructor:Rt(i,o),fields:[]}},m:function(t,e,r,n,i,o,a,s,u,c){pt[t].fields.push({fieldName:L(e),getterReturnType:r,getter:Rt(n,i),getterContext:o,setterArgumentType:a,setter:Rt(s,u),setterContext:c})},J:function(t,e){$t(t,{isVoid:!0,name:e=L(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},v:function(t,e,r,n,i){return(t=ne[t])(e=M(e),r=ee(r),function(t){var e=[];return g[t>>2]=N(e),e}(n),i)},l:function(t,e,r,n){(t=ne[t])(e=M(e),r=ee(r),null,n)},n:zt,i:function(t,e){var r=function(t,e){for(var r=new Array(t),n=0;n<t;++n)r[n]=rt(g[e+4*n>>2],"parameter "+n);return r}(t,e),n=r[0],i=n.name+"_$"+r.slice(1).map((function(t){return t.name})).join("_")+"$",o=ie[i];if(void 0!==o)return o;var a,s,u=new Array(t-1);return a=(e,i,o,a)=>{for(var s=0,c=0;c<t-1;++c)u[c]=r[c+1].readValueFromPointer(a+s),s+=r[c+1].argPackAdvance;var l=e[i].apply(e,u);for(c=0;c<t-1;++c)r[c+1].deleteObject&&r[c+1].deleteObject(u[c]);if(!n.isVoid)return n.toWireType(o,l)},s=ne.length,ne.push(a),o=s,ie[i]=o,o},B:function(t){t>4&&(V.get(t).refcount+=1)},u:function(t){dt(M(t)),zt(t)},q:function(t,e){var r=(t=rt(t,"_emval_take_value")).readValueFromPointer(e);return N(r)},j:function(){j("")},F:function(){return Date.now()},f:re,G:function(t,e,r){h.copyWithin(t,e,e+r)},D:function(t){var e=h.length,r=2147483648;if((t>>>=0)>r)return!1;for(var n,i=1;i<=4;i*=2){var o=e*(1+.2/i);if(o=Math.min(o,t+100663296),oe(Math.min(r,(n=Math.max(t,o))+(65536-n%65536)%65536)))return!0}return!1},E:function(t){var e;e=t,p||(i.onExit&&i.onExit(e),w=!0),a(e,new D(e))},y:function(t,e,r,n){for(var i,o,a,s=0,u=0;u<r;u++){var f=g[e>>2],p=g[e+4>>2];e+=8;for(var d=0;d<p;d++)i=t,o=h[f+d],a=void 0,a=ae[i],0===o||10===o?((1===i?c:l)(Gt(a,0)),a.length=0):a.push(o);s+=p}return g[n>>2]=s,0}};!function(){var t,e,r,o,a={a:se};function s(t){var e,r=t.exports;return i.asm=r,f=i.asm.K,T(),C=i.asm.N,e=i.asm.L,O.unshift(e),function(){if(S--,i.monitorRunDependencies&&i.monitorRunDependencies(S),0==S&&E){var t=E;E=null,t()}}(),r}if(S++,i.monitorRunDependencies&&i.monitorRunDependencies(S),i.instantiateWasm)try{return i.instantiateWasm(a,s)}catch(t){l("Module.instantiateWasm callback failed with error: "+t),n(t)}(t=u,e=P,r=a,o=function(t){s(t.instance)},t||"function"!=typeof WebAssembly.instantiateStreaming||k(e)||"function"!=typeof fetch?R(e,r,o):fetch(e,{credentials:"same-origin"}).then((t=>WebAssembly.instantiateStreaming(t,r).then(o,(function(t){return l("wasm streaming compile failed: "+t),l("falling back to ArrayBuffer instantiation"),R(e,r,o)}))))).catch(n)}();var ue=function(){return(ue=i.asm.M).apply(null,arguments)},ce=function(){return(ce=i.asm.O).apply(null,arguments)};i.__embind_initialize_bindings=function(){return(i.__embind_initialize_bindings=i.asm.P).apply(null,arguments)};var le,fe=function(){return(fe=i.asm.Q).apply(null,arguments)};function pe(){function t(){le||(le=!0,i.calledRun=!0,w||(x(O),r(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)t=i.postRun.shift(),W.unshift(t);var t;x(W)}()))}S>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)t=i.preRun.shift(),_.unshift(t);var t;x(_)}(),S>0||(i.setStatus?(i.setStatus("Running..."),setTimeout((function(){setTimeout((function(){i.setStatus("")}),1),t()}),1)):t()))}if(i.dynCall_iifiiiijii=function(){return(i.dynCall_iifiiiijii=i.asm.R).apply(null,arguments)},i.dynCall_vifijii=function(){return(i.dynCall_vifijii=i.asm.S).apply(null,arguments)},i.dynCall_jiji=function(){return(i.dynCall_jiji=i.asm.T).apply(null,arguments)},E=function t(){le||pe(),le||(E=t)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();return pe(),t.ready});t.exports=r}));t({default:r,__moduleExports:r})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
