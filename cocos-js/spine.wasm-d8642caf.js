System.register([],(function(t){"use strict";return{execute:function(){var e;t("default",(e="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(t){void 0===t&&(t={});var r,n,o=void 0!==t?t:{};o.ready=new Promise(((t,e)=>{r=t,n=e}));var i=Object.assign({},o),a="";"undefined"!=typeof document&&document.currentScript&&(a=document.currentScript.src),e&&(a=e),a=0!==a.indexOf("blob:")?a.substr(0,a.replace(/[?#].*/,"").lastIndexOf("/")+1):"";var s,u,c=o.print||console.log.bind(console),l=o.printErr||console.error.bind(console);Object.assign(o,i),i=null,o.arguments&&o.arguments,o.thisProgram&&o.thisProgram,o.quit&&o.quit,o.wasmBinary&&(s=o.wasmBinary),o.noExitRuntime,"object"!=typeof WebAssembly&&E("no native wasm support detected");var f,p,d,h,v,y,m,g,$,b=!1;function C(){var t=u.buffer;o.HEAP8=f=new Int8Array(t),o.HEAP16=d=new Int16Array(t),o.HEAP32=v=new Int32Array(t),o.HEAPU8=p=new Uint8Array(t),o.HEAPU16=h=new Uint16Array(t),o.HEAPU32=y=new Uint32Array(t),o.HEAPF32=m=new Float32Array(t),o.HEAPF64=g=new Float64Array(t)}var T,w,P=[],A=[],W=[],k=0,S=null;function E(t){o.onAbort&&o.onAbort(t),l(t="Aborted("+t+")"),b=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw n(e),e}function O(t){return t.startsWith("data:application/octet-stream;base64,")}function F(t){try{if(t==T&&s)return new Uint8Array(s);throw"both async and sync fetching of the wasm failed"}catch(t){E(t)}}function _(t,e,r){return function(t){return s||"function"!=typeof fetch?Promise.resolve().then((()=>F(t))):fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>F(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(r,(t=>{l("failed to asynchronously prepare wasm: "+t),E(t)}))}function j(t){for(;t.length>0;)t.shift()(o)}O(T="spine.wasm")||(w=T,T=o.locateFile?o.locateFile(w,a):a+w);var R="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function D(t,e,r){for(var n=e+r,o=e;t[o]&&!(o>=n);)++o;if(o-e>16&&t.buffer&&R)return R.decode(t.subarray(e,o));for(var i="";e<o;){var a=t[e++];if(128&a){var s=63&t[e++];if(192!=(224&a)){var u=63&t[e++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&t[e++])<65536)i+=String.fromCharCode(a);else{var c=a-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}function I(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${t}`)}}var U=void 0;function V(t){for(var e="",r=t;p[r];)e+=U[p[r++]];return e}var x={},H={},z={};function B(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=48&&e<=57?`_${t}`:t}function L(t,e){return{[t=B(t)]:function(){return e.apply(this,arguments)}}[t]}function M(t,e){var r=L(e,(function(t){this.name=e,this.message=t;var r=new Error(t).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},r}var q=void 0;function G(t){throw new q(t)}var N=void 0;function J(t){throw new N(t)}function K(t,e,r){function n(e){var n=r(e);n.length!==t.length&&J("Mismatched type converter count");for(var o=0;o<t.length;++o)Z(t[o],n[o])}t.forEach((function(t){z[t]=e}));var o=new Array(e.length),i=[],a=0;e.forEach(((t,e)=>{H.hasOwnProperty(t)?o[e]=H[t]:(i.push(t),x.hasOwnProperty(t)||(x[t]=[]),x[t].push((()=>{o[e]=H[t],++a===i.length&&n(o)})))})),0===i.length&&n(o)}function Z(t,e,r){if(void 0===r&&(r={}),!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=e.name;if(t||G(`type "${n}" must have a positive integer typeid pointer`),H.hasOwnProperty(t)){if(r.ignoreDuplicateRegistrations)return;G(`Cannot register type '${n}' twice`)}if(H[t]=e,delete z[t],x.hasOwnProperty(t)){var o=x[t];delete x[t],o.forEach((t=>t()))}}function Q(t){G(t.$$.ptrType.registeredClass.name+" instance already deleted")}var X=!1;function Y(){}function tt(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function et(t,e,r){if(e===r)return t;if(void 0===r.baseClass)return null;var n=et(t,e,r.baseClass);return null===n?null:r.downcast(n)}var rt={};var nt=[];function ot(){for(;nt.length;){var t=nt.pop();t.$$.deleteScheduled=!1,t.delete()}}var it=void 0;var at={};function st(t,e){return e.ptrType&&e.ptr||J("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&J("Both smartPtrType and smartPtr must be specified"),e.count={value:1},ut(Object.create(t,{$$:{value:e}}))}function ut(t){return"undefined"==typeof FinalizationRegistry?(ut=t=>t,t):(X=new FinalizationRegistry((t=>{tt(t.$$)})),Y=t=>X.unregister(t),(ut=t=>{var e=t.$$;if(e.smartPtr){var r={$$:e};X.register(t,r,t)}return t})(t))}function ct(){}function lt(t,e,r){if(void 0===t[e].overloadTable){var n=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||G(`Function '${r}' called with an invalid number of arguments (${arguments.length}) - expects one of (${t[e].overloadTable})!`),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[n.argCount]=n}}function ft(t,e,r){o.hasOwnProperty(t)?((void 0===r||void 0!==o[t].overloadTable&&void 0!==o[t].overloadTable[r])&&G(`Cannot register public name '${t}' twice`),lt(o,t,t),o.hasOwnProperty(r)&&G(`Cannot register multiple overloads of a function with the same number of arguments (${r})!`),o[t].overloadTable[r]=e):(o[t]=e,void 0!==r&&(o[t].numArguments=r))}function pt(t,e,r,n,o,i,a,s){this.name=t,this.constructor=e,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function dt(t,e,r){for(;e!==r;)e.upcast||G(`Expected null or instance of ${r.name}, got an instance of ${e.name}`),t=e.upcast(t),e=e.baseClass;return t}function ht(t,e){if(null===e)return this.isReference&&G(`null is not a valid ${this.name}`),0;e.$$||G(`Cannot pass "${Dt(e)}" as a ${this.name}`),e.$$.ptr||G(`Cannot pass deleted object as a pointer of type ${this.name}`);var r=e.$$.ptrType.registeredClass;return dt(e.$$.ptr,r,this.registeredClass)}function vt(t,e){var r;if(null===e)return this.isReference&&G(`null is not a valid ${this.name}`),this.isSmartPointer?(r=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,r),r):0;e.$$||G(`Cannot pass "${Dt(e)}" as a ${this.name}`),e.$$.ptr||G(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&e.$$.ptrType.isConst&&G(`Cannot convert argument of type ${e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name} to parameter type ${this.name}`);var n=e.$$.ptrType.registeredClass;if(r=dt(e.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&G("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?r=e.$$.smartPtr:G(`Cannot convert argument of type ${e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:r=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)r=e.$$.smartPtr;else{var o=e.clone();r=this.rawShare(r,_t.toHandle((function(){o.delete()}))),null!==t&&t.push(this.rawDestructor,r)}break;default:G("Unsupporting sharing policy")}return r}function yt(t,e){if(null===e)return this.isReference&&G(`null is not a valid ${this.name}`),0;e.$$||G(`Cannot pass "${Dt(e)}" as a ${this.name}`),e.$$.ptr||G(`Cannot pass deleted object as a pointer of type ${this.name}`),e.$$.ptrType.isConst&&G(`Cannot convert argument of type ${e.$$.ptrType.name} to parameter type ${this.name}`);var r=e.$$.ptrType.registeredClass;return dt(e.$$.ptr,r,this.registeredClass)}function mt(t){return this.fromWireType(v[t>>2])}function gt(t,e,r,n,o,i,a,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=r,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==e.baseClass?this.toWireType=vt:n?(this.toWireType=ht,this.destructorFunction=null):(this.toWireType=yt,this.destructorFunction=null)}var $t=[];function bt(t){var e=$t[t];return e||(t>=$t.length&&($t.length=t+1),$t[t]=e=$.get(t)),e}function Ct(t,e,r){return t.includes("j")?function(t,e,r){var n=o["dynCall_"+t];return r&&r.length?n.apply(null,[e].concat(r)):n.call(null,e)}(t,e,r):bt(e).apply(null,r)}function Tt(t,e){var r,n,o,i=(t=V(t)).includes("j")?(r=t,n=e,o=[],function(){return o.length=0,Object.assign(o,arguments),Ct(r,n,o)}):bt(e);return"function"!=typeof i&&G(`unknown function pointer with signature ${t}: ${e}`),i}var wt=void 0;function Pt(t){var e=Qt(t),r=V(e);return Zt(e),r}function At(t,e){var r=[],n={};throw e.forEach((function t(e){n[e]||H[e]||(z[e]?z[e].forEach(t):(r.push(e),n[e]=!0))})),new wt(`${t}: `+r.map(Pt).join([", "]))}function Wt(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function kt(t,e,r,n,o){var i=e.length;i<2&&G("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==e[1]&&null!==r,s=!1,u=1;u<e.length;++u)if(null!==e[u]&&void 0===e[u].destructorFunction){s=!0;break}var c="void"!==e[0].name,l=i-2,f=new Array(l),p=[],d=[];return function(){var r;arguments.length!==l&&G(`function ${t} called with ${arguments.length} arguments, expected ${l} args!`),d.length=0,p.length=a?2:1,p[0]=o,a&&(r=e[1].toWireType(d,this),p[1]=r);for(var i=0;i<l;++i)f[i]=e[i+2].toWireType(d,arguments[i]),p.push(f[i]);var u=n.apply(null,p);function h(t){if(s)Wt(d);else for(var n=a?1:2;n<e.length;n++){var o=1===n?r:f[n-2];null!==e[n].destructorFunction&&e[n].destructorFunction(o)}if(c)return e[0].fromWireType(t)}return h(u)}}function St(t,e){for(var r=[],n=0;n<t;n++)r.push(y[e+4*n>>2]);return r}function Et(t,e,r){return t instanceof Object||G(`${r} with invalid "this": ${t}`),t instanceof e.registeredClass.constructor||G(`${r} incompatible with "this" of type ${t.constructor.name}`),t.$$.ptr||G(`cannot call emscripten binding method ${r} on deleted object`),dt(t.$$.ptr,t.$$.ptrType.registeredClass,e.registeredClass)}var Ot=new function(){this.allocated=[void 0],this.freelist=[],this.get=function(t){return this.allocated[t]},this.has=function(t){return void 0!==this.allocated[t]},this.allocate=function(t){var e=this.freelist.pop()||this.allocated.length;return this.allocated[e]=t,e},this.free=function(t){this.allocated[t]=void 0,this.freelist.push(t)}};function Ft(t){t>=Ot.reserved&&0==--Ot.get(t).refcount&&Ot.free(t)}var _t={toValue:t=>(t||G("Cannot use deleted val. handle = "+t),Ot.get(t).value),toHandle:t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Ot.allocate({refcount:1,value:t})}}};function jt(t,e,r){switch(e){case 0:return function(t){var e=r?f:p;return this.fromWireType(e[t])};case 1:return function(t){var e=r?d:h;return this.fromWireType(e[t>>1])};case 2:return function(t){var e=r?v:y;return this.fromWireType(e[t>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function Rt(t,e){var r=H[t];return void 0===r&&G(e+" has unknown type "+Pt(t)),r}function Dt(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function It(t,e){switch(e){case 2:return function(t){return this.fromWireType(m[t>>2])};case 3:return function(t){return this.fromWireType(g[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function Ut(t,e,r){switch(e){case 0:return r?function(t){return f[t]}:function(t){return p[t]};case 1:return r?function(t){return d[t>>1]}:function(t){return h[t>>1]};case 2:return r?function(t){return v[t>>2]}:function(t){return y[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var Vt="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function xt(t,e){for(var r=t,n=r>>1,o=n+e/2;!(n>=o)&&h[n];)++n;if((r=n<<1)-t>32&&Vt)return Vt.decode(p.subarray(t,r));for(var i="",a=0;!(a>=e/2);++a){var s=d[t+2*a>>1];if(0==s)break;i+=String.fromCharCode(s)}return i}function Ht(t,e,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=e,o=(r-=2)<2*t.length?r/2:t.length,i=0;i<o;++i){var a=t.charCodeAt(i);d[e>>1]=a,e+=2}return d[e>>1]=0,e-n}function zt(t){return 2*t.length}function Bt(t,e){for(var r=0,n="";!(r>=e/4);){var o=v[t+4*r>>2];if(0==o)break;if(++r,o>=65536){var i=o-65536;n+=String.fromCharCode(55296|i>>10,56320|1023&i)}else n+=String.fromCharCode(o)}return n}function Lt(t,e,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=e,o=n+r-4,i=0;i<t.length;++i){var a=t.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++i)),v[e>>2]=a,(e+=4)+4>o)break}return v[e>>2]=0,e-n}function Mt(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n>=55296&&n<=57343&&++r,e+=4}return e}function qt(t){var e=t-u.buffer.byteLength+65535>>>16;try{return u.grow(e),C(),1}catch(t){}}var Gt=[null,[],[]];!function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);U=t}(),q=o.BindingError=M(Error,"BindingError"),N=o.InternalError=M(Error,"InternalError"),ct.prototype.isAliasOf=function(t){if(!(this instanceof ct))return!1;if(!(t instanceof ct))return!1;for(var e=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=t.$$.ptrType.registeredClass,o=t.$$.ptr;e.baseClass;)r=e.upcast(r),e=e.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return e===n&&r===o},ct.prototype.clone=function(){if(this.$$.ptr||Q(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=ut(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},ct.prototype.delete=function(){this.$$.ptr||Q(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&G("Object already scheduled for deletion"),Y(this),tt(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},ct.prototype.isDeleted=function(){return!this.$$.ptr},ct.prototype.deleteLater=function(){return this.$$.ptr||Q(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&G("Object already scheduled for deletion"),nt.push(this),1===nt.length&&it&&it(ot),this.$$.deleteScheduled=!0,this},o.getInheritedInstanceCount=function(){return Object.keys(at).length},o.getLiveInheritedInstances=function(){var t=[];for(var e in at)at.hasOwnProperty(e)&&t.push(at[e]);return t},o.flushPendingDeletes=ot,o.setDelayFunction=function(t){it=t,nt.length&&it&&it(ot)},gt.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},gt.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},gt.prototype.argPackAdvance=8,gt.prototype.readValueFromPointer=mt,gt.prototype.deleteObject=function(t){null!==t&&t.delete()},gt.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var r=function(t,e){return e=function(t,e){for(void 0===e&&G("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}(t,e),at[e]}(this.registeredClass,e);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=e,r.$$.smartPtr=t,r.clone();var n=r.clone();return this.destructor(t),n}function o(){return this.isSmartPointer?st(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):st(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var i,a=this.registeredClass.getActualType(e),s=rt[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var u=et(e,this.registeredClass,i.registeredClass);return null===u?o.call(this):this.isSmartPointer?st(i.registeredClass.instancePrototype,{ptrType:i,ptr:u,smartPtrType:this,smartPtr:t}):st(i.registeredClass.instancePrototype,{ptrType:i,ptr:u})},wt=o.UnboundTypeError=M(Error,"UnboundTypeError"),Ot.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),Ot.reserved=Ot.allocated.length,o.count_emval_handles=function(){for(var t=0,e=Ot.reserved;e<Ot.allocated.length;++e)void 0!==Ot.allocated[e]&&++t;return t};var Nt={o:function(){return 0},x:function(){return 0},y:function(){},t:function(){},C:function(t,e,r,n,o){var i=I(r);Z(t,{name:e=V(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:o},argPackAdvance:8,readValueFromPointer:function(t){var n;if(1===r)n=f;else if(2===r)n=d;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+e);n=v}return this.fromWireType(n[t>>i])},destructorFunction:null})},b:function(t,e,r,n,i,a,s,u,c,l,f,p,d){f=V(f),a=Tt(i,a),u&&(u=Tt(s,u)),l&&(l=Tt(c,l)),d=Tt(p,d);var h=B(f);ft(h,(function(){At(`Cannot construct ${f} due to unbound types`,[n])})),K([t,e,r],n?[n]:[],(function(e){var r,i;e=e[0],i=n?(r=e.registeredClass).instancePrototype:ct.prototype;var s=L(h,(function(){if(Object.getPrototypeOf(this)!==c)throw new q("Use 'new' to construct "+f);if(void 0===p.constructor_body)throw new q(f+" has no accessible constructor");var t=p.constructor_body[arguments.length];if(void 0===t)throw new q(`Tried to invoke ctor of ${f} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(p.constructor_body).toString()}) parameters instead!`);return t.apply(this,arguments)})),c=Object.create(i,{constructor:{value:s}});s.prototype=c;var p=new pt(f,s,c,d,r,a,u,l);p.baseClass&&(void 0===p.baseClass.__derivedClasses&&(p.baseClass.__derivedClasses=[]),p.baseClass.__derivedClasses.push(p));var v=new gt(f,p,!0,!1,!1),y=new gt(f+"*",p,!1,!1,!1),m=new gt(f+" const*",p,!1,!0,!1);return rt[t]={pointerType:y,constPointerType:m},function(t,e,r){o.hasOwnProperty(t)||J("Replacing nonexistant public symbol"),o[t].overloadTable,o[t]=e,o[t].argCount=r}(h,s),[v,y,m]}))},f:function(t,e,r,n,o,i,a){var s=St(r,n);e=V(e),i=Tt(o,i),K([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`;function o(){At(`Cannot call ${n} due to unbound types`,s)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]);var u=t.registeredClass.constructor;return void 0===u[e]?(o.argCount=r-1,u[e]=o):(lt(u,e,n),u[e].overloadTable[r-1]=o),K([],s,(function(o){var s=[o[0],null].concat(o.slice(1)),c=kt(n,s,null,i,a);if(void 0===u[e].overloadTable?(c.argCount=r-1,u[e]=c):u[e].overloadTable[r-1]=c,t.registeredClass.__derivedClasses)for(const r of t.registeredClass.__derivedClasses)r.constructor.hasOwnProperty(e)||(r.constructor[e]=c);return[]})),[]}))},j:function(t,e,r,n,o,i,a,s){e=V(e),i=Tt(o,i),K([],[t],(function(t){var o=`${(t=t[0]).name}.${e}`,u={get:function(){At(`Cannot access ${o} due to unbound types`,[r])},enumerable:!0,configurable:!0};return u.set=s?()=>{At(`Cannot access ${o} due to unbound types`,[r])}:()=>{G(`${o} is a read-only property`)},Object.defineProperty(t.registeredClass.constructor,e,u),K([],[r],(function(r){r=r[0];var o={get:function(){return r.fromWireType(i(n))},enumerable:!0};return s&&(s=Tt(a,s),o.set=t=>{var e=[];s(n,r.toWireType(e,t)),Wt(e)}),Object.defineProperty(t.registeredClass.constructor,e,o),[]})),[]}))},c:function(t,e,r,n,o,i){e>0||E(undefined);var a=St(e,r);o=Tt(n,o),K([],[t],(function(t){var r=`constructor ${(t=t[0]).name}`;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new q(`Cannot register multiple constructors with identical number of parameters (${e-1}) for class '${t.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return t.registeredClass.constructor_body[e-1]=()=>{At(`Cannot construct ${t.name} due to unbound types`,a)},K([],a,(function(n){return n.splice(1,0,null),t.registeredClass.constructor_body[e-1]=kt(r,n,null,o,i),[]})),[]}))},a:function(t,e,r,n,o,i,a,s){var u=St(r,n);e=V(e),i=Tt(o,i),K([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`;function o(){At(`Cannot call ${n} due to unbound types`,u)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var c=t.registeredClass.instancePrototype,l=c[e];return void 0===l||void 0===l.overloadTable&&l.className!==t.name&&l.argCount===r-2?(o.argCount=r-2,o.className=t.name,c[e]=o):(lt(c,e,n),c[e].overloadTable[r-2]=o),K([],u,(function(o){var s=kt(n,o,t,i,a);return void 0===c[e].overloadTable?(s.argCount=r-2,c[e]=s):c[e].overloadTable[r-2]=s,[]})),[]}))},e:function(t,e,r,n,o,i,a,s,u,c){e=V(e),o=Tt(n,o),K([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`,l={get:function(){At(`Cannot access ${n} due to unbound types`,[r,a])},enumerable:!0,configurable:!0};return l.set=u?()=>{At(`Cannot access ${n} due to unbound types`,[r,a])}:()=>{G(n+" is a read-only property")},Object.defineProperty(t.registeredClass.instancePrototype,e,l),K([],u?[r,a]:[r],(function(r){var a=r[0],l={get:function(){var e=Et(this,t,n+" getter");return a.fromWireType(o(i,e))},enumerable:!0};if(u){u=Tt(s,u);var f=r[1];l.set=function(e){var r=Et(this,t,n+" setter"),o=[];u(c,r,f.toWireType(o,e)),Wt(o)}}return Object.defineProperty(t.registeredClass.instancePrototype,e,l),[]})),[]}))},A:function(t,e){Z(t,{name:e=V(e),fromWireType:function(t){var e=_t.toValue(t);return Ft(t),e},toWireType:function(t,e){return _t.toHandle(e)},argPackAdvance:8,readValueFromPointer:mt,destructorFunction:null})},k:function(t,e,r,n){var o=I(r);function i(){}e=V(e),i.values={},Z(t,{name:e,constructor:i,fromWireType:function(t){return this.constructor.values[t]},toWireType:function(t,e){return e.value},argPackAdvance:8,readValueFromPointer:jt(e,o,n),destructorFunction:null}),ft(e,i)},d:function(t,e,r){var n=Rt(t,"enum");e=V(e);var o=n.constructor,i=Object.create(n.constructor.prototype,{value:{value:r},constructor:{value:L(`${n.name}_${e}`,(function(){}))}});o.values[r]=i,o[e]=i},p:function(t,e,r){var n=I(r);Z(t,{name:e=V(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:It(e,n),destructorFunction:null})},l:function(t,e,r,n){e=V(e);var o=I(r),i=t=>t;if(0===n){var a=32-8*r;i=t=>t<<a>>>a}var s=e.includes("unsigned");Z(t,{name:e,fromWireType:i,toWireType:s?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:Ut(e,o,0!==n),destructorFunction:null})},i:function(t,e,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function o(t){var e=y,r=e[t>>=2],o=e[t+1];return new n(e.buffer,o,r)}Z(t,{name:r=V(r),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},q:function(t,e){var r="std::string"===(e=V(e));Z(t,{name:e,fromWireType:function(t){var e,n,o=y[t>>2],i=t+4;if(r)for(var a=i,s=0;s<=o;++s){var u=i+s;if(s==o||0==p[u]){var c=(n=a)?D(p,n,u-a):"";void 0===e?e=c:(e+=String.fromCharCode(0),e+=c),a=u+1}}else{var l=new Array(o);for(s=0;s<o;++s)l[s]=String.fromCharCode(p[i+s]);e=l.join("")}return Zt(t),e},toWireType:function(t,e){var n;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var o="string"==typeof e;o||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||G("Cannot pass non-string to std::string"),n=r&&o?function(t){for(var e=0,r=0;r<t.length;++r){var n=t.charCodeAt(r);n<=127?e++:n<=2047?e+=2:n>=55296&&n<=57343?(e+=4,++r):e+=3}return e}(e):e.length;var i=Kt(4+n+1),a=i+4;if(y[i>>2]=n,r&&o)!function(t,e,r,n){if(!(n>0))return 0;for(var o=r+n-1,i=0;i<t.length;++i){var a=t.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++i)),a<=127){if(r>=o)break;e[r++]=a}else if(a<=2047){if(r+1>=o)break;e[r++]=192|a>>6,e[r++]=128|63&a}else if(a<=65535){if(r+2>=o)break;e[r++]=224|a>>12,e[r++]=128|a>>6&63,e[r++]=128|63&a}else{if(r+3>=o)break;e[r++]=240|a>>18,e[r++]=128|a>>12&63,e[r++]=128|a>>6&63,e[r++]=128|63&a}}e[r]=0}(e,p,a,n+1);else if(o)for(var s=0;s<n;++s){var u=e.charCodeAt(s);u>255&&(Zt(a),G("String has UTF-16 code units that do not fit in 8 bits")),p[a+s]=u}else for(s=0;s<n;++s)p[a+s]=e[s];return null!==t&&t.push(Zt,i),i},argPackAdvance:8,readValueFromPointer:mt,destructorFunction:function(t){Zt(t)}})},m:function(t,e,r){var n,o,i,a,s;r=V(r),2===e?(n=xt,o=Ht,a=zt,i=()=>h,s=1):4===e&&(n=Bt,o=Lt,a=Mt,i=()=>y,s=2),Z(t,{name:r,fromWireType:function(t){for(var r,o=y[t>>2],a=i(),u=t+4,c=0;c<=o;++c){var l=t+4+c*e;if(c==o||0==a[l>>s]){var f=n(u,l-u);void 0===r?r=f:(r+=String.fromCharCode(0),r+=f),u=l+e}}return Zt(t),r},toWireType:function(t,n){"string"!=typeof n&&G(`Cannot pass non-string to C++ string type ${r}`);var i=a(n),u=Kt(4+i+e);return y[u>>2]=i>>s,o(n,u+4,i+e),null!==t&&t.push(Zt,u),u},argPackAdvance:8,readValueFromPointer:mt,destructorFunction:function(t){Zt(t)}})},D:function(t,e){Z(t,{isVoid:!0,name:e=V(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},F:function(t,e,r){t=_t.toValue(t),e=Rt(e,"emval::as");var n=[],o=_t.toHandle(n);return y[r>>2]=o,e.toWireType(n,t)},r:Ft,G:function(t){t>4&&(Ot.get(t).refcount+=1)},E:function(t){Wt(_t.toValue(t)),Ft(t)},h:function(t,e){var r=(t=Rt(t,"_emval_take_value")).readValueFromPointer(e);return _t.toHandle(r)},g:function(){E("")},z:function(t,e,r){p.copyWithin(t,e,e+r)},u:function(t){var e=p.length,r=2147483648;if((t>>>=0)>r)return!1;for(var n,o=1;o<=4;o*=2){var i=e*(1+.2/o);if(i=Math.min(i,t+100663296),qt(Math.min(r,(n=Math.max(t,i))+(65536-n%65536)%65536)))return!0}return!1},n:function(){return 52},w:function(){return 52},s:function(){return 70},v:function(t,e,r,n){for(var o,i,a,s=0,u=0;u<r;u++){var f=y[e>>2],d=y[e+4>>2];e+=8;for(var h=0;h<d;h++)o=t,i=p[f+h],a=void 0,a=Gt[o],0===i||10===i?((1===o?c:l)(D(a,0)),a.length=0):a.push(i);s+=d}return y[n>>2]=s,0},H:function(){var t=o.SpineWasmUtil,e=t.getCurrentListenerID(),r=t.getCurrentTrackEntry(),n=t.getCurrentEvent(),i=t.getCurrentEventType();globalThis.TrackEntryListeners.emitListener(e,r,n,i.value)},B:function(){var t=o.SpineWasmUtil,e=t.getCurrentListenerID(),r=t.getCurrentEventType(),n=t.getCurrentTrackEntry(),i=t.getCurrentEvent();globalThis.TrackEntryListeners.emitTrackEntryListener(e,n,i,r.value)}};!function(){var t,e,r,i,a={a:Nt};function c(t){var e,r=t.exports;return o.asm=r,u=o.asm.I,C(),$=o.asm.K,e=o.asm.J,A.unshift(e),function(){if(k--,o.monitorRunDependencies&&o.monitorRunDependencies(k),0==k&&S){var t=S;S=null,t()}}(),r}if(k++,o.monitorRunDependencies&&o.monitorRunDependencies(k),o.instantiateWasm)try{return o.instantiateWasm(a,c)}catch(t){l("Module.instantiateWasm callback failed with error: "+t),n(t)}(t=s,e=T,r=a,i=function(t){c(t.instance)},t||"function"!=typeof WebAssembly.instantiateStreaming||O(e)||"function"!=typeof fetch?_(e,r,i):fetch(e,{credentials:"same-origin"}).then((t=>WebAssembly.instantiateStreaming(t,r).then(i,(function(t){return l("wasm streaming compile failed: "+t),l("falling back to ArrayBuffer instantiation"),_(e,r,i)}))))).catch(n)}();var Jt,Kt=function(){return(Kt=o.asm.L).apply(null,arguments)},Zt=function(){return(Zt=o.asm.M).apply(null,arguments)},Qt=function(){return(Qt=o.asm.N).apply(null,arguments)};function Xt(){function t(){Jt||(Jt=!0,o.calledRun=!0,b||(j(A),r(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),function(){if(o.postRun)for("function"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;)t=o.postRun.shift(),W.unshift(t);var t;j(W)}()))}k>0||(function(){if(o.preRun)for("function"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)t=o.preRun.shift(),P.unshift(t);var t;j(P)}(),k>0||(o.setStatus?(o.setStatus("Running..."),setTimeout((function(){setTimeout((function(){o.setStatus("")}),1),t()}),1)):t()))}if(o.__embind_initialize_bindings=function(){return(o.__embind_initialize_bindings=o.asm.O).apply(null,arguments)},o.dynCall_jiji=function(){return(o.dynCall_jiji=o.asm.P).apply(null,arguments)},S=function t(){Jt||Xt(),Jt||(S=t)},o.preInit)for("function"==typeof o.preInit&&(o.preInit=[o.preInit]);o.preInit.length>0;)o.preInit.pop()();return Xt(),t.ready}))}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
